var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.459,1,2.417]],["body/controllers/AppController.html",[0,2.56,1,4.241,2,2.159,3,0.295,4,0.295,5,0.257,6,4.465,7,0.499,8,1.913,9,6.845,10,6.845,11,1.808,12,0.023,13,6.209,14,0.934,15,5.237,16,1.913,17,0.842,18,5.237,19,5.237,20,5.294,21,6.209,22,1.708,23,0.349,24,5.237,25,0.956,26,2.616,27,3.021,28,0.295,29,0.045,30,5.237,31,1.808,32,5.237,33,5.237,34,5.237,35,0.016,36,0.019,37,0.016]],["title/modules/AppModule.html",[38,1.154,39,2.417]],["body/modules/AppModule.html",[1,4.304,2,2.39,3,0.263,4,0.263,5,0.229,12,0.023,23,0.406,25,0.854,26,2.336,27,2.698,28,0.263,29,0.04,35,0.014,36,0.018,37,0.014,38,2.055,39,5.032,40,2.051,41,2.051,42,2.336,43,2.336,44,2.051,45,3.147,46,2.336,47,3.988,48,3.988,49,3.988,50,3.225,51,3.981,52,3.981,53,3.696,54,4.313,55,3.696,56,4.313,57,2.896,58,2.051,59,2.186,60,4.677,61,3.105,62,2.505,63,1.928,64,4.677,65,4.677,66,3.195,67,3.988,68,3.988,69,3.988,70,3.988,71,4.677,72,4.677,73,3.988,74,1.084,75,3.988,76,2.186]],["title/injectables/AppService.html",[56,2.212,77,0.646]],["body/injectables/AppService.html",[3,0.319,4,0.319,5,0.278,12,0.022,23,0.319,25,1.035,28,0.319,29,0.049,35,0.017,36,0.02,37,0.017,56,4.065,77,1.187,78,2.075,79,4.833]],["title/modules/AuthModule.html",[38,1.154,50,1.654]],["body/modules/AuthModule.html",[3,0.257,4,0.257,5,0.224,12,0.023,23,0.409,25,0.835,26,2.285,27,2.639,28,0.257,29,0.039,35,0.014,36,0.017,37,0.014,38,2.034,40,2.006,41,2.006,42,2.285,43,2.285,44,2.006,45,3.116,46,3.116,50,3.39,51,3.299,52,3.299,53,3.062,55,3.062,57,2.856,58,2.006,59,2.138,61,2.45,62,2.45,63,1.886,67,3.9,68,3.9,69,3.9,70,3.9,76,2.138,80,3.9,81,3.9,82,3.9,83,3.869,84,4.289,85,4.289,86,3.959,87,4.574,88,4.205,89,2.859,90,1.886,91,4.574,92,3.456,93,3.9,94,2.856,95,2.45,96,4.574,97,4.574,98,3.9,99,2.859,100,2.285,101,2.859,102,4.574,103,3.124,104,3.9,105,4.574,106,3.9,107,4.574,108,4.574,109,0.735,110,2.45]],["title/injectables/AuthService.html",[77,0.646,83,1.895]],["body/injectables/AuthService.html",[3,0.248,4,0.248,5,0.216,7,0.421,8,1.723,12,0.023,14,0.923,16,1.723,17,0.899,23,0.388,25,0.806,28,0.248,29,0.038,31,1.628,35,0.013,36,0.017,37,0.013,63,1.821,77,1.021,78,1.616,83,2.996,86,3.723,92,3.337,95,2.365,98,3.765,109,1.037,111,3.765,112,4.226,113,3.541,114,2.247,115,5.593,116,2.614,117,3.765,118,4.875,119,4.034,120,6.908,121,4.416,122,1.891,123,0.534,124,0.749,125,1.787,126,4.769,127,5.593,128,4.416,129,5.593,130,3.82,131,4.416,132,1.223,133,3.227,134,4.416,135,3.765,136,3.337,137,2.365,138,3.337,139,3.016,140,2.761,141,3.765,142,2.869,143,1.373,144,1.454,145,1.507,146,3.765,147,3.765,148,4.226,149,2.12,150,2.614,151,4.416,152,3.837,153,2.12,154,4.416,155,5.593,156,3.765,157,2.761,158,2.171,159,3.765,160,3.765,161,4.416,162,2.548,163,4.416,164,5.593,165,4.416,166,3.337,167,4.416,168,4.416,169,4.416,170,0.857,171,3.765,172,1.023,173,3.765]],["title/classes/BudgetDto.html",[29,0.03,174,1.09]],["body/classes/BudgetDto.html",[3,0.142,4,0.142,5,0.32,7,0.24,11,1.102,12,0.023,14,0.569,17,1.197,22,1.041,23,0.142,28,0.367,29,0.056,35,0.008,36,0.011,37,0.008,74,1.694,109,1.035,123,0.596,124,0.824,132,0.55,143,1.808,144,0.984,145,1.399,170,1.053,172,1.054,174,1.166,175,2.387,176,0.921,177,1.166,178,1.874,179,1.484,180,1.97,181,1.561,182,1.599,183,1.811,184,2.252,185,2.517,186,2.517,187,2.84,188,0.733,189,0.977,190,0.977,191,0.977,192,0.87,193,0.821,194,1.385,195,2.247,196,2.123,197,2.247,198,2.226,199,0.977,200,0.977,201,0.977,202,1.469,203,0.977,204,0.733,205,1.385,206,0.977,207,0.733,208,1.385,209,2.499,210,2.499,211,0.821,212,0.776,213,0.821,214,1.172,215,0.821,216,0.87,217,0.821,218,0.87,219,1.385,220,1.821,221,1.307,222,1.307,223,0.921,224,1.492,225,1.307,226,0.977,227,1.469,228,1.235,229,0.921,230,1.484,231,1.484,232,0.776,233,0.821,234,0.821,235,0.977,236,0.821,237,0.921,238,0.821,239,0.977,240,1.385,241,0.821,242,0.977,243,0.921,244,0.921,245,0.921,246,0.776,247,0.654,248,0.776,249,1.324,250,0.977,251,1.235,252,0.821,253,0.977,254,0.821,255,1.041,256,1.484,257,0.977,258,0.821,259,1.235,260,1.235,261,1.235,262,0.776,263,0.87,264,0.821,265,0.87,266,0.87,267,0.921,268,0.87,269,0.821,270,0.921,271,0.776,272,0.87]],["title/classes/CardDto.html",[29,0.03,218,1.222]],["body/classes/CardDto.html",[3,0.133,4,0.133,5,0.315,7,0.225,11,1.684,12,0.023,14,0.87,17,1.198,22,0.992,23,0.133,28,0.362,29,0.055,35,0.007,36,0.011,37,0.007,74,1.694,109,1.019,123,0.594,124,0.825,132,0.516,143,1.812,144,0.938,145,1.365,170,1.024,172,1.014,174,0.728,175,2.354,176,0.865,177,1.111,178,1.509,179,0.77,180,1.933,181,2.385,182,1.6,183,1.846,184,2.253,187,2.829,188,0.688,189,0.917,190,0.917,191,0.917,192,0.816,193,0.77,194,1.602,195,2.226,196,2.103,197,2.226,198,2.183,199,0.917,200,0.917,201,0.917,202,1.699,203,0.917,204,0.688,205,1.32,206,0.917,207,0.688,208,1.32,209,2.462,210,2.462,211,0.77,212,0.728,213,0.77,214,1.135,215,0.77,216,0.816,217,0.77,218,1.246,219,1.792,220,1.981,221,1.692,222,1.692,223,1.32,224,1.53,225,1.692,226,1.4,227,1.901,228,1.597,229,1.32,230,1.814,231,1.814,232,0.728,233,0.77,234,0.77,235,0.917,236,0.77,237,0.865,238,0.77,239,0.917,240,1.32,241,0.77,242,0.917,243,0.865,244,0.865,245,0.865,246,0.728,247,0.614,248,0.728,249,1.274,250,0.917,251,1.176,252,0.77,253,0.917,254,0.77,255,0.992,256,1.427,257,0.917,258,0.77,259,1.176,260,1.176,261,1.176,262,0.728,263,0.816,264,0.77,265,0.816,266,0.816,267,0.865,268,0.816,269,0.77,270,0.865,271,0.728,272,0.816,273,2.362,274,2.362,275,2.362,276,2.362,277,2.362,278,2.362,279,2.362]],["title/injectables/CloudNotificationService.html",[77,0.646,280,1.654]],["body/injectables/CloudNotificationService.html",[3,0.276,4,0.276,5,0.24,7,0.467,8,1.838,12,0.023,14,0.897,16,1.509,17,1.034,23,0.335,25,0.894,28,0.276,29,0.042,31,1.426,35,0.015,36,0.018,37,0.015,77,1.089,78,1.793,114,2.354,122,1.509,123,0.426,124,0.671,125,1.426,142,3.006,148,4.507,149,2.06,158,1.902,177,1.838,192,1.692,195,1.598,196,1.509,197,1.598,280,2.788,281,4.859,282,3.701,283,6.432,284,5.965,285,5.965,286,4.184,287,4.899,288,4.899,289,3.062,290,3.701,291,5.965,292,5.965,293,5.965,294,6.694,295,5.965,296,4.899,297,4.074,298,4.899,299,4.899,300,3.701,301,4.177,302,4.177,303,4.177,304,3.701,305,4.177,306,4.177,307,4.177,308,4.177,309,4.177,310,4.177,311,4.899,312,4.899]],["title/classes/CreateDto.html",[29,0.03,193,1.154]],["body/classes/CreateDto.html",[3,0.133,4,0.133,5,0.315,7,0.225,11,1.682,12,0.023,14,0.869,17,1.198,22,0.99,23,0.133,28,0.361,29,0.055,35,0.007,36,0.011,37,0.007,74,1.694,109,1.083,123,0.597,124,0.824,132,0.787,143,1.812,144,1.135,145,1.499,170,1.022,172,1.287,174,0.726,175,2.352,176,0.862,177,1.109,178,1.507,179,0.769,180,1.932,181,2.383,182,1.601,183,1.735,184,2.252,187,2.828,188,0.686,189,1.398,190,1.398,191,1.398,192,1.243,193,1.174,194,1.599,195,2.225,196,2.102,197,2.225,198,2.181,199,1.696,200,1.398,201,1.696,202,1.696,203,1.696,204,1.048,205,1.79,206,1.398,207,1.272,208,1.599,209,2.46,210,2.46,211,0.769,212,0.726,213,0.769,214,1.133,215,0.769,216,0.814,217,0.769,218,0.814,219,1.318,220,1.781,221,1.243,222,1.243,223,0.862,224,1.449,225,1.243,226,0.915,227,1.398,228,1.174,229,0.862,230,1.425,231,1.425,232,0.726,233,0.769,234,0.769,235,0.915,236,0.769,237,0.862,238,0.769,239,0.915,240,1.318,241,0.769,242,0.915,243,0.862,244,0.862,245,0.862,246,0.726,247,0.612,248,0.726,249,1.272,250,0.915,251,1.174,252,0.769,253,0.915,254,0.769,255,0.99,256,1.425,257,0.915,258,0.769,259,1.174,260,1.174,261,1.174,262,0.726,263,0.814,264,0.769,265,0.814,266,0.814,267,0.862,268,0.814,269,0.769,270,0.862,271,0.726,272,0.814,313,2.356,314,2.356,315,2.356,316,2.356,317,2.356,318,2.356,319,2.356]],["title/classes/DeleteDto.html",[29,0.03,266,1.222]],["body/classes/DeleteDto.html",[3,0.141,4,0.141,5,0.32,7,0.24,11,1.101,12,0.023,14,0.569,17,1.197,22,1.041,23,0.141,28,0.367,29,0.056,35,0.008,36,0.011,37,0.008,74,1.694,109,1.034,123,0.593,124,0.824,132,0.55,143,1.808,144,0.983,145,1.398,170,1.105,172,1.054,174,0.775,175,2.387,176,0.921,177,1.166,178,1.671,179,0.821,180,1.939,181,1.56,182,1.599,183,1.77,184,2.252,187,2.84,188,0.732,189,0.977,190,0.977,191,0.977,192,0.869,193,0.821,194,1.385,195,2.247,196,2.122,197,2.247,198,2.226,199,0.977,200,0.977,201,0.977,202,1.469,203,0.977,204,0.732,205,1.385,206,0.977,207,0.732,208,1.385,209,2.499,210,2.499,211,0.821,212,0.775,213,0.821,214,1.172,215,0.821,216,0.869,217,0.821,218,0.869,219,1.385,220,1.821,221,1.307,222,1.307,223,0.921,224,1.492,225,1.307,226,0.977,227,1.469,228,1.234,229,0.921,230,1.483,231,1.483,232,0.775,233,0.821,234,0.821,235,0.977,236,0.821,237,0.921,238,0.821,239,0.977,240,1.385,241,0.821,242,0.977,243,0.921,244,0.921,245,0.921,246,0.775,247,0.654,248,0.775,249,1.324,250,0.977,251,1.234,252,0.821,253,0.977,254,0.821,255,1.251,256,1.649,257,0.977,258,0.821,259,1.234,260,1.234,261,1.234,262,0.775,263,0.869,264,0.821,265,0.869,266,1.307,267,1.385,268,1.307,269,1.483,270,1.664,271,0.775,272,0.869,320,2.516,321,2.516]],["title/controllers/EmailController.html",[0,1.459,322,2.417]],["body/controllers/EmailController.html",[0,2.261,2,1.448,3,0.197,4,0.197,5,0.172,7,0.335,8,1.481,11,1.596,12,0.023,14,0.825,16,1.689,17,1.025,22,1.622,23,0.347,25,0.641,28,0.197,29,0.03,31,1.717,35,0.011,36,0.015,37,0.011,58,2.586,109,1.131,114,2.469,116,1.641,122,1.689,123,0.477,124,0.617,125,1.596,132,1.051,142,1.641,143,0.862,145,1.603,149,1.213,150,2.563,152,3.006,153,2.297,158,2.129,162,3.68,170,1.291,172,1.597,182,1.289,188,1.022,204,1.4,214,1.582,215,1.923,216,2.134,217,1.923,247,1.533,272,1.661,322,3.284,323,2.994,324,2.398,325,4.808,326,4.1,327,4.808,328,4.1,329,4.808,330,5.897,331,3.633,332,4.808,333,4.808,334,4.808,335,4.808,336,4.808,337,4.1,338,4.808,339,3.511,340,4.82,341,4.357,342,3.511,343,4.357,344,3.284,345,2.398,346,3.745,347,3.511,348,4.808,349,5.028,350,3.284,351,4.1,352,5.897,353,4.808,354,4.808,355,3.186,356,3.511,357,3.511,358,4.028,359,3.284,360,3.511,361,3.284,362,4.808,363,3.284,364,4.808,365,3.511,366,3.511,367,3.511,368,4.808,369,4.808,370,4.808,371,4.808,372,4.808,373,3.633,374,3.633,375,3.284,376,2.994,377,2.982,378,2.653,379,1.881,380,3.163,381,2.994,382,2.398,383,2.398,384,2.398,385,2.398,386,2.398,387,3.511,388,3.511,389,3.284,390,3.006,391,3.745,392,3.745,393,3.745,394,3.511,395,2.739,396,3.511,397,2.739,398,4.1,399,3.511,400,2.398,401,2.195,402,3.511,403,3.511,404,4.808,405,3.511,406,3.511,407,3.511,408,3.511,409,3.511,410,3.511]],["title/modules/EmailModule.html",[38,1.154,51,2.042]],["body/modules/EmailModule.html",[2,2.359,3,0.258,4,0.258,5,0.224,12,0.023,23,0.406,25,0.836,28,0.258,29,0.039,35,0.014,36,0.017,37,0.014,38,2.036,40,2.008,41,2.008,42,2.287,43,2.287,44,2.008,45,3.117,46,3.117,50,2.675,51,4.199,53,3.676,55,3.676,57,2.858,58,2.008,59,2.14,61,3.065,62,2.453,63,1.888,76,2.14,88,3.577,89,2.863,90,1.888,94,2.858,95,2.453,99,2.863,100,2.287,101,2.863,109,0.736,110,3.343,123,0.543,249,1.333,280,3.377,322,4.263,380,4.168,381,3.904,411,3.904,412,4.579,413,3.904,414,3.904,415,4.579,416,4.579,417,4.579,418,2.858,419,2.453,420,4.579,421,4.579,422,3.065,423,3.128,424,2.863,425,2.863,426,2.863,427,2.287]],["title/classes/EmailResetDto.html",[29,0.03,215,1.154]],["body/classes/EmailResetDto.html",[3,0.143,4,0.143,5,0.321,7,0.243,11,0.741,12,0.023,14,0.383,17,1.198,22,1.05,23,0.143,28,0.368,29,0.056,35,0.008,36,0.012,37,0.008,74,1.694,109,1.051,123,0.594,124,0.824,132,0.557,143,1.807,144,0.992,145,1.405,170,1.058,172,1.263,174,0.785,175,2.393,176,0.932,177,1.176,178,1.568,179,0.831,180,1.943,181,1.05,182,1.599,183,1.777,184,2.252,187,2.842,188,0.741,189,0.989,190,0.989,191,0.989,192,0.88,193,0.831,194,1.398,195,2.251,196,2.126,197,2.251,198,2.234,199,0.989,200,0.989,201,0.989,202,1.482,203,0.989,204,0.741,205,1.398,206,0.989,207,0.741,208,1.677,209,2.506,210,2.506,211,0.831,212,0.785,213,0.831,214,1.179,215,1.245,216,1.319,217,0.831,218,0.88,219,1.398,220,1.828,221,1.319,222,1.319,223,0.932,224,1.5,225,1.319,226,0.989,227,1.482,228,1.245,229,0.932,230,1.494,231,1.494,232,0.785,233,0.831,234,0.831,235,0.989,236,0.831,237,0.932,238,0.831,239,0.989,240,1.398,241,0.831,242,0.989,243,0.932,244,0.932,245,0.932,246,0.785,247,0.662,248,0.785,249,1.334,250,0.989,251,1.245,252,0.831,253,0.989,254,0.831,255,1.05,256,1.494,257,0.989,258,0.831,259,1.245,260,1.245,261,1.245,262,0.785,263,0.88,264,0.831,265,0.88,266,0.88,267,0.932,268,0.88,269,0.831,270,0.932,271,0.785,272,0.88,428,2.547]],["title/injectables/EmailService.html",[77,0.646,380,2.042]],["body/injectables/EmailService.html",[3,0.316,4,0.154,5,0.134,7,0.261,8,1.241,12,0.023,14,0.884,16,1.872,17,1.054,22,1.715,23,0.342,25,0.5,26,1.368,27,1.58,28,0.154,29,0.024,31,1.815,35,0.008,36,0.012,37,0.008,58,2.664,77,0.735,78,1.002,100,1.368,103,4.014,106,2.335,109,1.144,113,3.671,114,2.151,122,1.811,123,0.543,124,0.661,125,1.711,132,0.881,133,2.324,138,2.069,139,1.87,142,2.747,145,1.684,149,2.316,150,3.024,153,2.099,157,3.674,158,1.856,159,4.076,162,2.324,166,3.612,170,1.312,171,3.435,172,1.538,173,2.335,182,1.228,195,0.893,196,0.844,197,0.893,204,1.173,214,1.608,216,1.651,223,1.475,224,1.108,263,1.392,265,2.444,326,3.435,337,3.435,349,3.435,351,4.495,355,2.634,363,2.752,373,3.044,374,3.983,377,2.914,380,2.324,395,2.013,397,2.013,401,2.519,429,2.335,430,1.883,431,2.824,432,4.029,433,4.029,434,4.029,435,4.029,436,2.158,437,2.519,438,4.029,439,2.738,440,4.029,441,4.029,442,4.029,443,2.519,444,4.029,445,2.738,446,3.435,447,4.029,448,5.877,449,4.029,450,3.044,451,3.435,452,4.029,453,2.738,454,2.752,455,4.029,456,4.029,457,3.435,458,4.029,459,3.435,460,4.029,461,4.029,462,2.738,463,4.029,464,4.029,465,4.029,466,2.738,467,4.029,468,3.435,469,3.435,470,4.029,471,4.029,472,5.272,473,3.044,474,3.435,475,4.029,476,5.272,477,1.712,478,1.87,479,1.87,480,3.042,481,2.324,482,1.87,483,2.738,484,2.738,485,2.335,486,4.076,487,4.781,488,2.738,489,2.738,490,2.752,491,2.738,492,2.738,493,3.435,494,3.435,495,3.265,496,4.029,497,2.335,498,4.029,499,2.738,500,2.738,501,2.738,502,2.335,503,3.435,504,4.029,505,4.029,506,2.335,507,2.738,508,2.738,509,2.738,510,2.335,511,2.738,512,2.738,513,2.335,514,2.738,515,4.029,516,2.738,517,2.738,518,2.738,519,2.738,520,2.335,521,2.738,522,2.738,523,2.738,524,2.738,525,2.738,526,4.495,527,2.738,528,2.738,529,2.738,530,2.738,531,2.738,532,2.738,533,2.738,534,2.738,535,2.738,536,4.029,537,3.044,538,2.738,539,2.738,540,2.335,541,2.738,542,2.738,543,2.335,544,2.738,545,2.738,546,2.738,547,2.738,548,2.738,549,2.738,550,4.029,551,2.738,552,2.738,553,4.029,554,2.738,555,2.738,556,2.738]],["title/controllers/ExpenseController.html",[0,1.459,557,2.417]],["body/controllers/ExpenseController.html",[0,0.976,2,0.976,3,0.384,4,0.133,5,0.116,7,0.226,8,1.114,11,1.781,12,0.023,14,0.92,16,1.885,17,1.141,23,0.297,25,0.432,28,0.133,29,0.02,31,1.781,35,0.007,36,0.011,37,0.007,90,0.976,114,2.579,116,1.107,122,1.885,123,0.532,124,0.688,125,1.781,132,1.305,142,1.107,143,0.581,150,2.859,152,3.823,153,2.191,158,2.374,162,3.916,170,1.417,174,1.784,178,2.201,182,1.337,188,0.69,213,2.298,247,1.447,248,1.784,249,1.896,255,1.349,256,1.947,262,1.627,265,1.694,268,1.248,324,1.618,341,1.618,343,4.636,344,2.468,345,1.618,346,4.178,355,3.575,358,4.573,359,3.802,375,1.618,377,3.284,379,1.269,382,1.618,383,1.618,384,1.618,385,1.618,386,1.618,389,4.077,390,3.731,391,4.178,392,4.178,393,4.178,395,3.055,397,3.055,400,1.618,401,1.48,557,2.468,558,2.019,559,3.081,560,3.081,561,3.614,562,3.614,563,3.081,564,3.081,565,3.614,566,3.081,567,3.614,568,2.368,569,5.417,570,2.368,571,2.368,572,3.614,573,3.614,574,2.368,575,2.368,576,2.368,577,3.614,578,3.614,579,2.368,580,2.368,581,3.081,582,2.368,583,6.116,584,2.368,585,2.368,586,2.368,587,3.614,588,2.368,589,2.368,590,2.368,591,4.904,592,3.614,593,3.614,594,2.368,595,2.368,596,2.368,597,2.368,598,2.368,599,2.368,600,3.081,601,2.368,602,2.368,603,2.368,604,2.368,605,2.368,606,2.368,607,2.368,608,3.614,609,1.789,610,2.019,611,2.019,612,1.789,613,2.085,614,2.019,615,2.368,616,2.368,617,2.368,618,4.621,619,2.368,620,2.368,621,2.368,622,5.215,623,2.368,624,2.368,625,2.368,626,4.936,627,2.368,628,2.368,629,2.368,630,2.368,631,2.368,632,2.368,633,2.368,634,2.368,635,3.737,636,2.368,637,2.368,638,2.368,639,2.368,640,2.368,641,2.368,642,2.368,643,2.368,644,2.368,645,2.368,646,2.368,647,2.368,648,2.368]],["title/classes/ExpenseDto.html",[29,0.03,248,1.09]],["body/classes/ExpenseDto.html",[3,0.137,4,0.137,5,0.317,7,0.232,11,1.555,12,0.023,14,0.803,17,1.198,22,1.014,23,0.137,28,0.364,29,0.056,35,0.007,36,0.011,37,0.007,74,1.694,109,1.026,123,0.59,124,0.825,132,0.531,143,1.811,144,0.958,145,1.38,170,1.036,172,1.032,174,0.749,175,2.369,176,0.89,177,1.136,178,1.531,179,0.793,180,1.958,181,2.202,182,1.601,183,1.859,184,2.253,187,2.834,188,0.708,189,0.943,190,0.943,191,0.943,192,0.839,193,0.793,194,1.349,195,2.235,196,2.112,197,2.235,198,2.202,199,0.943,200,0.943,201,0.943,202,1.431,203,0.943,204,0.708,205,1.349,206,0.943,207,0.708,208,1.349,209,2.478,210,2.478,211,0.793,212,0.749,213,0.793,214,1.152,215,0.793,216,0.839,217,0.793,218,0.839,219,1.349,220,1.8,221,1.273,222,1.273,223,0.89,224,1.655,225,1.273,226,0.943,227,1.431,228,1.202,229,0.89,230,1.452,231,1.452,232,0.749,233,0.793,234,0.793,235,0.943,236,0.793,237,0.89,238,0.793,239,0.943,240,1.349,241,0.793,242,0.943,243,0.89,244,0.89,245,0.89,246,0.749,247,0.632,248,1.136,249,1.637,250,1.431,251,1.742,252,1.452,253,1.431,254,1.452,255,1.014,256,1.452,257,0.943,258,0.793,259,1.202,260,1.202,261,1.202,262,0.749,263,0.839,264,0.793,265,0.839,266,0.839,267,0.89,268,0.839,269,0.793,270,0.89,271,0.749,272,0.839,649,2.43,650,2.43,651,2.43,652,2.43,653,2.43]],["title/modules/ExpenseModule.html",[38,1.154,52,2.042]],["body/modules/ExpenseModule.html",[2,2.402,3,0.265,4,0.265,5,0.231,12,0.023,23,0.406,25,0.86,28,0.265,29,0.041,35,0.014,36,0.018,37,0.014,38,2.062,40,2.067,41,2.067,42,2.354,43,2.354,44,2.067,45,3.158,46,3.158,50,2.723,52,4.143,57,2.91,58,2.067,59,2.203,61,2.524,62,2.524,63,1.943,66,3.219,76,2.203,88,3.641,89,2.946,90,1.943,94,2.91,95,2.524,99,2.946,100,2.354,101,2.946,109,0.757,110,3.386,123,0.55,249,1.372,280,3.389,418,2.91,419,2.524,422,3.12,423,3.219,424,2.946,425,2.946,426,2.946,427,2.354,557,4.318,613,4.183,614,4.018,654,4.018,655,4.018,656,4.018,657,4.713,658,2.354,659,4.018,660,4.713]],["title/injectables/ExpenseService.html",[77,0.646,613,2.042]],["body/injectables/ExpenseService.html",[3,0.271,4,0.157,5,0.136,7,0.265,8,1.256,12,0.023,14,0.977,16,2.001,17,1.158,22,0.766,23,0.318,25,0.508,28,0.157,29,0.024,31,2.075,35,0.008,36,0.012,37,0.008,74,1.231,77,0.744,78,1.019,109,1.154,113,4.132,114,2.622,122,2.001,123,0.573,124,0.741,125,1.891,132,1.397,133,3.913,149,2.109,153,1.954,158,2.481,170,1.411,174,1.882,178,1.882,179,1.574,182,0.608,183,1.187,214,0.945,224,1.122,248,1.882,251,1.33,252,1.33,254,1.33,255,1.462,258,0.908,259,0.908,260,0.908,261,0.908,264,0.908,269,1.33,270,2.235,350,2.785,355,3.192,377,1.906,379,1.491,395,3.192,397,3.192,430,1.906,431,2.846,436,2.184,437,2.549,477,1.74,478,1.901,479,1.901,480,3.747,481,1.606,482,1.901,495,4.436,559,3.477,560,3.477,563,3.477,564,3.477,566,3.477,613,2.353,661,2.373,662,4.078,663,4.078,664,4.078,665,4.078,666,4.078,667,2.783,668,4.078,669,2.783,670,4.078,671,2.783,672,2.785,673,3.081,674,4.078,675,2.783,676,4.078,677,2.783,678,4.078,679,2.783,680,4.078,681,2.783,682,4.078,683,2.783,684,4.078,685,2.783,686,2.103,687,1.901,688,2.103,689,1.901,690,2.783,691,4.06,692,4.907,693,5.448,694,4.823,695,3.081,696,5.911,697,3.477,698,3.646,699,2.783,700,2.783,701,2.783,702,2.783,703,4.823,704,5.207,705,3.081,706,2.783,707,2.783,708,2.783,709,4.078,710,4.078,711,2.783,712,2.783,713,2.783]],["title/interfaces/IExpense.html",[714,1.895,715,2.417]],["body/interfaces/IExpense.html",[3,0.234,4,0.234,5,0.204,7,0.397,12,0.023,17,1.186,22,1.483,23,0.234,28,0.303,35,0.013,36,0.016,37,0.013,74,1.693,123,0.469,124,0.834,130,4.314,137,2.887,149,1.44,153,1.44,170,1.159,177,1.661,178,2.015,179,2.133,180,2.096,183,1.569,184,2.246,224,1.483,251,1.758,252,1.758,254,1.758,258,1.758,259,1.758,260,1.758,261,1.758,264,1.758,269,2.133,289,2.606,422,2.233,430,1.948,691,4.088,695,4.072,698,4.941,714,2.233,715,3.682,716,2.847,717,3.149,718,3.149,719,2.847,720,3.149,721,3.554,722,2.847]],["title/interfaces/IPlan.html",[714,1.895,723,2.212]],["body/interfaces/IPlan.html",[3,0.248,4,0.248,5,0.216,7,0.42,12,0.023,17,1.201,23,0.248,28,0.314,35,0.013,36,0.017,37,0.013,74,1.685,124,0.833,130,3.814,137,2.991,149,1.522,153,1.522,177,1.721,180,1.283,183,1.626,184,2.224,204,1.283,220,2.05,221,1.929,222,1.929,224,1.212,225,1.929,228,1.821,230,1.821,231,1.821,234,2.17,236,2.17,238,2.17,241,2.17,246,2.05,289,2.754,418,2.201,430,2.059,691,4.159,714,2.36,716,3.009,718,3.329,719,3.009,720,3.329,722,3.009,723,3.491,724,3.329,725,5.026,726,2.754]],["title/interfaces/IUser.html",[140,2.212,714,1.895]],["body/interfaces/IUser.html",[3,0.219,4,0.219,5,0.191,7,0.371,12,0.023,17,1.195,23,0.325,28,0.29,31,1.502,35,0.012,36,0.016,37,0.012,74,1.613,94,1.947,109,0.829,119,2.436,124,0.821,125,2.056,137,2.763,138,2.945,139,2.662,140,3.225,144,1.664,145,1.647,149,1.997,150,1.822,153,1.346,156,3.323,166,3.897,172,1.524,177,1.589,180,1.683,184,1.972,196,1.589,204,1.683,207,1.863,214,0.903,263,1.997,286,2.436,289,4.001,290,2.945,430,1.822,443,2.436,457,3.323,473,2.945,474,3.323,480,3.336,490,2.662,502,3.323,503,4.93,537,3.897,714,2.088,716,2.662,718,2.945,719,2.662,722,2.662,727,2.945,728,6.154,729,4.372,730,4.372,731,4.836,732,4.372,733,5.457,734,5.457,735,4.368,736,3.323,737,3.323,738,3.323,739,3.323,740,3.323,741,5.247,742,3.898,743,3.898,744,2.945,745,3.898,746,3.898,747,3.898,748,3.898,749,3.898,750,3.898,751,3.898,752,3.898,753,3.898,754,3.898,755,3.898,756,3.898,757,3.898,758,3.898,759,3.898,760,3.898,761,5.158,762,3.898,763,3.898]],["title/classes/ImageDto.html",[29,0.03,255,0.974]],["body/classes/ImageDto.html",[3,0.131,4,0.131,5,0.314,7,0.222,11,1.771,12,0.023,14,0.915,17,1.196,22,1.441,23,0.131,28,0.36,29,0.055,35,0.007,36,0.011,37,0.007,74,1.695,109,1.015,123,0.596,124,0.827,132,0.508,143,1.814,144,0.926,145,1.356,170,1.152,172,1.004,174,0.716,175,2.345,176,0.851,177,1.098,178,1.497,179,0.758,180,2.011,181,2.508,182,1.601,183,1.728,184,2.254,187,2.826,188,0.677,189,0.903,190,0.903,191,0.903,192,0.803,193,0.758,194,1.304,195,2.22,196,2.098,197,2.22,198,2.172,199,0.903,200,0.903,201,0.903,202,1.384,203,0.903,204,0.677,205,1.304,206,0.903,207,0.677,208,1.304,209,2.452,210,2.452,211,0.758,212,0.716,213,0.758,214,1.126,215,0.758,216,0.803,217,0.758,218,0.803,219,1.304,220,1.772,221,1.231,222,1.231,223,0.851,224,1.52,225,1.231,226,0.903,227,1.384,228,1.162,229,0.851,230,1.413,231,1.413,232,0.716,233,0.758,234,0.758,235,0.903,236,0.758,237,0.851,238,0.758,239,0.903,240,1.304,241,0.758,242,0.903,243,0.851,244,0.851,245,0.851,246,0.716,247,0.604,248,0.716,249,1.262,250,0.903,251,1.162,252,0.758,253,0.903,254,0.758,255,1.192,256,1.708,257,1.384,258,1.413,259,1.708,260,1.708,261,1.708,262,1.098,263,1.231,264,1.413,265,1.231,266,0.803,267,0.851,268,0.803,269,0.758,270,0.851,271,0.716,272,0.803,764,2.325,765,2.325,766,2.325,767,2.325,768,2.325,769,2.325,770,2.325,771,2.325,772,2.325]],["title/injectables/JwtStrategy.html",[77,0.646,84,2.212]],["body/injectables/JwtStrategy.html",[3,0.351,4,0.257,5,0.224,7,0.436,8,1.762,12,0.023,14,0.86,16,1.409,23,0.367,25,0.835,26,2.285,27,2.639,28,0.257,29,0.039,31,1.332,35,0.014,36,0.017,37,0.014,76,2.138,77,1.044,78,1.674,84,3.574,90,1.886,100,3.36,104,3.9,109,0.919,114,2.283,116,2.916,119,4.289,122,1.409,123,0.398,124,0.515,125,1.332,170,1.11,172,1.325,182,1,194,2.093,214,1.325,373,4.937,377,2.138,430,2.138,443,4.085,446,4.875,468,5.572,497,5.318,672,3.905,773,3.9,774,4.574,775,5.718,776,4.574,777,5.718,778,5.718,779,5.318,780,4.713,781,5.718,782,5.718,783,5.718,784,5.718,785,5.718,786,5.718,787,5.718,788,5.718,789,5.718,790,5.718,791,5.718,792,6.535,793,5.718,794,5.718,795,5.718,796,5.718,797,5.718,798,5.718,799,5.718,800,5.718,801,4.574,802,3.9,803,3.9,804,3.9,805,4.574,806,4.574,807,4.574,808,4.574]],["title/injectables/LocalStrategy.html",[77,0.646,85,2.212]],["body/injectables/LocalStrategy.html",[3,0.279,4,0.279,5,0.243,7,0.473,8,1.853,12,0.023,14,0.905,16,1.53,17,1.125,23,0.378,25,0.906,28,0.279,29,0.043,31,1.445,35,0.015,36,0.018,37,0.015,77,1.098,78,1.817,83,3.749,85,3.759,90,2.047,93,4.233,109,0.966,114,2.368,116,2.32,119,3.759,122,1.853,123,0.523,124,0.677,125,1.751,132,1.085,133,3.469,135,4.233,143,1.219,144,1.563,145,1.476,149,2.077,158,1.927,430,2.32,779,4.233,780,3.751,802,4.233,803,4.233,804,4.233,809,4.233,810,4.965,811,4.965,812,6.014,813,6.887,814,4.965,815,6.469,816,4.233,817,4.965,818,4.965]],["title/classes/LoginDto.html",[29,0.03,211,1.154]],["body/classes/LoginDto.html",[3,0.142,4,0.142,5,0.32,7,0.24,11,1.103,12,0.023,14,0.57,17,1.198,22,1.042,23,0.142,28,0.367,29,0.056,35,0.008,36,0.011,37,0.008,74,1.694,109,1.048,123,0.593,124,0.824,132,0.551,143,1.809,144,1.183,145,1.528,170,1.053,172,1.055,174,0.776,175,2.388,176,0.922,177,1.167,178,1.559,179,0.822,180,1.939,181,1.561,182,1.599,183,1.771,184,2.252,187,2.84,188,0.733,189,0.978,190,0.978,191,0.978,192,0.87,193,0.822,194,1.386,195,2.247,196,2.123,197,2.247,198,2.227,199,0.978,200,0.978,201,0.978,202,1.47,203,0.978,204,0.733,205,1.852,206,0.978,207,0.733,208,1.386,209,2.5,210,2.5,211,1.235,212,0.776,213,0.822,214,1.173,215,0.822,216,0.87,217,0.822,218,0.87,219,1.386,220,1.822,221,1.308,222,1.308,223,0.922,224,1.493,225,1.308,226,0.978,227,1.47,228,1.235,229,0.922,230,1.484,231,1.484,232,0.776,233,0.822,234,0.822,235,0.978,236,0.822,237,0.922,238,0.822,239,0.978,240,1.386,241,0.822,242,0.978,243,0.922,244,0.922,245,0.922,246,0.776,247,0.655,248,0.776,249,1.325,250,0.978,251,1.235,252,0.822,253,0.978,254,0.822,255,1.042,256,1.484,257,0.978,258,0.822,259,1.235,260,1.235,261,1.235,262,0.776,263,0.87,264,0.822,265,0.87,266,0.87,267,0.922,268,0.87,269,0.822,270,0.922,271,0.776,272,0.87,819,2.519,820,2.519]],["title/injectables/ModelService.html",[77,0.646,431,1.895]],["body/injectables/ModelService.html",[3,0.274,4,0.274,5,0.239,7,0.464,8,1.831,12,0.023,14,0.894,16,1.5,23,0.397,25,0.888,28,0.274,29,0.042,31,1.417,35,0.015,36,0.018,37,0.015,63,2.007,77,1.084,78,1.781,95,2.607,116,2.777,117,4.15,118,5.452,122,1.831,123,0.517,124,0.669,125,1.73,126,5.066,136,3.677,137,2.607,140,3.042,141,4.15,143,1.574,280,3.122,419,2.607,424,3.042,425,3.042,431,3.182,436,3.778,437,3.714,477,3.714,480,3.428,481,3.428,715,3.324,723,3.042,821,4.15,822,5.468,823,6.413,824,5.468,825,4.867,826,4.867,827,4.867,828,4.867,829,4.15,830,4.867]],["title/classes/PassResPageDto.html",[29,0.03,217,1.154]],["body/classes/PassResPageDto.html",[3,0.14,4,0.14,5,0.319,7,0.237,11,1.315,12,0.023,14,0.679,17,1.198,22,1.032,23,0.14,28,0.366,29,0.056,35,0.008,36,0.011,37,0.008,74,1.694,109,1.058,123,0.592,124,0.825,132,0.544,143,1.809,144,0.975,145,1.523,170,1.176,172,1.047,174,0.767,175,2.381,176,0.911,177,1.156,178,1.55,179,0.812,180,1.935,181,1.862,182,1.6,183,1.765,184,2.252,187,2.838,188,0.725,189,0.966,190,0.966,191,0.966,192,0.86,193,0.812,194,1.374,195,2.243,196,2.119,197,2.243,198,2.218,199,0.966,200,0.966,201,0.966,202,1.457,203,0.966,204,0.725,205,1.374,206,0.966,207,0.725,208,1.374,209,2.492,210,2.492,211,0.812,212,0.767,213,0.812,214,1.365,215,0.812,216,0.86,217,1.224,218,0.86,219,1.374,220,1.814,221,1.296,222,1.296,223,0.911,224,1.485,225,1.296,226,0.966,227,1.457,228,1.224,229,0.911,230,1.473,231,1.473,232,0.767,233,0.812,234,0.812,235,0.966,236,0.812,237,0.911,238,0.812,239,0.966,240,1.374,241,0.812,242,0.966,243,0.911,244,0.911,245,0.911,246,0.767,247,0.647,248,0.767,249,1.315,250,0.966,251,1.224,252,0.812,253,0.966,254,0.812,255,1.032,256,1.473,257,0.966,258,0.812,259,1.224,260,1.224,261,1.224,262,0.767,263,0.86,264,0.812,265,0.86,266,0.86,267,0.911,268,0.86,269,0.812,270,0.911,271,0.767,272,0.86,831,2.489,832,2.489,833,2.489]],["title/controllers/PlanController.html",[0,1.459,834,2.417]],["body/controllers/PlanController.html",[0,1.364,2,1.364,3,0.394,4,0.186,5,0.162,7,0.315,8,1.422,11,1.76,12,0.023,14,0.91,16,1.863,17,1.07,23,0.34,25,0.604,28,0.186,29,0.028,31,1.76,35,0.01,36,0.014,37,0.01,90,1.364,114,2.567,116,1.546,122,1.863,123,0.526,124,0.647,125,1.76,142,1.546,143,0.812,150,2.826,152,3.78,153,2.22,158,2.347,162,3.891,170,1.38,182,1.322,188,0.963,213,2.275,220,1.422,232,1.98,233,2.319,247,1.199,262,1.637,268,1.594,324,2.259,341,2.259,343,4.607,344,3.927,345,3.152,346,4.13,355,3.369,358,4.277,359,3.152,361,3.927,375,3.152,377,3.186,379,1.772,382,2.259,383,2.259,384,2.259,385,2.259,386,2.259,389,3.629,390,2.884,391,4.13,392,4.13,393,4.13,395,3.02,397,3.02,400,3.152,401,2.884,427,2.305,454,3.152,481,2.662,513,2.821,569,5.371,581,2.821,609,2.499,610,2.821,611,2.821,612,2.499,618,4.568,622,5.155,626,3.934,635,2.821,834,3.152,835,2.821,836,3.934,837,4.614,838,4.614,839,3.934,840,4.614,841,3.308,842,3.308,843,3.308,844,3.308,845,3.308,846,3.308,847,3.308,848,3.308,849,3.308,850,3.308,851,3.308,852,3.308,853,3.308,854,3.308,855,3.308,856,4.015,857,3.486,858,2.846,859,2.821,860,3.308,861,3.308,862,3.308,863,3.308,864,3.308,865,3.308,866,3.308,867,3.308,868,3.308,869,3.308,870,3.308,871,3.308,872,3.308,873,3.308,874,3.308]],["title/classes/PlanDto.html",[29,0.03,232,1.09]],["body/classes/PlanDto.html",[3,0.134,4,0.134,5,0.316,7,0.228,11,1.626,12,0.023,14,0.84,17,1.198,22,1.001,23,0.134,28,0.363,29,0.056,35,0.007,36,0.011,37,0.007,74,1.694,109,1.022,123,0.592,124,0.825,130,1.632,132,0.522,143,1.812,144,0.946,145,1.371,170,1.029,172,1.021,174,0.736,175,2.36,176,0.875,177,1.121,178,1.518,179,0.779,180,1.919,181,2.303,182,1.6,183,1.821,184,2.252,187,2.831,188,0.696,189,0.928,190,0.928,191,0.928,192,0.825,193,0.779,194,1.332,195,2.23,196,2.106,197,2.23,198,2.191,199,0.928,200,0.928,201,0.928,202,1.413,203,0.928,204,0.696,205,1.332,206,0.928,207,0.696,208,1.332,209,2.468,210,2.468,211,0.779,212,0.736,213,0.779,214,1.142,215,0.779,216,0.825,217,0.779,218,0.825,219,1.332,220,1.927,221,1.257,222,1.257,223,0.875,224,1.537,225,1.257,226,0.928,227,1.413,228,1.187,229,0.875,230,1.437,231,1.437,232,1.121,233,1.187,234,1.437,235,1.413,236,1.437,237,1.332,238,1.437,239,1.413,240,1.803,241,1.437,242,1.413,243,1.332,244,1.332,245,1.332,246,1.358,247,0.946,248,0.736,249,1.283,250,0.928,251,1.187,252,0.779,253,0.928,254,0.779,255,1.001,256,1.437,257,0.928,258,0.779,259,1.187,260,1.187,261,1.187,262,0.736,263,0.825,264,0.779,265,0.825,266,0.825,267,0.875,268,0.825,269,0.779,270,0.875,271,0.736,272,0.825,875,2.39,876,2.39,877,2.39,878,2.39,879,2.39,880,2.39]],["title/modules/PlanModule.html",[38,1.154,53,1.895]],["body/modules/PlanModule.html",[2,2.372,3,0.26,4,0.26,5,0.226,12,0.023,23,0.405,25,0.843,28,0.26,29,0.04,35,0.014,36,0.017,37,0.014,38,2.044,40,2.026,41,2.026,42,2.307,43,2.307,44,2.026,45,3.13,46,3.13,50,2.689,53,3.889,57,2.874,58,2.026,59,2.159,61,2.474,62,2.474,63,1.904,66,3.155,76,2.159,88,3.596,89,2.887,90,1.904,94,2.874,95,2.474,99,2.887,100,2.307,101,2.887,109,0.742,110,3.356,123,0.545,249,1.345,280,3.381,418,2.874,419,2.474,422,3.081,423,3.155,424,2.887,425,2.887,426,2.887,427,2.307,658,3.613,659,3.938,834,4.28,858,3.874,881,3.938,882,3.938,883,3.938,884,4.619,885,4.619,886,4.619]],["title/injectables/PlanService.html",[77,0.646,858,1.895]],["body/injectables/PlanService.html",[3,0.404,4,0.12,5,0.105,7,0.204,8,1.029,12,0.023,14,0.93,16,2.082,17,0.81,23,0.314,25,0.39,28,0.12,29,0.018,31,1.978,35,0.006,36,0.01,37,0.006,74,0.496,77,0.61,78,0.783,109,1.179,113,2.371,114,2.487,122,1.935,123,0.538,124,0.668,125,1.8,132,1.262,133,3.717,142,3.043,146,3.96,149,2.288,150,2.355,153,1.845,157,3.793,158,2.303,170,1.394,180,0.623,182,1.327,183,0.623,214,1.493,220,2.104,224,0.919,229,0.783,232,1.431,233,2.329,234,1.089,236,1.089,237,0.783,238,1.089,240,1.222,241,0.697,243,0.783,244,0.783,245,0.783,246,1.029,247,1.734,262,1.431,267,1.222,272,0.739,286,2.569,340,1.615,350,4.401,355,2.517,361,2.281,363,2.281,377,3.119,379,1.145,390,2.904,395,2.668,397,2.668,427,2.32,430,1.561,431,2.488,436,1.789,437,2.088,443,1.337,450,2.523,451,5.173,469,2.848,477,1.337,478,1.46,479,1.46,480,1.927,481,1.234,482,1.46,495,2.807,600,2.848,672,4.401,673,4.868,686,1.615,687,1.46,688,1.615,689,1.46,691,3.15,692,3.807,693,1.823,694,1.823,703,2.848,704,2.848,705,1.615,725,1.615,726,1.337,836,2.848,839,2.848,856,2.523,857,4.035,858,1.789,887,1.823,888,3.34,889,3.34,890,3.34,891,3.34,892,3.34,893,3.34,894,2.138,895,3.34,896,2.138,897,3.34,898,3.34,899,3.34,900,3.34,901,2.138,902,2.848,903,3.34,904,2.138,905,3.34,906,5.602,907,3.34,908,3.34,909,2.138,910,4.645,911,3.34,912,2.138,913,4.645,914,3.34,915,2.138,916,3.34,917,3.34,918,3.34,919,2.138,920,3.34,921,4.645,922,3.34,923,2.138,924,2.848,925,3.34,926,2.138,927,3.34,928,3.34,929,2.523,930,2.138,931,2.138,932,2.138,933,3.34,934,2.138,935,2.138,936,3.34,937,4.11,938,2.138,939,3.34,940,2.138,941,2.138,942,2.138,943,2.138,944,2.138,945,2.138,946,2.138,947,2.138,948,2.138,949,2.138,950,5.039,951,4.11,952,4.11,953,2.138,954,2.138,955,2.138,956,2.138,957,3.34,958,2.138,959,4.645,960,2.138,961,4.11,962,2.138,963,4.11,964,2.138,965,2.138,966,2.138,967,2.138,968,2.138,969,2.138,970,2.138,971,3.34,972,2.138,973,3.34,974,2.138,975,2.138,976,2.138,977,4.645,978,1.823,979,2.138,980,2.138,981,2.138,982,2.138,983,2.138,984,2.138,985,2.138,986,2.138,987,2.138,988,2.138,989,2.138,990,3.34,991,2.138,992,2.138,993,2.138,994,3.34,995,2.138]],["title/classes/ProfileUpdateDto.html",[29,0.03,271,1.09]],["body/classes/ProfileUpdateDto.html",[3,0.143,4,0.143,5,0.32,7,0.242,11,1.109,12,0.023,14,0.573,17,1.197,22,1.048,23,0.143,28,0.367,29,0.056,35,0.008,36,0.012,37,0.008,74,1.692,109,1.037,123,0.594,124,0.826,132,0.555,143,1.809,144,0.99,145,1.403,170,1.057,172,1.06,174,0.783,175,2.392,176,0.93,177,1.174,178,1.566,179,0.828,180,1.942,182,1.597,183,1.775,184,2.249,187,2.846,188,0.739,189,0.986,190,0.986,191,0.986,192,0.877,193,0.828,194,1.395,195,2.25,196,2.125,197,2.25,198,2.232,199,0.986,200,0.986,201,0.986,202,1.479,203,0.986,204,0.739,205,1.395,206,0.986,207,0.739,208,1.395,209,2.504,210,2.504,211,0.828,212,0.783,213,0.828,214,1.178,215,0.828,216,0.877,217,0.828,218,0.877,219,1.395,220,1.827,221,1.316,222,1.316,223,0.93,224,1.498,225,1.316,226,0.986,227,1.479,228,1.243,229,0.93,230,1.491,231,1.491,232,0.783,233,0.828,234,0.828,235,0.986,236,0.828,237,0.93,238,0.828,239,0.986,240,1.395,241,0.828,242,0.986,243,0.93,244,0.93,245,0.93,246,0.783,247,0.66,248,0.783,249,1.331,250,0.986,251,1.243,252,0.828,253,0.986,254,0.828,255,1.048,256,1.491,257,0.986,258,0.828,259,1.243,260,1.243,261,1.243,262,0.783,263,0.877,264,0.828,265,0.877,266,0.877,267,0.93,268,0.877,269,0.828,270,0.93,271,1.174,272,1.579,996,2.54,997,2.54]],["title/modules/ScheduleModule.html",[38,1.154,54,2.212]],["body/modules/ScheduleModule.html",[3,0.279,4,0.279,5,0.243,12,0.023,23,0.394,25,0.905,26,2.476,27,2.86,28,0.279,29,0.043,35,0.015,36,0.018,37,0.015,38,2.109,40,2.174,41,2.174,42,2.476,43,2.476,44,2.174,45,3.229,46,3.229,54,4.426,57,3.001,58,2.174,59,2.317,61,2.656,62,2.656,63,2.044,73,4.227,74,1.149,75,4.227,76,2.317,110,2.656,123,0.432,208,1.815,418,3.001,419,2.656,426,3.099,427,2.476,998,4.227,999,4.227,1000,4.227,1001,4.562,1002,4.958,1003,4.958,1004,3.746,1005,3.746,1006,4.958,1007,4.958,1008,4.958,1009,4.958,1010,4.958,1011,4.958,1012,4.958,1013,4.958,1014,4.958,1015,4.958]],["title/injectables/ScheduleService.html",[77,0.646,1001,2.212]],["body/injectables/ScheduleService.html",[3,0.228,4,0.228,5,0.199,7,0.387,8,1.632,12,0.023,14,0.94,16,1.817,17,0.948,23,0.391,25,0.741,28,0.228,29,0.035,31,1.182,35,0.012,36,0.016,37,0.012,63,1.674,77,0.967,78,1.486,114,2.6,116,2.476,118,4.723,122,1.632,123,0.461,124,0.596,125,1.542,133,3.056,136,3.067,137,2.174,142,3.276,143,1.301,149,1.83,150,1.897,158,2.057,195,1.924,196,1.817,197,1.924,233,1.728,246,1.632,247,1.055,395,2.028,397,2.028,419,2.174,427,2.028,436,2.174,490,3.619,686,3.067,687,2.773,688,3.067,689,2.773,723,2.538,726,2.538,822,4.517,829,3.461,929,4.003,978,3.461,1001,3.312,1004,3.067,1005,4.723,1016,3.461,1017,6.252,1018,6.252,1019,5.298,1020,4.059,1021,6.252,1022,4.059,1023,4.059,1024,4.059,1025,5.298,1026,4.059,1027,3.067,1028,4.059,1029,4.059,1030,4.059,1031,6.775,1032,4.059,1033,4.059,1034,5.898,1035,4.059,1036,4.059,1037,4.059,1038,5.898,1039,5.898,1040,4.059,1041,4.059,1042,5.898,1043,5.898,1044,5.898,1045,5.298,1046,5.898,1047,4.059,1048,4.059,1049,4.059,1050,5.298,1051,3.461,1052,4.059,1053,5.298,1054,5.298,1055,4.059,1056,4.059,1057,4.059,1058,4.059,1059,4.059,1060,4.059,1061,4.059]],["title/classes/TokenDto.html",[29,0.03,212,1.09]],["body/classes/TokenDto.html",[3,0.143,4,0.143,5,0.321,7,0.243,11,0.741,12,0.023,14,0.383,17,1.198,22,1.05,23,0.143,28,0.368,29,0.056,35,0.008,36,0.012,37,0.008,74,1.694,109,1.051,123,0.594,124,0.824,132,0.557,143,1.807,144,0.992,145,1.405,170,1.058,172,1.061,174,0.785,175,2.393,176,0.932,177,1.176,178,1.568,179,0.831,180,1.943,181,1.05,182,1.599,183,1.777,184,2.252,187,2.842,188,0.741,189,0.989,190,0.989,191,0.989,192,0.88,193,0.831,194,1.398,195,2.251,196,2.126,197,2.251,198,2.234,199,0.989,200,0.989,201,0.989,202,1.482,203,0.989,204,0.741,205,1.398,206,0.989,207,0.741,208,1.398,209,2.506,210,2.506,211,0.831,212,1.176,213,1.245,214,1.375,215,0.831,216,0.88,217,0.831,218,0.88,219,1.398,220,1.828,221,1.319,222,1.319,223,0.932,224,1.5,225,1.319,226,0.989,227,1.482,228,1.245,229,0.932,230,1.494,231,1.494,232,0.785,233,0.831,234,0.831,235,0.989,236,0.831,237,0.932,238,0.831,239,0.989,240,1.398,241,0.831,242,0.989,243,0.932,244,0.932,245,0.932,246,0.785,247,0.662,248,0.785,249,1.334,250,0.989,251,1.245,252,0.831,253,0.989,254,0.831,255,1.05,256,1.494,257,0.989,258,0.831,259,1.245,260,1.245,261,1.245,262,0.785,263,0.88,264,0.831,265,0.88,266,0.88,267,0.932,268,0.88,269,0.831,270,0.932,271,0.785,272,0.88,1062,2.547]],["title/controllers/UserController.html",[0,1.459,1063,2.417]],["body/controllers/UserController.html",[0,1.21,2,1.21,3,0.403,4,0.165,5,0.144,7,0.28,8,1.306,11,1.753,12,0.023,14,0.906,16,1.855,23,0.339,25,0.536,28,0.165,29,0.025,31,1.753,35,0.009,36,0.013,37,0.009,83,2.665,90,1.21,109,1.139,112,4.116,114,2.563,116,1.372,122,1.855,123,0.524,124,0.65,125,1.753,132,1.088,142,1.981,143,1.04,144,0.763,147,3.614,149,1.718,150,2.814,152,3.612,153,2.144,157,2.649,158,2.243,162,3.882,170,0.569,172,0.68,182,1.316,188,0.854,193,1.777,207,0.854,211,1.777,212,1.679,213,2.171,214,1.473,219,1.551,247,1.416,255,1.499,256,1.777,262,0.904,271,1.679,286,1.835,324,2.004,328,3.614,331,3.202,340,4.365,341,3.721,343,4.596,344,2.895,345,2.004,346,4.112,355,3.571,358,4.49,359,3.946,363,2.895,375,2.004,376,2.502,377,3.112,379,1.572,382,2.004,383,2.004,384,2.004,385,2.004,386,2.004,389,3.946,390,3.612,391,4.112,392,4.112,393,4.112,395,2.886,397,2.886,398,4.645,400,2.004,401,1.835,436,2.27,450,3.202,454,2.895,569,5.206,609,2.217,612,2.217,618,4.116,658,2.485,729,2.004,730,2.004,732,2.004,856,4.116,1063,2.895,1064,2.502,1065,4.238,1066,4.238,1067,5.448,1068,4.238,1069,4.238,1070,2.935,1071,2.935,1072,2.935,1073,4.238,1074,2.935,1075,2.935,1076,2.935,1077,4.238,1078,4.238,1079,4.238,1080,4.238,1081,4.238,1082,2.935,1083,2.935,1084,2.935,1085,4.238,1086,2.935,1087,2.935,1088,2.935,1089,2.935,1090,2.935,1091,2.935,1092,2.935,1093,2.935,1094,2.935,1095,4.238,1096,4.238,1097,2.935,1098,2.502,1099,2.935,1100,2.935,1101,2.935,1102,2.935,1103,2.935,1104,2.935,1105,4.238,1106,4.238,1107,2.935,1108,2.935,1109,2.935,1110,2.935,1111,2.935,1112,2.935,1113,2.935,1114,2.935,1115,2.935,1116,2.935,1117,2.935,1118,2.935,1119,2.935,1120,2.935,1121,2.935,1122,2.935,1123,2.935,1124,2.935,1125,2.935,1126,2.935,1127,2.935,1128,2.935,1129,2.935,1130,2.935,1131,2.935,1132,2.935,1133,2.935,1134,2.935,1135,2.935,1136,2.935,1137,2.935,1138,2.935]],["title/modules/UserModule.html",[38,1.154,55,1.895]],["body/modules/UserModule.html",[2,2.372,3,0.26,4,0.26,5,0.226,12,0.023,23,0.405,25,0.843,28,0.26,29,0.04,35,0.014,36,0.017,37,0.014,38,2.044,40,2.026,41,2.026,42,2.307,43,2.307,44,2.026,45,3.13,46,3.13,50,2.689,55,3.889,57,2.874,58,2.026,59,2.159,61,2.474,62,2.474,63,1.904,66,3.155,76,2.159,88,3.596,89,2.887,90,1.904,94,2.874,95,2.474,99,2.887,100,2.307,101,2.887,109,0.742,110,3.356,123,0.545,249,1.345,280,3.381,418,2.874,419,2.474,422,3.081,423,3.155,424,2.887,425,2.887,426,2.887,427,2.307,658,3.613,858,3.874,859,3.938,1063,4.28,1098,3.938,1139,4.619,1140,4.619,1141,4.619,1142,4.619,1143,4.619]],["title/injectables/UserService.html",[77,0.646,658,1.768]],["body/injectables/UserService.html",[3,0.408,4,0.187,5,0.163,7,0.317,8,1.426,12,0.023,14,0.943,16,2.102,23,0.3,25,0.606,28,0.187,29,0.029,31,1.763,35,0.01,36,0.014,37,0.01,74,1.234,77,0.845,78,1.216,109,1.188,113,4.049,114,2.519,122,1.932,123,0.546,124,0.706,125,1.826,132,1.259,144,0.864,145,0.816,149,1.148,153,2.302,157,4.102,158,2.236,160,2.833,170,1.273,172,0.77,182,1.259,207,0.967,212,1.775,214,1.595,247,1.203,255,1.585,256,2.045,271,1.775,297,3.161,350,4.482,355,3.438,361,3.161,374,3.497,377,3.067,379,1.78,430,2.163,431,3.085,436,2.479,437,2.893,454,3.161,473,3.497,477,2.077,478,2.27,479,2.27,480,1.917,481,1.917,482,2.27,493,2.833,494,2.833,495,3.638,506,2.833,510,4.541,520,2.833,658,2.312,672,4.482,673,4.958,687,3.161,692,4.024,697,3.946,705,4.024,729,2.27,730,2.27,731,2.511,732,2.27,824,3.946,857,4.738,902,3.946,906,3.946,924,5.347,1144,2.833,1145,4.629,1146,4.629,1147,4.629,1148,4.629,1149,4.629,1150,4.629,1151,3.323,1152,4.629,1153,3.323,1154,4.629,1155,4.629,1156,3.323,1157,4.629,1158,4.629,1159,3.323,1160,4.629,1161,4.629,1162,3.323,1163,3.323,1164,3.323,1165,3.323,1166,3.323,1167,3.323,1168,3.323,1169,3.323,1170,3.323,1171,3.323,1172,3.323,1173,3.323,1174,3.323,1175,3.323]],["title/injectables/ValidateService.html",[77,0.646,86,2.042]],["body/injectables/ValidateService.html",[3,0.284,4,0.284,5,0.248,7,0.481,8,1.873,12,0.022,14,0.914,16,1.873,23,0.342,25,0.922,28,0.284,29,0.044,31,1.769,35,0.015,36,0.018,37,0.015,77,1.109,78,1.849,86,3.506,110,3.255,112,3.817,113,4.055,122,1.873,123,0.529,124,0.684,125,1.769,132,1.329,144,1.313,145,1.492,149,2.099,172,1.171,205,1.849,207,1.471,1176,4.308,1177,6.077,1178,6.077,1179,6.077,1180,5.052,1181,6.077,1182,5.052,1183,5.052,1184,4.308,1185,5.052,1186,6.077,1187,6.077,1188,5.052,1189,6.077,1190,6.077,1191,5.052,1192,5.052,1193,5.052,1194,6.077]],["title/coverage.html",[1195,3.652]],["body/coverage.html",[0,2.635,1,2.651,5,0.19,6,3.309,12,0.023,26,1.939,29,0.061,35,0.012,36,0.016,37,0.012,44,1.702,56,2.426,77,1.288,79,3.309,83,2.079,84,2.426,85,2.426,86,2.239,94,1.939,103,2.651,111,3.309,124,0.437,140,2.426,153,1.341,174,1.196,176,2.583,193,1.266,198,2.566,211,1.266,212,1.196,215,1.266,217,1.266,218,1.341,232,1.196,248,1.196,255,1.068,266,1.341,271,1.196,280,1.814,281,4.359,282,4.359,300,2.932,304,2.932,322,2.651,323,3.309,380,2.239,418,1.939,422,2.079,429,3.309,431,2.079,557,2.651,558,3.309,613,2.239,658,1.939,661,3.309,714,3.09,715,2.651,717,3.886,723,2.426,724,3.886,726,4.657,727,3.886,773,3.309,809,3.309,821,3.309,834,2.651,835,3.309,858,2.079,887,3.309,1001,2.426,1016,3.309,1027,2.932,1063,2.651,1064,3.309,1144,3.309,1176,3.309,1195,2.932,1196,3.309,1197,3.881,1198,3.881,1199,6.887,1200,7.256,1201,5.144,1202,3.881,1203,3.881,1204,3.309,1205,5.144,1206,3.881,1207,5.144,1208,5.144,1209,3.881,1210,3.881,1211,3.881,1212,3.881,1213,3.881,1214,3.881,1215,3.881,1216,3.881,1217,3.881,1218,3.881,1219,3.309,1220,3.881,1221,5.144,1222,5.144,1223,3.881,1224,3.881,1225,3.309,1226,6.804,1227,3.881,1228,3.881,1229,3.881,1230,3.881,1231,5.063,1232,3.309,1233,3.309,1234,3.309,1235,3.309,1236,3.309,1237,3.309,1238,4.829,1239,3.309,1240,3.309,1241,3.309,1242,3.309,1243,3.881,1244,3.881]],["title/dependencies.html",[41,1.867,1245,2.953]],["body/dependencies.html",[12,0.023,25,0.93,35,0.015,36,0.018,37,0.015,41,2.234,63,2.1,90,2.1,92,3.848,100,2.544,137,2.728,139,3.479,148,3.848,188,1.483,297,3.479,378,4.614,485,4.343,486,4.343,689,3.479,735,3.848,780,4.942,816,4.343,929,3.848,1004,3.848,1005,3.848,1184,4.343,1246,5.094,1247,6.541,1248,5.094,1249,5.094,1250,5.094,1251,5.094,1252,5.094,1253,5.094,1254,5.094,1255,5.094,1256,5.207,1257,5.094,1258,5.094,1259,5.094,1260,5.094,1261,5.094,1262,5.094,1263,5.094,1264,5.094,1265,5.094,1266,5.094,1267,5.094,1268,5.094,1269,5.094,1270,5.094,1271,5.094,1272,5.094,1273,5.094,1274,5.094,1275,5.094,1276,5.094,1277,5.094,1278,5.094,1279,5.094,1280,5.094]],["title/miscellaneous/functions.html",[744,3.217,1281,2.017]],["body/miscellaneous/functions.html",[7,0.498,12,0.022,35,0.016,36,0.019,37,0.016,44,2.899,122,2.182,123,0.616,125,2.062,228,2.022,230,2.022,231,2.022,744,3.946,1027,4.995,1225,4.453,1231,3.946,1232,5.285,1233,5.285,1234,5.285,1235,5.285,1236,5.285,1237,5.285,1238,3.946,1281,3.567,1282,5.223,1283,4.453,1284,6.038,1285,5.223,1286,5.223,1287,5.223,1288,5.223,1289,5.223,1290,5.223,1291,5.223,1292,5.223,1293,5.223,1294,5.223]],["title/index.html",[7,0.281,1295,2.518,1296,2.518]],["body/index.html",[12,0.022,35,0.016,36,0.019,37,0.016,182,1.134,331,4.664,526,5.817,1195,3.918,1297,5.186,1298,5.186,1299,5.186,1300,5.186,1301,5.186,1302,5.186,1303,5.186,1304,5.186,1305,5.186,1306,5.186,1307,5.186,1308,5.186,1309,5.186,1310,5.186,1311,7.145,1312,5.186,1313,5.186,1314,5.186,1315,7.071,1316,5.186,1317,5.186,1318,6.173,1319,5.186,1320,5.186,1321,5.186,1322,5.186,1323,6.173,1324,6.173,1325,5.186,1326,5.186,1327,5.186,1328,5.186,1329,4.422,1330,4.422,1331,5.186,1332,5.186,1333,5.186,1334,3.918,1335,4.422,1336,5.186]],["title/license.html",[1295,2.518,1296,2.518,1334,2.231]],["body/license.html",[12,0.018,35,0.015,36,0.018,37,0.015,59,2.371,378,3.833,459,4.325,537,4.603,540,4.325,543,4.325,1196,4.325,1329,4.325,1330,4.325,1334,3.833,1335,4.325,1337,6.53,1338,5.073,1339,5.073,1340,5.073,1341,6.092,1342,5.073,1343,5.073,1344,5.073,1345,5.073,1346,5.073,1347,5.073,1348,6.092,1349,7.221,1350,5.073,1351,5.073,1352,5.073,1353,6.53,1354,5.073,1355,6.092,1356,5.073,1357,5.073,1358,5.073,1359,5.073,1360,5.073,1361,5.073,1362,5.073,1363,5.073,1364,5.073,1365,6.092,1366,5.073,1367,5.073,1368,5.073,1369,5.073,1370,5.073,1371,6.092,1372,6.092,1373,5.073,1374,5.073,1375,5.073,1376,5.073,1377,5.073,1378,5.073,1379,5.073,1380,5.073,1381,5.073,1382,5.073,1383,5.073,1384,5.073,1385,5.073,1386,5.073,1387,5.073,1388,5.073,1389,5.073,1390,5.073,1391,5.073,1392,5.073,1393,5.073,1394,5.073,1395,5.073,1396,5.073,1397,5.073,1398,5.073,1399,5.073]],["title/modules.html",[40,2.12]],["body/modules.html",[12,0.019,35,0.017,36,0.019,37,0.017,39,3.757,40,2.412,50,2.571,51,3.173,52,3.173,53,2.946,54,3.439,55,2.946,1400,7.226,1401,7.226,1402,7.226,1403,7.226]],["title/overview.html",[1404,4.122]],["body/overview.html",[2,1.754,12,0.023,35,0.013,36,0.017,37,0.013,38,1.388,39,4.962,40,1.866,41,1.866,42,2.125,43,2.125,44,1.866,45,2.125,46,2.125,47,3.627,48,3.627,49,3.627,50,3.343,51,4.146,52,4.043,53,3.849,54,4.21,55,3.849,56,3.771,57,2.728,58,1.866,59,1.989,78,1.557,80,3.627,81,3.627,82,3.627,83,3.669,84,3.771,85,3.771,86,3.48,175,1.557,280,3.396,380,3.952,411,3.627,413,3.627,414,3.627,613,3.952,654,3.627,655,3.627,656,3.627,658,3.529,716,2.906,858,3.784,881,3.627,882,3.627,883,3.627,998,3.627,999,3.627,1000,3.627,1001,4.282,1051,3.627,1219,4.656,1404,3.627,1405,4.254,1406,4.254]],["title/miscellaneous/variables.html",[1281,2.017,1407,3.63]],["body/miscellaneous/variables.html",[7,0.321,12,0.023,17,1.179,20,2.872,22,0.927,26,2.334,35,0.01,36,0.014,37,0.01,74,1.718,76,1.574,94,2.334,103,3.664,119,2.105,123,0.293,124,0.834,144,0.875,145,0.827,153,2.001,170,0.654,172,1.083,178,1.038,179,1.099,180,1.88,183,1.36,184,2.27,192,1.163,204,1.687,207,0.981,214,0.781,220,1.038,221,1.163,222,1.163,224,1.285,225,1.163,228,1.099,230,1.099,231,1.099,234,1.099,236,1.099,238,1.099,241,1.099,246,1.038,251,1.099,252,1.099,254,1.099,258,1.099,259,1.099,260,1.099,261,1.099,264,1.099,269,1.099,281,2.545,282,4.053,286,2.105,289,4.454,290,5.212,297,2.3,300,3.53,301,2.872,302,2.872,303,2.872,304,3.53,305,2.872,306,2.872,307,2.872,308,2.872,309,3.984,310,2.872,418,2.334,422,2.503,443,2.105,490,2.3,691,2.921,695,2.545,698,2.545,717,2.545,719,3.664,720,3.53,721,2.872,722,3.664,724,2.545,725,2.545,726,2.105,727,2.545,729,2.3,730,2.3,731,2.545,732,2.3,733,2.872,734,2.872,735,2.545,736,2.872,737,2.872,738,2.872,739,2.872,740,2.872,741,4.94,1204,2.872,1231,2.545,1238,2.545,1239,4.574,1240,3.984,1241,4.574,1242,4.94,1256,2.872,1281,2.3,1283,4.94,1284,2.872,1407,2.872,1408,3.368,1409,3.368,1410,4.672,1411,3.368,1412,3.368,1413,3.368,1414,3.368,1415,3.368,1416,3.368,1417,3.368,1418,3.368,1419,3.368,1420,3.368,1421,3.368,1422,3.368,1423,3.368,1424,3.368,1425,3.368,1426,3.368,1427,3.368,1428,3.368,1429,3.368,1430,3.368,1431,3.368,1432,3.368,1433,3.368,1434,3.368]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":726,"title":{},"body":{"interfaces/IPlan.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":1274,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1268,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1200,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1223,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1211,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1229,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1221,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1199,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1201,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1230,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1222,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1224,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1218,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1228,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":490,"title":{},"body":{"injectables/EmailService.html":{},"interfaces/IUser.html":{},"injectables/ScheduleService.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1256,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["1.0.2",{"_index":1267,"title":{},"body":{"dependencies.html":{}}}],["1.3.0",{"_index":1271,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1227,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1203,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":1220,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1205,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":1219,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["12.0.0",{"_index":1280,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":226,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["16",{"_index":1046,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["16.1.7",{"_index":1246,"title":{},"body":{"dependencies.html":{}}}],["16:00",{"_index":1043,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["1h",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["1hour",{"_index":471,"title":{},"body":{"injectables/EmailService.html":{}}}],["2.0.13",{"_index":1264,"title":{},"body":{"dependencies.html":{}}}],["2.24.0",{"_index":1265,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1257,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1131,"title":{},"body":{"controllers/UserController.html":{}}}],["2020",{"_index":1339,"title":{},"body":{"license.html":{}}}],["24",{"_index":295,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["28",{"_index":1054,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["3",{"_index":1406,"title":{},"body":{"overview.html":{}}}],["3.1.0",{"_index":1253,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":1014,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["33",{"_index":1202,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":489,"title":{},"body":{"injectables/EmailService.html":{}}}],["4",{"_index":229,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["4.0.0",{"_index":1269,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":1262,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1279,"title":{},"body":{"dependencies.html":{}}}],["4.17.15",{"_index":1263,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1206,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1051,"title":{},"body":{"injectables/ScheduleService.html":{},"overview.html":{}}}],["5.7.11",{"_index":1266,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":1213,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":1208,"title":{},"body":{"coverage.html":{}}}],["5th",{"_index":1049,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["6",{"_index":740,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["6.1.0",{"_index":1251,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":1249,"title":{},"body":{"dependencies.html":{}}}],["6.1.2",{"_index":1250,"title":{},"body":{"dependencies.html":{}}}],["6.5.5",{"_index":1276,"title":{},"body":{"dependencies.html":{}}}],["6.7.2",{"_index":1247,"title":{},"body":{"dependencies.html":{}}}],["6/7",{"_index":1217,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":294,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["7",{"_index":1405,"title":{},"body":{"overview.html":{}}}],["7.1.1",{"_index":1254,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":1207,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1214,"title":{},"body":{"coverage.html":{}}}],["8.12.1",{"_index":1260,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":1259,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":1212,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":1216,"title":{},"body":{"coverage.html":{}}}],["9/10",{"_index":1210,"title":{},"body":{"coverage.html":{}}}],["9/12",{"_index":1215,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1209,"title":{},"body":{"coverage.html":{}}}],["924ff8331aaf4c1",{"_index":1424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_",{"_index":688,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{}}}],["_.pick(data",{"_index":694,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{}}}],["_id",{"_index":495,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["_userid",{"_index":691,"title":{},"body":{"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"injectables/PlanService.html":{},"miscellaneous/variables.html":{}}}],["above",{"_index":1370,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":828,"title":{},"body":{"injectables/ModelService.html":{}}}],["action",{"_index":540,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["add",{"_index":572,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["addexpense",{"_index":559,"title":{},"body":{"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{}}}],["addexpense(@param('id",{"_index":631,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["addexpense(data",{"_index":666,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["addexpense(id",{"_index":568,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["addimage",{"_index":662,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["addimage(id",{"_index":668,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["address",{"_index":208,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"classes/TokenDto.html":{}}}],["adds",{"_index":608,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["admin",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"dependencies.html":{}}}],["admin.credential.cert(serviceaccount",{"_index":307,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["admin.initializeapp",{"_index":305,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["admin.messaging().sendtodevice(registrationtoken",{"_index":311,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["admin_reg_validation",{"_index":1177,"title":{},"body":{"injectables/ValidateService.html":{}}}],["admin_reg_validation(data",{"_index":1179,"title":{},"body":{"injectables/ValidateService.html":{}}}],["adminsdk.json",{"_index":303,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["agenda",{"_index":1005,"title":{},"body":{"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"dependencies.html":{}}}],["agendamodule",{"_index":1003,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["agendamodule.register",{"_index":1007,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["agendaservice",{"_index":1021,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["agendash",{"_index":1255,"title":{},"body":{"dependencies.html":{}}}],["allbudget",{"_index":560,"title":{},"body":{"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{}}}],["allbudget(@param('id",{"_index":620,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["allbudget(id",{"_index":574,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["allbudget(user",{"_index":670,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["allplans",{"_index":836,"title":{},"body":{"controllers/PlanController.html":{},"injectables/PlanService.html":{}}}],["allplans(@request",{"_index":867,"title":{},"body":{"controllers/PlanController.html":{}}}],["allplans(req",{"_index":841,"title":{},"body":{"controllers/PlanController.html":{}}}],["allplans(user",{"_index":893,"title":{},"body":{"injectables/PlanService.html":{}}}],["already",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{}}}],["amount",{"_index":183,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":1363,"title":{},"body":{"license.html":{}}}],["angular",{"_index":1308,"title":{},"body":{"index.html":{}}}],["api",{"_index":331,"title":{},"body":{"controllers/EmailController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["api.herokuapp.com/email/link",{"_index":1426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apicreatedresponse",{"_index":386,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apicreatedresponse({description",{"_index":389,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apiforbiddenresponse",{"_index":384,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apiforbiddenresponse({description",{"_index":391,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apimodelproperty",{"_index":187,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["apimodelproperty({type",{"_index":181,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/TokenDto.html":{}}}],["apinotfoundresponse",{"_index":385,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apinotfoundresponse({description",{"_index":393,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apiokresponse",{"_index":383,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apiokresponse({description",{"_index":400,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apiusetags",{"_index":382,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apiusetags('email",{"_index":387,"title":{},"body":{"controllers/EmailController.html":{}}}],["apiusetags('expense",{"_index":615,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["apiusetags('plan",{"_index":860,"title":{},"body":{"controllers/PlanController.html":{}}}],["apiusetags('user",{"_index":1100,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":1313,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1288,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applications",{"_index":1305,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":39,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":56,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arising",{"_index":1397,"title":{},"body":{"license.html":{}}}],["arrow",{"_index":743,"title":{},"body":{"interfaces/IUser.html":{}}}],["associated",{"_index":1350,"title":{},"body":{"license.html":{}}}],["async",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["attached",{"_index":219,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{}}}],["austin",{"_index":1340,"title":{},"body":{"license.html":{}}}],["auth.service",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":416,"title":{},"body":{"modules/EmailModule.html":{}}}],["auth/auth.service",{"_index":1099,"title":{},"body":{"controllers/UserController.html":{}}}],["authentic",{"_index":441,"title":{},"body":{"injectables/EmailService.html":{}}}],["authenticate",{"_index":404,"title":{},"body":{"controllers/EmailController.html":{}}}],["authentication",{"_index":354,"title":{},"body":{"controllers/EmailController.html":{}}}],["authguard",{"_index":612,"title":{},"body":{"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["authmodule",{"_index":50,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["authors",{"_index":1329,"title":{},"body":{"index.html":{},"license.html":{}}}],["authservice",{"_index":83,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["awake",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["b",{"_index":973,"title":{},"body":{"injectables/PlanService.html":{}}}],["babatunde",{"_index":1333,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('email",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(error.details[0].message",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["based",{"_index":788,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["bcrypt",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"interfaces/IUser.html":{}}}],["bcrypt.compare(attempt",{"_index":760,"title":{},"body":{"interfaces/IUser.html":{}}}],["bcrypt.compare(data.password",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(10",{"_index":502,"title":{},"body":{"injectables/EmailService.html":{},"interfaces/IUser.html":{}}}],["bcrypt.hash(password",{"_index":507,"title":{},"body":{"injectables/EmailService.html":{}}}],["bcrypt.hash(user.password",{"_index":756,"title":{},"body":{"interfaces/IUser.html":{}}}],["bcrypt.js",{"_index":449,"title":{},"body":{"injectables/EmailService.html":{}}}],["bcryptjs",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"interfaces/IUser.html":{},"dependencies.html":{}}}],["bearer",{"_index":1113,"title":{},"body":{"controllers/UserController.html":{}}}],["before",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PlanService.html":{}}}],["bhbwjuelqk7hzafjcheg22la85arqxj4",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bid",{"_index":583,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["body",{"_index":355,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["body.budget",{"_index":701,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["body.budgetname",{"_index":700,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["body.deletehash",{"_index":1172,"title":{},"body":{"injectables/UserService.html":{}}}],["body.duration",{"_index":951,"title":{},"body":{"injectables/PlanService.html":{}}}],["body.input",{"_index":1174,"title":{},"body":{"injectables/UserService.html":{}}}],["body.link",{"_index":1171,"title":{},"body":{"injectables/UserService.html":{}}}],["body.token",{"_index":1175,"title":{},"body":{"injectables/UserService.html":{}}}],["body.type",{"_index":1173,"title":{},"body":{"injectables/UserService.html":{}}}],["bootstrap",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1403,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1400,"title":{},"body":{"modules.html":{}}}],["budget",{"_index":178,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["budget')@apicreatedresponse({description",{"_index":603,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["budget.id",{"_index":707,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["budget.save",{"_index":702,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["budgetdto",{"_index":174,"title":{"classes/BudgetDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["budgetid",{"_index":270,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["budgetname",{"_index":179,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["budgets",{"_index":578,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["building",{"_index":1300,"title":{},"body":{"index.html":{}}}],["busget",{"_index":592,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["button",{"_index":544,"title":{},"body":{"injectables/EmailService.html":{}}}],["c",{"_index":1338,"title":{},"body":{"license.html":{}}}],["c8f57",{"_index":302,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["c8f57.firebaseio.com",{"_index":310,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["calculateplan",{"_index":888,"title":{},"body":{"injectables/PlanService.html":{}}}],["calculateplan(body",{"_index":895,"title":{},"body":{"injectables/PlanService.html":{}}}],["calculates",{"_index":899,"title":{},"body":{"injectables/PlanService.html":{}}}],["call",{"_index":504,"title":{},"body":{"injectables/EmailService.html":{}}}],["callback",{"_index":759,"title":{},"body":{"interfaces/IUser.html":{}}}],["callback(err",{"_index":762,"title":{},"body":{"interfaces/IUser.html":{}}}],["callback(null",{"_index":763,"title":{},"body":{"interfaces/IUser.html":{}}}],["called",{"_index":369,"title":{},"body":{"controllers/EmailController.html":{}}}],["card",{"_index":220,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["card_no",{"_index":228,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["cardcharge",{"_index":1027,"title":{},"body":{"injectables/ScheduleService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["carddto",{"_index":218,"title":{"classes/CardDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["cardnum",{"_index":971,"title":{},"body":{"injectables/PlanService.html":{}}}],["catch",{"_index":397,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{}}}],["catch((e",{"_index":517,"title":{},"body":{"injectables/EmailService.html":{}}}],["catch((err",{"_index":520,"title":{},"body":{"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["catch(e",{"_index":514,"title":{},"body":{"injectables/EmailService.html":{}}}],["category",{"_index":251,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["change",{"_index":512,"title":{},"body":{"injectables/EmailService.html":{}}}],["changeprofileimage",{"_index":1145,"title":{},"body":{"injectables/UserService.html":{}}}],["changeprofileimage(user",{"_index":1150,"title":{},"body":{"injectables/UserService.html":{}}}],["charge",{"_index":1345,"title":{},"body":{"license.html":{}}}],["check",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["checking",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["claim",{"_index":1390,"title":{},"body":{"license.html":{}}}],["class",{"_index":29,"title":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"coverage.html":{}}}],["classes",{"_index":175,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"overview.html":{}}}],["clicks",{"_index":348,"title":{},"body":{"controllers/EmailController.html":{}}}],["client",{"_index":330,"title":{},"body":{"controllers/EmailController.html":{}}}],["client's",{"_index":364,"title":{},"body":{"controllers/EmailController.html":{}}}],["cloud",{"_index":424,"title":{},"body":{"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"injectables/ModelService.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["cloudnotificationservice",{"_index":280,"title":{"injectables/CloudNotificationService.html":{}},"body":{"injectables/CloudNotificationService.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"injectables/ModelService.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":411,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":413,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_imports",{"_index":412,"title":{},"body":{"modules/EmailModule.html":{}}}],["cluster_emailmodule_providers",{"_index":414,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_expensemodule",{"_index":654,"title":{},"body":{"modules/ExpenseModule.html":{},"overview.html":{}}}],["cluster_expensemodule_exports",{"_index":655,"title":{},"body":{"modules/ExpenseModule.html":{},"overview.html":{}}}],["cluster_expensemodule_providers",{"_index":656,"title":{},"body":{"modules/ExpenseModule.html":{},"overview.html":{}}}],["cluster_planmodule",{"_index":881,"title":{},"body":{"modules/PlanModule.html":{},"overview.html":{}}}],["cluster_planmodule_exports",{"_index":882,"title":{},"body":{"modules/PlanModule.html":{},"overview.html":{}}}],["cluster_planmodule_providers",{"_index":883,"title":{},"body":{"modules/PlanModule.html":{},"overview.html":{}}}],["cluster_schedulemodule",{"_index":998,"title":{},"body":{"modules/ScheduleModule.html":{},"overview.html":{}}}],["cluster_schedulemodule_exports",{"_index":999,"title":{},"body":{"modules/ScheduleModule.html":{},"overview.html":{}}}],["cluster_schedulemodule_providers",{"_index":1000,"title":{},"body":{"modules/ScheduleModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1139,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_exports",{"_index":1140,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1141,"title":{},"body":{"modules/UserModule.html":{}}}],["collection",{"_index":1010,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["color",{"_index":545,"title":{},"body":{"injectables/EmailService.html":{}}}],["concerning",{"_index":329,"title":{},"body":{"controllers/EmailController.html":{}}}],["conditions",{"_index":1369,"title":{},"body":{"license.html":{}}}],["config/config",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{},"modules/ScheduleModule.html":{}}}],["configkeys",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{},"modules/ScheduleModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configkeys.download_link",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["configkeys.email_url}${user._id}/${token",{"_index":491,"title":{},"body":{"injectables/EmailService.html":{}}}],["configkeys.jwt_secret",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configkeys.mongodb_uri",{"_index":1009,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["configkeys.rave_production_flag",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configkeys.rave_publick_key",{"_index":1432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configkeys.rave_secret_key",{"_index":1433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configkeys.secret",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configkeys.version",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["confirmation",{"_index":335,"title":{},"body":{"controllers/EmailController.html":{}}}],["connect",{"_index":1039,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["connection",{"_index":1398,"title":{},"body":{"license.html":{}}}],["console",{"_index":1034,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["console.log(`all",{"_index":1060,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["console.log(`job",{"_index":1035,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["console.log(error",{"_index":1061,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["const",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["constructor",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"controllers/PlanController.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{}}}],["constructor(authservice",{"_index":810,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(planmodel",{"_index":1020,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["constructor(private",{"_index":817,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(usermodel",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ModelService.html":{}}}],["containing",{"_index":374,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["contains",{"_index":673,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["contract",{"_index":1394,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('email",{"_index":388,"title":{},"body":{"controllers/EmailController.html":{}}}],["controller('expense",{"_index":616,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["controller('plan",{"_index":861,"title":{},"body":{"controllers/PlanController.html":{}}}],["controller('user",{"_index":1101,"title":{},"body":{"controllers/UserController.html":{}}}],["controller/email/email.module",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["controller/expense/expense.module",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["controller/plans/plans.module",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["controller/user/user.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"controllers/ExpenseController.html":{},"modules/ExpenseModule.html":{},"controllers/PlanController.html":{},"modules/PlanModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["copies",{"_index":1365,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1348,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1337,"title":{},"body":{"license.html":{}}}],["correct",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["coverage",{"_index":1195,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":600,"title":{},"body":{"controllers/ExpenseController.html":{},"injectables/PlanService.html":{}}}],["create(data",{"_index":900,"title":{},"body":{"injectables/PlanService.html":{}}}],["created",{"_index":390,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{}}}],["created'})@apiforbiddenresponse({description",{"_index":359,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["createdat",{"_index":728,"title":{},"body":{"interfaces/IUser.html":{}}}],["createdto",{"_index":193,"title":{"classes/CreateDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["createjob",{"_index":1017,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["createplan",{"_index":837,"title":{},"body":{"controllers/PlanController.html":{}}}],["createplan(@body",{"_index":862,"title":{},"body":{"controllers/PlanController.html":{}}}],["createplan(body",{"_index":844,"title":{},"body":{"controllers/PlanController.html":{}}}],["creates",{"_index":454,"title":{},"body":{"injectables/EmailService.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser",{"_index":1146,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(data",{"_index":1152,"title":{},"body":{"injectables/UserService.html":{}}}],["creating",{"_index":1080,"title":{},"body":{"controllers/UserController.html":{}}}],["creation",{"_index":257,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["credential",{"_index":306,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["credentials",{"_index":1079,"title":{},"body":{"controllers/UserController.html":{}}}],["current",{"_index":573,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["cvv",{"_index":231,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["d19115",{"_index":546,"title":{},"body":{"injectables/EmailService.html":{}}}],["daily",{"_index":243,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["daily_plan",{"_index":1048,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["damages",{"_index":1391,"title":{},"body":{"license.html":{}}}],["data",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"classes/ImageDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["data.card",{"_index":987,"title":{},"body":{"injectables/PlanService.html":{}}}],["data.card.amount",{"_index":982,"title":{},"body":{"injectables/PlanService.html":{}}}],["data.country_phone.phone",{"_index":1165,"title":{},"body":{"injectables/UserService.html":{}}}],["data.duration",{"_index":986,"title":{},"body":{"injectables/PlanService.html":{}}}],["data.email",{"_index":1166,"title":{},"body":{"injectables/UserService.html":{}}}],["data.matching_passwords.password",{"_index":1167,"title":{},"body":{"injectables/UserService.html":{}}}],["data.name",{"_index":1164,"title":{},"body":{"injectables/UserService.html":{}}}],["data.periodicamount",{"_index":985,"title":{},"body":{"injectables/PlanService.html":{}}}],["data.planname",{"_index":983,"title":{},"body":{"injectables/PlanService.html":{}}}],["data.targetamount",{"_index":984,"title":{},"body":{"injectables/PlanService.html":{}}}],["data.username",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["database",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["databaseurl",{"_index":308,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":224,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["datetime",{"_index":258,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["day",{"_index":1044,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["days",{"_index":953,"title":{},"body":{"injectables/PlanService.html":{}}}],["db",{"_index":1008,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["deal",{"_index":1352,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1399,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoded",{"_index":672,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["decodes",{"_index":783,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{}}}],["decrupt",{"_index":905,"title":{},"body":{"injectables/PlanService.html":{}}}],["decryptcard",{"_index":889,"title":{},"body":{"injectables/PlanService.html":{}}}],["decryptcard(doc",{"_index":903,"title":{},"body":{"injectables/PlanService.html":{}}}],["decryptcardnum",{"_index":1232,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["decryptcardnum(card_no",{"_index":1289,"title":{},"body":{"miscellaneous/functions.html":{}}}],["decryptcvv",{"_index":1233,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["decryptcvv(cvv",{"_index":1290,"title":{},"body":{"miscellaneous/functions.html":{}}}],["decrypted",{"_index":907,"title":{},"body":{"injectables/PlanService.html":{}}}],["decryptpin",{"_index":1234,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["decryptpin(pin",{"_index":1291,"title":{},"body":{"miscellaneous/functions.html":{}}}],["decrypts",{"_index":917,"title":{},"body":{"injectables/PlanService.html":{}}}],["default",{"_index":289,"title":{},"body":{"injectables/CloudNotificationService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":1030,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["delete",{"_index":262,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{}}}],["delete(':bid/:id",{"_index":637,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["delete(':id",{"_index":872,"title":{},"body":{"controllers/PlanController.html":{}}}],["delete('budget/image/:bid/:id",{"_index":646,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["delete(user",{"_index":908,"title":{},"body":{"injectables/PlanService.html":{}}}],["deleted",{"_index":268,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["deleted'})@apiforbiddenresponse({description",{"_index":581,"title":{},"body":{"controllers/ExpenseController.html":{},"controllers/PlanController.html":{}}}],["deletedto",{"_index":266,"title":{"classes/DeleteDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["deleteexpense",{"_index":561,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["deleteexpense(@param('bid",{"_index":638,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["deleteexpense(bid",{"_index":579,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["deletehash",{"_index":264,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["deleteimage",{"_index":562,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["deleteimage(@param('bid",{"_index":647,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["deleteimage(bid",{"_index":584,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["deleteplan",{"_index":838,"title":{},"body":{"controllers/PlanController.html":{}}}],["deleteplan(@param('id",{"_index":873,"title":{},"body":{"controllers/PlanController.html":{}}}],["deleteplan(id",{"_index":847,"title":{},"body":{"controllers/PlanController.html":{}}}],["deletion",{"_index":910,"title":{},"body":{"injectables/PlanService.html":{}}}],["delexpense",{"_index":663,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["delexpense(budgetid",{"_index":674,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["delimage",{"_index":664,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["delimage(budgetid",{"_index":676,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["dependencies",{"_index":41,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["descr",{"_index":252,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":182,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["deserves",{"_index":777,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["details",{"_index":247,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["determines",{"_index":440,"title":{},"body":{"injectables/EmailService.html":{}}}],["detils",{"_index":593,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["development",{"_index":1314,"title":{},"body":{"index.html":{}}}],["digit",{"_index":227,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["discussion",{"_index":778,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["displayed",{"_index":353,"title":{},"body":{"controllers/EmailController.html":{}}}],["distribute",{"_index":1361,"title":{},"body":{"license.html":{}}}],["doc",{"_index":906,"title":{},"body":{"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["doc.card.card_no",{"_index":959,"title":{},"body":{"injectables/PlanService.html":{}}}],["doc.card.cvv",{"_index":961,"title":{},"body":{"injectables/PlanService.html":{}}}],["doc.card.expiry_date",{"_index":969,"title":{},"body":{"injectables/PlanService.html":{}}}],["doc.card.lastname",{"_index":968,"title":{},"body":{"injectables/PlanService.html":{}}}],["doc.card.pin",{"_index":963,"title":{},"body":{"injectables/PlanService.html":{}}}],["doc.foreach(element",{"_index":979,"title":{},"body":{"injectables/PlanService.html":{}}}],["docs",{"_index":1056,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["docs.filter(res",{"_index":1057,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["document",{"_index":1154,"title":{},"body":{"injectables/UserService.html":{}}}],["documentation",{"_index":1196,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["don’t",{"_index":536,"title":{},"body":{"injectables/EmailService.html":{}}}],["dotenv",{"_index":1258,"title":{},"body":{"dependencies.html":{}}}],["download",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["download_link",{"_index":1427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":189,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["dto/interface.dto",{"_index":379,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["duration",{"_index":246,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["e2e",{"_index":1325,"title":{},"body":{"index.html":{}}}],["each",{"_index":945,"title":{},"body":{"injectables/PlanService.html":{}}}],["edit",{"_index":591,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["editbudget",{"_index":563,"title":{},"body":{"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{}}}],["editbudget(@param('id",{"_index":641,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["editbudget(data",{"_index":678,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["editbudget(id",{"_index":588,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["editexpense",{"_index":564,"title":{},"body":{"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{}}}],["editexpense(@param('bid",{"_index":634,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["editexpense(bid",{"_index":594,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["editexpense(budgetid",{"_index":680,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["efficient",{"_index":1301,"title":{},"body":{"index.html":{}}}],["element",{"_index":980,"title":{},"body":{"injectables/PlanService.html":{}}}],["email",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"miscellaneous/variables.html":{}}}],["email.controller",{"_index":417,"title":{},"body":{"modules/EmailModule.html":{}}}],["email.service",{"_index":381,"title":{},"body":{"controllers/EmailController.html":{},"modules/EmailModule.html":{}}}],["email_url",{"_index":1425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emailcontroller",{"_index":322,"title":{"controllers/EmailController.html":{}},"body":{"controllers/EmailController.html":{},"modules/EmailModule.html":{},"coverage.html":{}}}],["emailmodule",{"_index":51,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailresetdto",{"_index":215,"title":{"classes/EmailResetDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["emailservice",{"_index":380,"title":{"injectables/EmailService.html":{}},"body":{"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["emailtemplate",{"_index":550,"title":{},"body":{"injectables/EmailService.html":{}}}],["encrypt",{"_index":930,"title":{},"body":{"injectables/PlanService.html":{}}}],["encrypt.decryptcardnum(doc.card.card_no",{"_index":965,"title":{},"body":{"injectables/PlanService.html":{}}}],["encrypt.decryptcvv(doc.card.cvv",{"_index":966,"title":{},"body":{"injectables/PlanService.html":{}}}],["encrypt.decryptpin(doc.card.pin",{"_index":967,"title":{},"body":{"injectables/PlanService.html":{}}}],["encrypt.encryptcardnum(doc.card.card_no",{"_index":960,"title":{},"body":{"injectables/PlanService.html":{}}}],["encrypt.encryptcvv(doc.card.cvv",{"_index":962,"title":{},"body":{"injectables/PlanService.html":{}}}],["encrypt.encryptpin(doc.card.pin",{"_index":964,"title":{},"body":{"injectables/PlanService.html":{}}}],["encryptcard",{"_index":890,"title":{},"body":{"injectables/PlanService.html":{}}}],["encryptcard(doc",{"_index":911,"title":{},"body":{"injectables/PlanService.html":{}}}],["encryptcardnum",{"_index":1235,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["encryptcardnum(card_no",{"_index":1292,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encryptcvv",{"_index":1236,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["encryptcvv(cvv",{"_index":1293,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encrypted",{"_index":451,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PlanService.html":{}}}],["encryptpin",{"_index":1237,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["encryptpin(pin",{"_index":1294,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encrypts",{"_index":447,"title":{},"body":{"injectables/EmailService.html":{}}}],["endpoint",{"_index":368,"title":{},"body":{"controllers/EmailController.html":{}}}],["entire",{"_index":1287,"title":{},"body":{"miscellaneous/functions.html":{}}}],["equals",{"_index":500,"title":{},"body":{"injectables/EmailService.html":{}}}],["er",{"_index":508,"title":{},"body":{"injectables/EmailService.html":{}}}],["err",{"_index":480,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"interfaces/IUser.html":{},"injectables/ModelService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["error",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"interfaces/IUser.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{}}}],["errorhandler",{"_index":437,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/ModelService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["errorhandler(err",{"_index":477,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/ModelService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["event",{"_index":1387,"title":{},"body":{"license.html":{}}}],["expected",{"_index":239,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["expense",{"_index":249,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"modules/UserModule.html":{}}}],["expense.controller",{"_index":660,"title":{},"body":{"modules/ExpenseModule.html":{}}}],["expense.service",{"_index":614,"title":{},"body":{"controllers/ExpenseController.html":{},"modules/ExpenseModule.html":{}}}],["expensecontroller",{"_index":557,"title":{"controllers/ExpenseController.html":{}},"body":{"controllers/ExpenseController.html":{},"modules/ExpenseModule.html":{},"coverage.html":{}}}],["expensedto",{"_index":248,"title":{"classes/ExpenseDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["expensemodel",{"_index":823,"title":{},"body":{"injectables/ModelService.html":{}}}],["expensemodule",{"_index":52,"title":{"modules/ExpenseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExpenseModule.html":{},"modules.html":{},"overview.html":{}}}],["expenses",{"_index":698,"title":{},"body":{"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"miscellaneous/variables.html":{}}}],["expenses._id",{"_index":708,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["expenseschema",{"_index":422,"title":{},"body":{"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"interfaces/IExpense.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["expenseservice",{"_index":613,"title":{"injectables/ExpenseService.html":{}},"body":{"controllers/ExpenseController.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"coverage.html":{},"overview.html":{}}}],["expire",{"_index":539,"title":{},"body":{"injectables/EmailService.html":{}}}],["expires",{"_index":475,"title":{},"body":{"injectables/EmailService.html":{}}}],["expiresin",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"injectables/EmailService.html":{}}}],["expiry",{"_index":223,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["expiry_date",{"_index":225,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["exports",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":378,"title":{},"body":{"controllers/EmailController.html":{},"dependencies.html":{},"license.html":{}}}],["expservice",{"_index":617,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["extends",{"_index":430,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["extractjwt",{"_index":801,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":806,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"injectables/JwtStrategy.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"coverage.html":{}}}],["files",{"_index":1351,"title":{},"body":{"license.html":{}}}],["firebase",{"_index":297,"title":{},"body":{"injectables/CloudNotificationService.html":{},"injectables/UserService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["firebaseapp",{"_index":304,"title":{},"body":{"injectables/CloudNotificationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasetoken",{"_index":729,"title":{},"body":{"interfaces/IUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["fired",{"_index":1036,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["first",{"_index":194,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["first_name",{"_index":199,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["firstname",{"_index":221,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["fitness",{"_index":1383,"title":{},"body":{"license.html":{}}}],["flutterwave",{"_index":1038,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["following",{"_index":543,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["forbidden",{"_index":392,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["forbidden'})@apinotfoundresponse({description",{"_index":346,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["formatted_date",{"_index":725,"title":{},"body":{"interfaces/IPlan.html":{},"injectables/PlanService.html":{},"miscellaneous/variables.html":{}}}],["forwardref",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["found",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["framework",{"_index":1299,"title":{},"body":{"index.html":{}}}],["free",{"_index":1344,"title":{},"body":{"license.html":{}}}],["friends",{"_index":549,"title":{},"body":{"injectables/EmailService.html":{}}}],["frrom",{"_index":916,"title":{},"body":{"injectables/PlanService.html":{}}}],["full",{"_index":458,"title":{},"body":{"injectables/EmailService.html":{}}}],["full_name",{"_index":1188,"title":{},"body":{"injectables/ValidateService.html":{}}}],["fullname",{"_index":730,"title":{},"body":{"interfaces/IUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":1226,"title":{},"body":{"coverage.html":{}}}],["function(attempt",{"_index":758,"title":{},"body":{"interfaces/IUser.html":{}}}],["function(next",{"_index":750,"title":{},"body":{"interfaces/IUser.html":{}}}],["functionality",{"_index":334,"title":{},"body":{"controllers/EmailController.html":{}}}],["functions",{"_index":744,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/IUser.html":{},"miscellaneous/functions.html":{}}}],["furnished",{"_index":1368,"title":{},"body":{"license.html":{}}}],["generate",{"_index":474,"title":{},"body":{"injectables/EmailService.html":{},"interfaces/IUser.html":{}}}],["generated",{"_index":472,"title":{},"body":{"injectables/EmailService.html":{}}}],["get('budgets",{"_index":619,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["get('card/:id",{"_index":864,"title":{},"body":{"controllers/PlanController.html":{}}}],["get('link/:id/:token",{"_index":399,"title":{},"body":{"controllers/EmailController.html":{}}}],["get('link/:id/:token')@apiokresponse({description",{"_index":342,"title":{},"body":{"controllers/EmailController.html":{}}}],["get('ping",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["get('profile",{"_index":1125,"title":{},"body":{"controllers/UserController.html":{}}}],["get()@render('welcome",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["getcard",{"_index":839,"title":{},"body":{"controllers/PlanController.html":{},"injectables/PlanService.html":{}}}],["getcard(@request",{"_index":865,"title":{},"body":{"controllers/PlanController.html":{}}}],["getcard(id",{"_index":914,"title":{},"body":{"injectables/PlanService.html":{}}}],["getcard(req",{"_index":850,"title":{},"body":{"controllers/PlanController.html":{}}}],["getinfo",{"_index":1147,"title":{},"body":{"injectables/UserService.html":{}}}],["getinfo(user",{"_index":1155,"title":{},"body":{"injectables/UserService.html":{}}}],["getprofile",{"_index":1065,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile(@request",{"_index":1126,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile(req",{"_index":1070,"title":{},"body":{"controllers/UserController.html":{}}}],["gets",{"_index":577,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["getting",{"_index":1295,"title":{"index.html":{},"license.html":{}},"body":{}}],["granted",{"_index":1343,"title":{},"body":{"license.html":{}}}],["greater",{"_index":947,"title":{},"body":{"injectables/PlanService.html":{}}}],["guaranteed",{"_index":793,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handling",{"_index":326,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["hapi/joi",{"_index":1184,"title":{},"body":{"injectables/ValidateService.html":{},"dependencies.html":{}}}],["hash",{"_index":263,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["hashed",{"_index":754,"title":{},"body":{"interfaces/IUser.html":{}}}],["hbs",{"_index":1261,"title":{},"body":{"dependencies.html":{}}}],["heard",{"_index":532,"title":{},"body":{"injectables/EmailService.html":{}}}],["heavily",{"_index":1306,"title":{},"body":{"index.html":{}}}],["height",{"_index":260,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["here",{"_index":745,"title":{},"body":{"interfaces/IUser.html":{}}}],["hereby",{"_index":1342,"title":{},"body":{"license.html":{}}}],["hich",{"_index":456,"title":{},"body":{"injectables/EmailService.html":{}}}],["hidden",{"_index":921,"title":{},"body":{"injectables/PlanService.html":{}}}],["hide",{"_index":920,"title":{},"body":{"injectables/PlanService.html":{}}}],["hidedetails",{"_index":891,"title":{},"body":{"injectables/PlanService.html":{}}}],["hidedetails(doc",{"_index":918,"title":{},"body":{"injectables/PlanService.html":{}}}],["high",{"_index":292,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["his/her",{"_index":372,"title":{},"body":{"controllers/EmailController.html":{}}}],["holders",{"_index":1388,"title":{},"body":{"license.html":{}}}],["hour",{"_index":476,"title":{},"body":{"injectables/EmailService.html":{}}}],["html",{"_index":460,"title":{},"body":{"injectables/EmailService.html":{}}}],["http://localhost:3000",{"_index":527,"title":{},"body":{"injectables/EmailService.html":{}}}],["http://localhost:3000/logo2.png",{"_index":529,"title":{},"body":{"injectables/EmailService.html":{}}}],["httpexception",{"_index":1096,"title":{},"body":{"controllers/UserController.html":{}}}],["https://api.imgur.com/3/image",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://drive.google.com/file/d/1egukw8snoym5e_ho",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://savelite",{"_index":309,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["httpstatus",{"_index":1097,"title":{},"body":{"controllers/UserController.html":{}}}],["httpstatus.bad_request",{"_index":1106,"title":{},"body":{"controllers/UserController.html":{}}}],["icon",{"_index":695,"title":{},"body":{"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":1197,"title":{},"body":{"coverage.html":{}}}],["iexpense",{"_index":715,"title":{"interfaces/IExpense.html":{}},"body":{"interfaces/IExpense.html":{},"injectables/ModelService.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":807,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":256,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["imagedeletehash",{"_index":1121,"title":{},"body":{"controllers/UserController.html":{}}}],["imagedto",{"_index":255,"title":{"classes/ImageDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["images",{"_index":269,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["imgdelhash",{"_index":731,"title":{},"body":{"interfaces/IUser.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["imgur_client_id",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["imgur_endpoint",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["immediately",{"_index":370,"title":{},"body":{"controllers/EmailController.html":{}}}],["implied",{"_index":1379,"title":{},"body":{"license.html":{}}}],["import",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["imports",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{}}}],["include",{"_index":333,"title":{},"body":{"controllers/EmailController.html":{}}}],["included",{"_index":1373,"title":{},"body":{"license.html":{}}}],["including",{"_index":1355,"title":{},"body":{"license.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["information",{"_index":1157,"title":{},"body":{"injectables/UserService.html":{}}}],["inherited",{"_index":478,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":77,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"coverage.html":{}}}],["injectables",{"_index":78,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"overview.html":{}}}],["injectmodel",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ModelService.html":{},"injectables/ScheduleService.html":{}}}],["injectmodel('expense",{"_index":830,"title":{},"body":{"injectables/ModelService.html":{}}}],["injectmodel('plans",{"_index":829,"title":{},"body":{"injectables/ModelService.html":{},"injectables/ScheduleService.html":{}}}],["injectmodel('user",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ModelService.html":{}}}],["input",{"_index":272,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["inspired",{"_index":1307,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1310,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1312,"title":{},"body":{"index.html":{}}}],["instructions",{"_index":541,"title":{},"body":{"injectables/EmailService.html":{}}}],["interface",{"_index":714,"title":{"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{}},"body":{"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"coverage.html":{}}}],["interfaces",{"_index":716,"title":{},"body":{"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"overview.html":{}}}],["interval",{"_index":242,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["intro",{"_index":531,"title":{},"body":{"injectables/EmailService.html":{}}}],["invalid",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["invokes",{"_index":784,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["iplan",{"_index":723,"title":{"interfaces/IPlan.html":{}},"body":{"interfaces/IPlan.html":{},"injectables/ModelService.html":{},"injectables/ScheduleService.html":{},"coverage.html":{}}}],["ismatch",{"_index":761,"title":{},"body":{"interfaces/IUser.html":{}}}],["isnan(periodamount",{"_index":941,"title":{},"body":{"injectables/PlanService.html":{}}}],["isnan(trgamount",{"_index":942,"title":{},"body":{"injectables/PlanService.html":{}}}],["issued",{"_index":797,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["isuseridvalid",{"_index":432,"title":{},"body":{"injectables/EmailService.html":{}}}],["isuseridvalid(id",{"_index":438,"title":{},"body":{"injectables/EmailService.html":{}}}],["iuser",{"_index":140,"title":{"interfaces/IUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{},"injectables/ModelService.html":{},"coverage.html":{}}}],["job",{"_index":1031,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["jobs",{"_index":1011,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["joi",{"_index":1183,"title":{},"body":{"injectables/ValidateService.html":{}}}],["joi.number().min(11).max(14).required",{"_index":1191,"title":{},"body":{"injectables/ValidateService.html":{}}}],["joi.object",{"_index":1187,"title":{},"body":{"injectables/ValidateService.html":{}}}],["joi.string().min(4).required",{"_index":1190,"title":{},"body":{"injectables/ValidateService.html":{}}}],["joi.string().min(5).required().email",{"_index":1192,"title":{},"body":{"injectables/ValidateService.html":{}}}],["joi.string().min(6).required",{"_index":1189,"title":{},"body":{"injectables/ValidateService.html":{}}}],["joi.string().min(8).required",{"_index":1193,"title":{},"body":{"injectables/ValidateService.html":{}}}],["json",{"_index":373,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{}}}],["jsonwebtoken",{"_index":483,"title":{},"body":{"injectables/EmailService.html":{}}}],["jsonwebtokens",{"_index":470,"title":{},"body":{"injectables/EmailService.html":{}}}],["jwt",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"modules/ExpenseModule.html":{},"injectables/JwtStrategy.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["jwt's",{"_index":781,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt.sign",{"_index":488,"title":{},"body":{"injectables/EmailService.html":{}}}],["jwt.strategy",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt.verify(token",{"_index":498,"title":{},"body":{"injectables/EmailService.html":{}}}],["jwt_secret",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":805,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":84,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kind",{"_index":1378,"title":{},"body":{"license.html":{}}}],["kinds",{"_index":327,"title":{},"body":{"controllers/EmailController.html":{}}}],["last",{"_index":202,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["last_name",{"_index":203,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["lastname",{"_index":222,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["lexical",{"_index":747,"title":{},"body":{"interfaces/IUser.html":{}}}],["liability",{"_index":1392,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1389,"title":{},"body":{"license.html":{}}}],["license",{"_index":1334,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":1336,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":1356,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1380,"title":{},"body":{"license.html":{}}}],["line",{"_index":197,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{}}}],["link",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":267,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["literal",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"classes/PlanDto.html":{}}}],["local",{"_index":816,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{}}}],["localstrategy",{"_index":85,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["lodash",{"_index":689,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"dependencies.html":{}}}],["log",{"_index":1077,"title":{},"body":{"controllers/UserController.html":{}}}],["login",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/ValidateService.html":{}}}],["login(@request",{"_index":1109,"title":{},"body":{"controllers/UserController.html":{}}}],["login(req",{"_index":1074,"title":{},"body":{"controllers/UserController.html":{}}}],["login(user",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":211,"title":{"classes/LoginDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["loginvalidation",{"_index":1178,"title":{},"body":{"injectables/ValidateService.html":{}}}],["loginvalidation(data",{"_index":1181,"title":{},"body":{"injectables/ValidateService.html":{}}}],["logo",{"_index":528,"title":{},"body":{"injectables/EmailService.html":{}}}],["lost",{"_index":533,"title":{},"body":{"injectables/EmailService.html":{}}}],["made",{"_index":1081,"title":{},"body":{"controllers/UserController.html":{}}}],["mail",{"_index":216,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["mailer",{"_index":464,"title":{},"body":{"injectables/EmailService.html":{}}}],["mailgen",{"_index":486,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["mailgenerator",{"_index":522,"title":{},"body":{"injectables/EmailService.html":{}}}],["mailgenerator.generate(email",{"_index":551,"title":{},"body":{"injectables/EmailService.html":{}}}],["make",{"_index":751,"title":{},"body":{"interfaces/IUser.html":{}}}],["matching",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(trgamount",{"_index":949,"title":{},"body":{"injectables/PlanService.html":{}}}],["max",{"_index":209,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["merchantability",{"_index":1382,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1359,"title":{},"body":{"license.html":{}}}],["message",{"_index":286,"title":{},"body":{"injectables/CloudNotificationService.html":{},"interfaces/IUser.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":1273,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":468,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["middle",{"_index":200,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["middle_name",{"_index":201,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["middleware",{"_index":505,"title":{},"body":{"injectables/EmailService.html":{}}}],["minlenght",{"_index":737,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["minlength",{"_index":739,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":1281,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1335,"title":{},"body":{"index.html":{},"license.html":{}}}],["mobile",{"_index":206,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["mode",{"_index":1318,"title":{},"body":{"index.html":{}}}],["model",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ModelService.html":{},"injectables/ScheduleService.html":{}}}],["model.service",{"_index":482,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["model/expense.model",{"_index":827,"title":{},"body":{"injectables/ModelService.html":{}}}],["model/plan.model",{"_index":419,"title":{},"body":{"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"injectables/ModelService.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"modules/UserModule.html":{}}}],["model/user.model",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"injectables/ModelService.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["modelservice",{"_index":431,"title":{"injectables/ModelService.html":{}},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/ModelService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["modelservice:18",{"_index":479,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["modify",{"_index":1358,"title":{},"body":{"license.html":{}}}],["module",{"_index":38,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":40,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":929,"title":{},"body":{"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"dependencies.html":{}}}],["moment().add(n",{"_index":952,"title":{},"body":{"injectables/PlanService.html":{}}}],["moment().format('llll",{"_index":1037,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["moment(time).format('llll",{"_index":958,"title":{},"body":{"injectables/PlanService.html":{}}}],["mongodb",{"_index":687,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"injectables/UserService.html":{}}}],["mongodb://heroku_tg7gr6qm:q8e776fv65cscqpc1edujg0d1u@ds149353.mlab.com:49353/heroku_tg7gr6qm",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongodb_uri",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"injectables/ModelService.html":{},"injectables/ScheduleService.html":{},"dependencies.html":{}}}],["mongoose.document",{"_index":718,"title":{},"body":{"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{}}}],["mongoose.schema",{"_index":719,"title":{},"body":{"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["mongoose.schema.types.objectid",{"_index":720,"title":{},"body":{"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":426,"title":{},"body":{"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature([{name",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{}}}],["mongoosemodule.forroot(configkeys.mongodb_uri",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["month",{"_index":1053,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["monthly",{"_index":245,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["monthly_plan",{"_index":1055,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["months",{"_index":955,"title":{},"body":{"injectables/PlanService.html":{}}}],["mooreoluwa",{"_index":1332,"title":{},"body":{"index.html":{}}}],["more",{"_index":1032,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["moredetails",{"_index":957,"title":{},"body":{"injectables/PlanService.html":{}}}],["msg",{"_index":481,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/ModelService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["n",{"_index":948,"title":{},"body":{"injectables/PlanService.html":{}}}],["n/b",{"_index":535,"title":{},"body":{"injectables/EmailService.html":{}}}],["name",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nestjs",{"_index":1004,"title":{},"body":{"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"controllers/PlanController.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1248,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"injectables/ModelService.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailModule.html":{},"controllers/ExpenseController.html":{},"modules/ExpenseModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PlanController.html":{},"modules/PlanModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1252,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":188,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["new",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newbudget",{"_index":565,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["newbudget(@request",{"_index":624,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["newbudget(req",{"_index":597,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["newlist",{"_index":711,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["newlist.expenses",{"_index":713,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["newplan",{"_index":990,"title":{},"body":{"injectables/PlanService.html":{}}}],["next",{"_index":196,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{}}}],["node.js",{"_index":1298,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":1386,"title":{},"body":{"license.html":{}}}],["note",{"_index":742,"title":{},"body":{"interfaces/IUser.html":{}}}],["notfoundexception",{"_index":376,"title":{},"body":{"controllers/EmailController.html":{},"controllers/UserController.html":{}}}],["notfoundexception(error",{"_index":398,"title":{},"body":{"controllers/EmailController.html":{},"controllers/UserController.html":{}}}],["notice",{"_index":1371,"title":{},"body":{"license.html":{}}}],["notification",{"_index":824,"title":{},"body":{"injectables/ModelService.html":{},"injectables/UserService.html":{}}}],["notification.service",{"_index":425,"title":{},"body":{"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"injectables/ModelService.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["notification.service.ts",{"_index":282,"title":{},"body":{"injectables/CloudNotificationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["notification.service.ts:13",{"_index":296,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["notification.service.ts:18",{"_index":287,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["notificationoptions",{"_index":283,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["notifications",{"_index":1160,"title":{},"body":{"injectables/UserService.html":{}}}],["notimplementedexception",{"_index":610,"title":{},"body":{"controllers/ExpenseController.html":{},"controllers/PlanController.html":{}}}],["notimplementedexception(error",{"_index":622,"title":{},"body":{"controllers/ExpenseController.html":{},"controllers/PlanController.html":{}}}],["npm",{"_index":1311,"title":{},"body":{"index.html":{}}}],["null",{"_index":721,"title":{},"body":{"interfaces/IExpense.html":{},"miscellaneous/variables.html":{}}}],["num",{"_index":970,"title":{},"body":{"injectables/PlanService.html":{}}}],["num.length",{"_index":972,"title":{},"body":{"injectables/PlanService.html":{}}}],["num.slice((cardnum",{"_index":974,"title":{},"body":{"injectables/PlanService.html":{}}}],["number",{"_index":180,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":192,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["objectid",{"_index":686,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{}}}],["objectid.isvalid(budgetid",{"_index":709,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["objectid.isvalid(id",{"_index":703,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{}}}],["obtaining",{"_index":1347,"title":{},"body":{"license.html":{}}}],["okoye",{"_index":1330,"title":{},"body":{"index.html":{},"license.html":{}}}],["onyekachi",{"_index":1331,"title":{},"body":{"index.html":{}}}],["operations",{"_index":332,"title":{},"body":{"controllers/EmailController.html":{}}}],["optional",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1012,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["otherwise",{"_index":1396,"title":{},"body":{"license.html":{}}}],["out",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["outro",{"_index":548,"title":{},"body":{"injectables/EmailService.html":{}}}],["overview",{"_index":1404,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1245,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":351,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["param",{"_index":377,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param('id",{"_index":635,"title":{},"body":{"controllers/ExpenseController.html":{},"controllers/PlanController.html":{}}}],["param('token",{"_index":403,"title":{},"body":{"controllers/EmailController.html":{}}}],["parameter",{"_index":787,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["parameters",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"miscellaneous/functions.html":{}}}],["parsefloat(body.periodicamount",{"_index":938,"title":{},"body":{"injectables/PlanService.html":{}}}],["parsefloat(body.targetamount",{"_index":940,"title":{},"body":{"injectables/PlanService.html":{}}}],["particular",{"_index":1384,"title":{},"body":{"license.html":{}}}],["passing",{"_index":785,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passord",{"_index":352,"title":{},"body":{"controllers/EmailController.html":{}}}],["passport",{"_index":780,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["passportmodule.register({defaultstrategy",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["passportstrategy",{"_index":802,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":803,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passrespagedto",{"_index":217,"title":{"classes/PassResPageDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["password",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"miscellaneous/variables.html":{}}}],["passwordfield",{"_index":813,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["payload",{"_index":497,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{}}}],["payload._id",{"_index":799,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":800,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":501,"title":{},"body":{"injectables/EmailService.html":{}}}],["pdbuwfqkg2axwi1/view?usp=sharing",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["per",{"_index":210,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["period",{"_index":946,"title":{},"body":{"injectables/PlanService.html":{}}}],["periodamount",{"_index":937,"title":{},"body":{"injectables/PlanService.html":{}}}],["periodic",{"_index":235,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["periodicamount",{"_index":236,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["permission",{"_index":1341,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1366,"title":{},"body":{"license.html":{}}}],["person",{"_index":1346,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1367,"title":{},"body":{"license.html":{}}}],["phone_no",{"_index":207,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"miscellaneous/variables.html":{}}}],["pin",{"_index":230,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["ping",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["plan",{"_index":233,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{}}}],["plan.save",{"_index":935,"title":{},"body":{"injectables/PlanService.html":{}}}],["plancontroller",{"_index":834,"title":{"controllers/PlanController.html":{}},"body":{"controllers/PlanController.html":{},"modules/PlanModule.html":{},"coverage.html":{}}}],["plandetails",{"_index":932,"title":{},"body":{"injectables/PlanService.html":{}}}],["plandto",{"_index":232,"title":{"classes/PlanDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["planmodel",{"_index":822,"title":{},"body":{"injectables/ModelService.html":{},"injectables/ScheduleService.html":{}}}],["planmodule",{"_index":53,"title":{"modules/PlanModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/PlanModule.html":{},"modules.html":{},"overview.html":{}}}],["planname",{"_index":234,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["plans",{"_index":427,"title":{},"body":{"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"controllers/PlanController.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"modules/UserModule.html":{}}}],["plans.controller",{"_index":886,"title":{},"body":{"modules/PlanModule.html":{}}}],["plans.service",{"_index":885,"title":{},"body":{"modules/PlanModule.html":{}}}],["plans/plans.module",{"_index":420,"title":{},"body":{"modules/EmailModule.html":{}}}],["plans/plans.service",{"_index":859,"title":{},"body":{"controllers/PlanController.html":{},"modules/UserModule.html":{}}}],["planservice",{"_index":858,"title":{"injectables/PlanService.html":{}},"body":{"controllers/PlanController.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["plansschema",{"_index":418,"title":{},"body":{"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"interfaces/IPlan.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["point",{"_index":1286,"title":{},"body":{"miscellaneous/functions.html":{}}}],["portions",{"_index":1375,"title":{},"body":{"license.html":{}}}],["post",{"_index":375,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["post(':bid/:id",{"_index":633,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["post(':id",{"_index":630,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["post('budget",{"_index":623,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["post('budget/edit/:id",{"_index":640,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["post('budget/image/:id",{"_index":643,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["post('del",{"_index":627,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["post('image",{"_index":1136,"title":{},"body":{"controllers/UserController.html":{}}}],["post('login",{"_index":1108,"title":{},"body":{"controllers/UserController.html":{}}}],["post('reset",{"_index":408,"title":{},"body":{"controllers/EmailController.html":{}}}],["post('reset')@apicreatedresponse({description",{"_index":366,"title":{},"body":{"controllers/EmailController.html":{}}}],["post('signup",{"_index":1102,"title":{},"body":{"controllers/UserController.html":{}}}],["post('signup')@apicreatedresponse({description",{"_index":1087,"title":{},"body":{"controllers/UserController.html":{}}}],["post('token",{"_index":1128,"title":{},"body":{"controllers/UserController.html":{}}}],["post('update",{"_index":1133,"title":{},"body":{"controllers/UserController.html":{}}}],["post()@apicreatedresponse({description",{"_index":357,"title":{},"body":{"controllers/EmailController.html":{}}}],["prefix",{"_index":324,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["previously",{"_index":795,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["priority",{"_index":291,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["private",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{}}}],["processevery",{"_index":1013,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["product",{"_index":525,"title":{},"body":{"injectables/EmailService.html":{}}}],["production",{"_index":1320,"title":{},"body":{"index.html":{}}}],["production_flag",{"_index":1239,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":1095,"title":{},"body":{"controllers/UserController.html":{}}}],["profileimage",{"_index":732,"title":{},"body":{"interfaces/IUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["profileupdatedto",{"_index":271,"title":{"classes/ProfileUpdateDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["progressive",{"_index":1297,"title":{},"body":{"index.html":{}}}],["promise",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/LocalStrategy.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{}}}],["promise((resolve",{"_index":493,"title":{},"body":{"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":177,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["protected",{"_index":436,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/ModelService.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["provided",{"_index":1376,"title":{},"body":{"license.html":{}}}],["providers",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["publish",{"_index":1360,"title":{},"body":{"license.html":{}}}],["pull",{"_index":710,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["purpose",{"_index":1385,"title":{},"body":{"license.html":{}}}],["push",{"_index":697,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/UserService.html":{}}}],["put",{"_index":611,"title":{},"body":{"controllers/ExpenseController.html":{},"controllers/PlanController.html":{}}}],["put(':id",{"_index":869,"title":{},"body":{"controllers/PlanController.html":{}}}],["rave",{"_index":1240,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rave_production_flag",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rave_publick_key",{"_index":1241,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rave_secret_key",{"_index":1242,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ravepay",{"_index":1270,"title":{},"body":{"dependencies.html":{}}}],["ravepay(rave_publick_key",{"_index":1431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ravepayconnect",{"_index":1018,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["readonly",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{}}}],["recalculate",{"_index":927,"title":{},"body":{"injectables/PlanService.html":{}}}],["receivenewpassword",{"_index":433,"title":{},"body":{"injectables/EmailService.html":{}}}],["receivenewpassword(body",{"_index":444,"title":{},"body":{"injectables/EmailService.html":{}}}],["receiving",{"_index":794,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["reflect",{"_index":1272,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":1185,"title":{},"body":{"injectables/ValidateService.html":{}}}],["registrationtoken",{"_index":288,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["rehash",{"_index":753,"title":{},"body":{"interfaces/IUser.html":{}}}],["reject",{"_index":494,"title":{},"body":{"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["reject('wrong",{"_index":516,"title":{},"body":{"injectables/EmailService.html":{}}}],["reject(e",{"_index":515,"title":{},"body":{"injectables/EmailService.html":{}}}],["reject(er",{"_index":509,"title":{},"body":{"injectables/EmailService.html":{}}}],["reject(err",{"_index":506,"title":{},"body":{"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["reject(false",{"_index":521,"title":{},"body":{"injectables/EmailService.html":{}}}],["remark",{"_index":254,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["remarks",{"_index":253,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["remove",{"_index":587,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["removebudget",{"_index":566,"title":{},"body":{"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{}}}],["removebudget(@body",{"_index":628,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["removebudget(body",{"_index":601,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["removebudget(user",{"_index":682,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["render",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["render('welcome",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["repository",{"_index":1309,"title":{},"body":{"index.html":{}}}],["req",{"_index":569,"title":{},"body":{"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["req.user",{"_index":626,"title":{},"body":{"controllers/ExpenseController.html":{},"controllers/PlanController.html":{}}}],["req.user._id",{"_index":1115,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.email",{"_index":1118,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.firebasetoken",{"_index":1123,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.fullname",{"_index":1117,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.imagedeletehash",{"_index":1122,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.password",{"_index":1111,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.phone_no",{"_index":1119,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.profileimage",{"_index":1120,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.username",{"_index":1116,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":213,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{}}}],["requests",{"_index":328,"title":{},"body":{"controllers/EmailController.html":{},"controllers/UserController.html":{}}}],["require('../../savelite",{"_index":301,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":184,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["requires",{"_index":299,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["res",{"_index":340,"title":{},"body":{"controllers/EmailController.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{}}}],["res.duration",{"_index":1058,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["res.render('404",{"_index":407,"title":{},"body":{"controllers/EmailController.html":{}}}],["res.render('reset",{"_index":406,"title":{},"body":{"controllers/EmailController.html":{}}}],["res.send(userdetails",{"_index":1124,"title":{},"body":{"controllers/UserController.html":{}}}],["res.setheader('authorization",{"_index":1112,"title":{},"body":{"controllers/UserController.html":{}}}],["reset",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["reset_password_expires",{"_index":733,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["reset_password_token",{"_index":734,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["resetlink",{"_index":336,"title":{},"body":{"controllers/EmailController.html":{}}}],["resetlink(@param('id",{"_index":402,"title":{},"body":{"controllers/EmailController.html":{}}}],["resetlink(id",{"_index":339,"title":{},"body":{"controllers/EmailController.html":{}}}],["resetpasswordtemplate",{"_index":434,"title":{},"body":{"injectables/EmailService.html":{}}}],["resetpasswordtemplate(user",{"_index":452,"title":{},"body":{"injectables/EmailService.html":{}}}],["resolve('password",{"_index":511,"title":{},"body":{"injectables/EmailService.html":{}}}],["resolve(doc",{"_index":1170,"title":{},"body":{"injectables/UserService.html":{}}}],["resolve(true",{"_index":519,"title":{},"body":{"injectables/EmailService.html":{}}}],["resource",{"_index":343,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["response",{"_index":341,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["responsible",{"_index":325,"title":{},"body":{"controllers/EmailController.html":{}}}],["restriction",{"_index":1354,"title":{},"body":{"license.html":{}}}],["result",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":361,"title":{},"body":{"controllers/EmailController.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["return",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["returned",{"_index":401,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["returned'})@apiforbiddenresponse({description",{"_index":345,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["returns",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["rights",{"_index":1357,"title":{},"body":{"license.html":{}}}],["run",{"_index":1315,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1275,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":503,"title":{},"body":{"injectables/EmailService.html":{},"interfaces/IUser.html":{}}}],["salted",{"_index":524,"title":{},"body":{"injectables/EmailService.html":{}}}],["save",{"_index":924,"title":{},"body":{"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["saved",{"_index":902,"title":{},"body":{"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["saveimage",{"_index":567,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["saveimage(@param('id",{"_index":644,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["saveimage(id",{"_index":605,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["savelite",{"_index":526,"title":{},"body":{"injectables/EmailService.html":{},"index.html":{}}}],["saves",{"_index":450,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{}}}],["savetoken",{"_index":1148,"title":{},"body":{"injectables/UserService.html":{}}}],["savetoken(user",{"_index":1158,"title":{},"body":{"injectables/UserService.html":{}}}],["saveupdate",{"_index":892,"title":{},"body":{"injectables/PlanService.html":{}}}],["saveupdate(plan",{"_index":922,"title":{},"body":{"injectables/PlanService.html":{}}}],["scalable",{"_index":1302,"title":{},"body":{"index.html":{}}}],["schedule",{"_index":1042,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["schedule.service",{"_index":1006,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["schedulemodule",{"_index":54,"title":{"modules/ScheduleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ScheduleModule.html":{},"modules.html":{},"overview.html":{}}}],["scheduler/schedule.module",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["scheduleservice",{"_index":1001,"title":{"injectables/ScheduleService.html":{}},"body":{"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"coverage.html":{},"overview.html":{}}}],["schema",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"injectables/ValidateService.html":{}}}],["schema.validate(data",{"_index":1194,"title":{},"body":{"injectables/ValidateService.html":{}}}],["scope",{"_index":748,"title":{},"body":{"interfaces/IUser.html":{}}}],["searches",{"_index":469,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PlanService.html":{}}}],["searchplans",{"_index":1019,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["searchplans(duration",{"_index":1025,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["seconds",{"_index":1015,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["secret",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"injectables/EmailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":808,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sell",{"_index":1364,"title":{},"body":{"license.html":{}}}],["send",{"_index":1085,"title":{},"body":{"controllers/UserController.html":{}}}],["sendemail",{"_index":337,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["sendemail(@body",{"_index":394,"title":{},"body":{"controllers/EmailController.html":{}}}],["sendemail(mail",{"_index":356,"title":{},"body":{"controllers/EmailController.html":{}}}],["sendemail(user",{"_index":461,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendgrid",{"_index":463,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendgrid/mail",{"_index":485,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["sendgrid_key",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sendnotification",{"_index":284,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["sendnotification(registrationtoken",{"_index":285,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["sendpasswordresetemail",{"_index":435,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendpasswordresetemail(email",{"_index":465,"title":{},"body":{"injectables/EmailService.html":{}}}],["sends",{"_index":363,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{}}}],["sendtoken",{"_index":1066,"title":{},"body":{"controllers/UserController.html":{}}}],["sendtoken(@request",{"_index":1129,"title":{},"body":{"controllers/UserController.html":{}}}],["sendtoken(req",{"_index":1082,"title":{},"body":{"controllers/UserController.html":{}}}],["sent",{"_index":349,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["server",{"_index":1303,"title":{},"body":{"index.html":{}}}],["service",{"_index":467,"title":{},"body":{"injectables/EmailService.html":{}}}],["serviceaccount",{"_index":300,"title":{},"body":{"injectables/CloudNotificationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["session",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["set",{"_index":705,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["setbudget",{"_index":665,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["setbudget(data",{"_index":684,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["sg.ttqclabfrxyzc1hws0twbw.ejwc3zccfwomu5qitd6ns1lgrccf7th4w96pwxtqkwk",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sgmail",{"_index":484,"title":{},"body":{"injectables/EmailService.html":{}}}],["sgmail.send(msg",{"_index":556,"title":{},"body":{"injectables/EmailService.html":{}}}],["sgmail.setapikey(configkeys.sendgrid_key",{"_index":555,"title":{},"body":{"injectables/EmailService.html":{}}}],["shall",{"_index":1372,"title":{},"body":{"license.html":{}}}],["show",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["side",{"_index":1304,"title":{},"body":{"index.html":{}}}],["signature",{"_index":782,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["signed",{"_index":796,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["signing",{"_index":790,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["signoptions",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":1067,"title":{},"body":{"controllers/UserController.html":{}}}],["signup(@body",{"_index":1103,"title":{},"body":{"controllers/UserController.html":{}}}],["signup(data",{"_index":1086,"title":{},"body":{"controllers/UserController.html":{}}}],["single",{"_index":786,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["size",{"_index":261,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["software",{"_index":1349,"title":{},"body":{"license.html":{}}}],["sorry",{"_index":534,"title":{},"body":{"injectables/EmailService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["spent",{"_index":250,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["src/.../cloud",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../config.ts",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../encryption.ts",{"_index":1284,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../expense.model.ts",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1282,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../plan.model.ts",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ravepay.ts",{"_index":1283,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.model.ts",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:17",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":79,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:38",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":773,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:24",{"_index":776,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":774,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.strategy.ts",{"_index":809,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:15",{"_index":814,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:7",{"_index":811,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/config/config.ts",{"_index":1204,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/controller/cloud",{"_index":281,"title":{},"body":{"injectables/CloudNotificationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/controller/email/email.controller.ts",{"_index":323,"title":{},"body":{"controllers/EmailController.html":{},"coverage.html":{}}}],["src/controller/email/email.controller.ts:29",{"_index":360,"title":{},"body":{"controllers/EmailController.html":{}}}],["src/controller/email/email.controller.ts:49",{"_index":347,"title":{},"body":{"controllers/EmailController.html":{}}}],["src/controller/email/email.controller.ts:69",{"_index":367,"title":{},"body":{"controllers/EmailController.html":{}}}],["src/controller/email/email.module.ts",{"_index":415,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/controller/email/email.service.ts",{"_index":429,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/controller/email/email.service.ts:101",{"_index":453,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/controller/email/email.service.ts:139",{"_index":462,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/controller/email/email.service.ts:36",{"_index":466,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/controller/email/email.service.ts:56",{"_index":445,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/controller/email/email.service.ts:85",{"_index":439,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/controller/expense/expense.controller.ts",{"_index":558,"title":{},"body":{"controllers/ExpenseController.html":{},"coverage.html":{}}}],["src/controller/expense/expense.controller.ts:100",{"_index":596,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.controller.ts:119",{"_index":582,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.controller.ts:138",{"_index":590,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.controller.ts:157",{"_index":607,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.controller.ts:176",{"_index":586,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.controller.ts:25",{"_index":576,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.controller.ts:43",{"_index":599,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.controller.ts:61",{"_index":604,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.controller.ts:80",{"_index":571,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.module.ts",{"_index":657,"title":{},"body":{"modules/ExpenseModule.html":{}}}],["src/controller/expense/expense.service.ts",{"_index":661,"title":{},"body":{"injectables/ExpenseService.html":{},"coverage.html":{}}}],["src/controller/expense/expense.service.ts:120",{"_index":669,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/expense/expense.service.ts:135",{"_index":677,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/expense/expense.service.ts:16",{"_index":671,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/expense/expense.service.ts:26",{"_index":667,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/expense/expense.service.ts:38",{"_index":685,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/expense/expense.service.ts:52",{"_index":679,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/expense/expense.service.ts:67",{"_index":683,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/expense/expense.service.ts:78",{"_index":681,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/expense/expense.service.ts:98",{"_index":675,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/model.service.ts",{"_index":821,"title":{},"body":{"injectables/ModelService.html":{},"coverage.html":{}}}],["src/controller/model.service.ts:10",{"_index":825,"title":{},"body":{"injectables/ModelService.html":{}}}],["src/controller/model.service.ts:18",{"_index":826,"title":{},"body":{"injectables/ModelService.html":{}}}],["src/controller/plans/plans.controller.ts",{"_index":835,"title":{},"body":{"controllers/PlanController.html":{},"coverage.html":{}}}],["src/controller/plans/plans.controller.ts:24",{"_index":846,"title":{},"body":{"controllers/PlanController.html":{}}}],["src/controller/plans/plans.controller.ts:42",{"_index":852,"title":{},"body":{"controllers/PlanController.html":{}}}],["src/controller/plans/plans.controller.ts:59",{"_index":843,"title":{},"body":{"controllers/PlanController.html":{}}}],["src/controller/plans/plans.controller.ts:78",{"_index":855,"title":{},"body":{"controllers/PlanController.html":{}}}],["src/controller/plans/plans.controller.ts:97",{"_index":849,"title":{},"body":{"controllers/PlanController.html":{}}}],["src/controller/plans/plans.module.ts",{"_index":884,"title":{},"body":{"modules/PlanModule.html":{}}}],["src/controller/plans/plans.service.ts",{"_index":887,"title":{},"body":{"injectables/PlanService.html":{},"coverage.html":{}}}],["src/controller/plans/plans.service.ts:118",{"_index":915,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:133",{"_index":894,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:152",{"_index":926,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:183",{"_index":923,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:20",{"_index":901,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:203",{"_index":909,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:42",{"_index":896,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:75",{"_index":912,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:87",{"_index":904,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:99",{"_index":919,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/user/user.controller.ts",{"_index":1064,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/controller/user/user.controller.ts:112",{"_index":1091,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user/user.controller.ts:130",{"_index":1094,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user/user.controller.ts:24",{"_index":1088,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user/user.controller.ts:47",{"_index":1076,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user/user.controller.ts:74",{"_index":1072,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user/user.controller.ts:93",{"_index":1084,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user/user.module.ts",{"_index":1142,"title":{},"body":{"modules/UserModule.html":{}}}],["src/controller/user/user.service.ts",{"_index":1144,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/controller/user/user.service.ts:13",{"_index":1153,"title":{},"body":{"injectables/UserService.html":{}}}],["src/controller/user/user.service.ts:30",{"_index":1156,"title":{},"body":{"injectables/UserService.html":{}}}],["src/controller/user/user.service.ts:47",{"_index":1151,"title":{},"body":{"injectables/UserService.html":{}}}],["src/controller/user/user.service.ts:63",{"_index":1162,"title":{},"body":{"injectables/UserService.html":{}}}],["src/controller/user/user.service.ts:79",{"_index":1159,"title":{},"body":{"injectables/UserService.html":{}}}],["src/dto/interface.dto.ts",{"_index":176,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["src/dto/interface.dto.ts:100",{"_index":428,"title":{},"body":{"classes/EmailResetDto.html":{}}}],["src/dto/interface.dto.ts:110",{"_index":831,"title":{},"body":{"classes/PassResPageDto.html":{}}}],["src/dto/interface.dto.ts:117",{"_index":833,"title":{},"body":{"classes/PassResPageDto.html":{}}}],["src/dto/interface.dto.ts:124",{"_index":832,"title":{},"body":{"classes/PassResPageDto.html":{}}}],["src/dto/interface.dto.ts:13",{"_index":314,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/dto/interface.dto.ts:134",{"_index":277,"title":{},"body":{"classes/CardDto.html":{}}}],["src/dto/interface.dto.ts:141",{"_index":278,"title":{},"body":{"classes/CardDto.html":{}}}],["src/dto/interface.dto.ts:149",{"_index":276,"title":{},"body":{"classes/CardDto.html":{}}}],["src/dto/interface.dto.ts:157",{"_index":274,"title":{},"body":{"classes/CardDto.html":{}}}],["src/dto/interface.dto.ts:164",{"_index":279,"title":{},"body":{"classes/CardDto.html":{}}}],["src/dto/interface.dto.ts:171",{"_index":273,"title":{},"body":{"classes/CardDto.html":{}}}],["src/dto/interface.dto.ts:178",{"_index":275,"title":{},"body":{"classes/CardDto.html":{}}}],["src/dto/interface.dto.ts:188",{"_index":878,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/dto/interface.dto.ts:195",{"_index":877,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/dto/interface.dto.ts:202",{"_index":879,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/dto/interface.dto.ts:209",{"_index":880,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/dto/interface.dto.ts:21",{"_index":316,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/dto/interface.dto.ts:216",{"_index":876,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/dto/interface.dto.ts:223",{"_index":875,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/dto/interface.dto.ts:248",{"_index":651,"title":{},"body":{"classes/ExpenseDto.html":{}}}],["src/dto/interface.dto.ts:255",{"_index":649,"title":{},"body":{"classes/ExpenseDto.html":{}}}],["src/dto/interface.dto.ts:262",{"_index":650,"title":{},"body":{"classes/ExpenseDto.html":{}}}],["src/dto/interface.dto.ts:269",{"_index":652,"title":{},"body":{"classes/ExpenseDto.html":{}}}],["src/dto/interface.dto.ts:276",{"_index":653,"title":{},"body":{"classes/ExpenseDto.html":{}}}],["src/dto/interface.dto.ts:287",{"_index":186,"title":{},"body":{"classes/BudgetDto.html":{}}}],["src/dto/interface.dto.ts:29",{"_index":315,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/dto/interface.dto.ts:294",{"_index":185,"title":{},"body":{"classes/BudgetDto.html":{}}}],["src/dto/interface.dto.ts:306",{"_index":767,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:313",{"_index":769,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:320",{"_index":764,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:327",{"_index":771,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:334",{"_index":772,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:341",{"_index":766,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:348",{"_index":770,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:355",{"_index":765,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:362",{"_index":768,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:37",{"_index":319,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/dto/interface.dto.ts:374",{"_index":321,"title":{},"body":{"classes/DeleteDto.html":{}}}],["src/dto/interface.dto.ts:381",{"_index":320,"title":{},"body":{"classes/DeleteDto.html":{}}}],["src/dto/interface.dto.ts:389",{"_index":997,"title":{},"body":{"classes/ProfileUpdateDto.html":{}}}],["src/dto/interface.dto.ts:392",{"_index":996,"title":{},"body":{"classes/ProfileUpdateDto.html":{}}}],["src/dto/interface.dto.ts:45",{"_index":318,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/dto/interface.dto.ts:52",{"_index":313,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/dto/interface.dto.ts:59",{"_index":317,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/dto/interface.dto.ts:71",{"_index":820,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/dto/interface.dto.ts:78",{"_index":819,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/dto/interface.dto.ts:89",{"_index":1062,"title":{},"body":{"classes/TokenDto.html":{}}}],["src/main.ts",{"_index":1225,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/model/expense.model",{"_index":423,"title":{},"body":{"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["src/model/expense.model.ts",{"_index":717,"title":{},"body":{"interfaces/IExpense.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/model/plan.model.ts",{"_index":724,"title":{},"body":{"interfaces/IPlan.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/model/user.model.ts",{"_index":727,"title":{},"body":{"interfaces/IUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/scheduler/schedule.module.ts",{"_index":1002,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["src/scheduler/schedule.service.ts",{"_index":1016,"title":{},"body":{"injectables/ScheduleService.html":{},"coverage.html":{}}}],["src/scheduler/schedule.service.ts:12",{"_index":1022,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["src/scheduler/schedule.service.ts:20",{"_index":1023,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["src/scheduler/schedule.service.ts:42",{"_index":1026,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["src/scheduler/schedule.service.ts:47",{"_index":1024,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["src/utils/encryption.ts",{"_index":1231,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/utils/ravepay.ts",{"_index":1238,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/validation/validate.service.ts",{"_index":1176,"title":{},"body":{"injectables/ValidateService.html":{},"coverage.html":{}}}],["src/validation/validate.service.ts:20",{"_index":1182,"title":{},"body":{"injectables/ValidateService.html":{}}}],["src/validation/validate.service.ts:8",{"_index":1180,"title":{},"body":{"injectables/ValidateService.html":{}}}],["stands",{"_index":190,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["start",{"_index":1316,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1319,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1321,"title":{},"body":{"index.html":{}}}],["started",{"_index":1296,"title":{"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":1285,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":1198,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":1105,"title":{},"body":{"controllers/UserController.html":{}}}],["still",{"_index":442,"title":{},"body":{"injectables/EmailService.html":{}}}],["stored",{"_index":1073,"title":{},"body":{"controllers/UserController.html":{}}}],["strategy",{"_index":779,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":459,"title":{},"body":{"injectables/EmailService.html":{},"license.html":{}}}],["sublicense",{"_index":1362,"title":{},"body":{"license.html":{}}}],["submits",{"_index":371,"title":{},"body":{"controllers/EmailController.html":{}}}],["substantial",{"_index":1374,"title":{},"body":{"license.html":{}}}],["succesfully",{"_index":344,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["success",{"_index":1132,"title":{},"body":{"controllers/UserController.html":{}}}],["successful",{"_index":513,"title":{},"body":{"injectables/EmailService.html":{},"controllers/PlanController.html":{}}}],["successfull",{"_index":994,"title":{},"body":{"injectables/PlanService.html":{}}}],["successfully",{"_index":358,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":804,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["supplied",{"_index":898,"title":{},"body":{"injectables/PlanService.html":{}}}],["support",{"_index":1401,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":752,"title":{},"body":{"interfaces/IUser.html":{}}}],["svg",{"_index":1402,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1277,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":1244,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1243,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":897,"title":{},"body":{"injectables/PlanService.html":{}}}],["target",{"_index":237,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["targetamount",{"_index":238,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["team@savelite.com",{"_index":552,"title":{},"body":{"injectables/EmailService.html":{}}}],["template",{"_index":455,"title":{},"body":{"injectables/EmailService.html":{}}}],["test",{"_index":1324,"title":{},"body":{"index.html":{}}}],["test:covstay",{"_index":1327,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1326,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1323,"title":{},"body":{"index.html":{}}}],["text",{"_index":547,"title":{},"body":{"injectables/EmailService.html":{}}}],["theme",{"_index":523,"title":{},"body":{"injectables/EmailService.html":{}}}],["then((payload",{"_index":518,"title":{},"body":{"injectables/EmailService.html":{}}}],["then((user",{"_index":496,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.agenda.define('daily_plan",{"_index":1033,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.agenda.define('monthly_plan",{"_index":1041,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.agenda.define('weekly_plan",{"_index":1040,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.agenda.every('*/1",{"_index":1047,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.agenda.every('0",{"_index":1050,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.authservice.login(req.user",{"_index":1110,"title":{},"body":{"controllers/UserController.html":{}}}],["this.authservice.validateuser(data",{"_index":818,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.calculateplan(body",{"_index":933,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.createjob",{"_index":1029,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.decryptcard(doc",{"_index":976,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.emailservice.isuseridvalid(id",{"_index":405,"title":{},"body":{"controllers/EmailController.html":{}}}],["this.emailservice.receivenewpassword(body",{"_index":410,"title":{},"body":{"controllers/EmailController.html":{}}}],["this.emailservice.sendpasswordresetemail(mail.email",{"_index":396,"title":{},"body":{"controllers/EmailController.html":{}}}],["this.encryptcard(res",{"_index":989,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.errorhandler('amount",{"_index":944,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.errorhandler('invalid",{"_index":704,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{}}}],["this.errorhandler('plan",{"_index":995,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.errorhandler('wrong",{"_index":943,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.errorhandler(`${body.duration",{"_index":956,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.errorhandler(err",{"_index":693,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{}}}],["this.errorhandler(error",{"_index":977,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.expensemodel",{"_index":699,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["this.expensemodel.find",{"_index":690,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["this.expensemodel.findbyidandremove",{"_index":706,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["this.expensemodel.findone",{"_index":712,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["this.expensemodel.findoneandupdate",{"_index":696,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["this.expservice.addexpense(body",{"_index":632,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.expservice.addimage(id",{"_index":645,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.expservice.allbudget(req.user",{"_index":621,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.expservice.delexpense(bid",{"_index":639,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.expservice.delimage(bid",{"_index":648,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.expservice.editbudget(body",{"_index":642,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.expservice.editexpense(bid",{"_index":636,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.expservice.removebudget(req.user",{"_index":629,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.expservice.setbudget(body",{"_index":625,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.hidedetails(this.decryptcard(doc",{"_index":936,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.hidedetails(this.decryptcard(element",{"_index":981,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.jwtservice.sign",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.notificationoptions",{"_index":312,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["this.planmodel(this.encryptcard(plandetails",{"_index":934,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.planmodel.find",{"_index":978,"title":{},"body":{"injectables/PlanService.html":{},"injectables/ScheduleService.html":{}}}],["this.planmodel.findbyid(id",{"_index":988,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.planmodel.findone",{"_index":975,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.planmodel.findoneanddelete",{"_index":993,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.planmodel.findoneandupdate",{"_index":992,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.planservice.allplans(req.user",{"_index":868,"title":{},"body":{"controllers/PlanController.html":{}}}],["this.planservice.create(body",{"_index":863,"title":{},"body":{"controllers/PlanController.html":{}}}],["this.planservice.delete(req.user",{"_index":874,"title":{},"body":{"controllers/PlanController.html":{}}}],["this.planservice.getcard(id",{"_index":866,"title":{},"body":{"controllers/PlanController.html":{}}}],["this.planservice.update(req.user",{"_index":871,"title":{},"body":{"controllers/PlanController.html":{}}}],["this.resetpasswordtemplate(user",{"_index":554,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.saveupdate(plan",{"_index":991,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.searchplans('daily",{"_index":1059,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.sendemail(user",{"_index":492,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.usermodel",{"_index":1163,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(user._id).then((doc",{"_index":1169,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{}}}],["this.usermodel.findoneandupdate",{"_index":510,"title":{},"body":{"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["this.userservice.changeprofileimage(req.user",{"_index":1138,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.createuser(data",{"_index":1104,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getinfo(req.user",{"_index":1127,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.savetoken(req.user",{"_index":1130,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateprofile(req.user",{"_index":1135,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validate.loginvalidation(data",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["time",{"_index":950,"title":{},"body":{"injectables/PlanService.html":{}}}],["timestamps",{"_index":722,"title":{},"body":{"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["timetolive",{"_index":293,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["token",{"_index":214,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["tokendto",{"_index":212,"title":{"classes/TokenDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["tort",{"_index":1395,"title":{},"body":{"license.html":{}}}],["touch",{"_index":1328,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":191,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["trgamount",{"_index":939,"title":{},"body":{"injectables/PlanService.html":{}}}],["trim",{"_index":736,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["triple",{"_index":499,"title":{},"body":{"injectables/EmailService.html":{}}}],["true",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"classes/TokenDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":395,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{}}}],["tslint:disable",{"_index":195,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{}}}],["type",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ui",{"_index":1278,"title":{},"body":{"dependencies.html":{}}}],["un",{"_index":913,"title":{},"body":{"injectables/PlanService.html":{}}}],["unauthorizedexception",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('user",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":741,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":204,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":1322,"title":{},"body":{"index.html":{}}}],["update",{"_index":856,"title":{},"body":{"controllers/PlanController.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{}}}],["update(user",{"_index":925,"title":{},"body":{"injectables/PlanService.html":{}}}],["updated",{"_index":857,"title":{},"body":{"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["updateinfo",{"_index":1068,"title":{},"body":{"controllers/UserController.html":{}}}],["updateinfo(@request",{"_index":1134,"title":{},"body":{"controllers/UserController.html":{}}}],["updateinfo(req",{"_index":1089,"title":{},"body":{"controllers/UserController.html":{}}}],["updatepassword",{"_index":338,"title":{},"body":{"controllers/EmailController.html":{}}}],["updatepassword(@body",{"_index":409,"title":{},"body":{"controllers/EmailController.html":{}}}],["updatepassword(body",{"_index":365,"title":{},"body":{"controllers/EmailController.html":{}}}],["updateplan",{"_index":840,"title":{},"body":{"controllers/PlanController.html":{}}}],["updateplan(@param('id",{"_index":870,"title":{},"body":{"controllers/PlanController.html":{}}}],["updateplan(id",{"_index":853,"title":{},"body":{"controllers/PlanController.html":{}}}],["updateprofile",{"_index":1149,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofile(user",{"_index":1161,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofileimage",{"_index":1069,"title":{},"body":{"controllers/UserController.html":{}}}],["updateprofileimage(@request",{"_index":1137,"title":{},"body":{"controllers/UserController.html":{}}}],["updateprofileimage(req",{"_index":1092,"title":{},"body":{"controllers/UserController.html":{}}}],["updating",{"_index":928,"title":{},"body":{"injectables/PlanService.html":{}}}],["url",{"_index":265,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["use",{"_index":537,"title":{},"body":{"injectables/EmailService.html":{},"interfaces/IUser.html":{},"license.html":{}}}],["used",{"_index":473,"title":{},"body":{"injectables/EmailService.html":{},"interfaces/IUser.html":{},"injectables/UserService.html":{}}}],["usefindandmodify",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/ScheduleModule.html":{}}}],["useguards",{"_index":609,"title":{},"body":{"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('jwt",{"_index":618,"title":{},"body":{"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('local",{"_index":1107,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@delete(':bid/:id')@apicreatedresponse({description",{"_index":580,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@delete(':id')@apicreatedresponse({description",{"_index":848,"title":{},"body":{"controllers/PlanController.html":{}}}],["useguards(undefined)@delete('budget/image/:bid/:id')@apicreatedresponse({description",{"_index":585,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@get('budgets')@apiokresponse({description",{"_index":575,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@get('card/:id')@apiokresponse({description",{"_index":851,"title":{},"body":{"controllers/PlanController.html":{}}}],["useguards(undefined)@get('profile')@apiokresponse({description",{"_index":1071,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get()@apiokresponse({description",{"_index":842,"title":{},"body":{"controllers/PlanController.html":{}}}],["useguards(undefined)@post(':bid/:id')@apicreatedresponse({description",{"_index":595,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@post(':id')@apicreatedresponse({description",{"_index":570,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@post('budget')@apicreatedresponse({description",{"_index":598,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@post('budget/edit/:id')@apicreatedresponse({description",{"_index":589,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@post('budget/image/:id')@apicreatedresponse({description",{"_index":606,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@post('del",{"_index":602,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@post('image')@apicreatedresponse({description",{"_index":1093,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@post('login')@apicreatedresponse({description",{"_index":1075,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@post('token')@apicreatedresponse({description",{"_index":1083,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@post('update')@apicreatedresponse({description",{"_index":1090,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@post()@apicreatedresponse({description",{"_index":845,"title":{},"body":{"controllers/PlanController.html":{}}}],["useguards(undefined)@put(':id')@apicreatedresponse({description",{"_index":854,"title":{},"body":{"controllers/PlanController.html":{}}}],["usenewurlparser",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/ScheduleModule.html":{}}}],["user",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user's",{"_index":457,"title":{},"body":{"injectables/EmailService.html":{},"interfaces/IUser.html":{}}}],["user._id",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{}}}],["user.controller",{"_index":1143,"title":{},"body":{"modules/UserModule.html":{}}}],["user.createdat",{"_index":487,"title":{},"body":{"injectables/EmailService.html":{}}}],["user.email",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{}}}],["user.fullname",{"_index":530,"title":{},"body":{"injectables/EmailService.html":{}}}],["user.id",{"_index":692,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["user.ismodified('password",{"_index":755,"title":{},"body":{"interfaces/IUser.html":{}}}],["user.password",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"interfaces/IUser.html":{}}}],["user.save",{"_index":1168,"title":{},"body":{"injectables/UserService.html":{}}}],["user.service",{"_index":1098,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":421,"title":{},"body":{"modules/EmailModule.html":{}}}],["user/user.service",{"_index":659,"title":{},"body":{"modules/ExpenseModule.html":{},"modules/PlanModule.html":{}}}],["user_name",{"_index":205,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"injectables/ValidateService.html":{}}}],["usercontroller",{"_index":1063,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdetails",{"_index":1114,"title":{},"body":{"controllers/UserController.html":{}}}],["usermodel",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ModelService.html":{}}}],["usermodule",{"_index":55,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"miscellaneous/variables.html":{}}}],["usernamefield",{"_index":815,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":1078,"title":{},"body":{"controllers/UserController.html":{}}}],["userschema",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"interfaces/IUser.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema.methods.checkpassword",{"_index":757,"title":{},"body":{"interfaces/IUser.html":{}}}],["userschema.pre('save",{"_index":749,"title":{},"body":{"interfaces/IUser.html":{}}}],["userservice",{"_index":658,"title":{"injectables/UserService.html":{}},"body":{"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":448,"title":{},"body":{"injectables/EmailService.html":{}}}],["utils/encryption",{"_index":931,"title":{},"body":{"injectables/PlanService.html":{}}}],["utils/ravepay",{"_index":1028,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["valid",{"_index":443,"title":{},"body":{"injectables/EmailService.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/PlanService.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["validate(payload",{"_index":775,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(usernamefield",{"_index":812,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validated",{"_index":350,"title":{},"body":{"controllers/EmailController.html":{},"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["validates",{"_index":362,"title":{},"body":{"controllers/EmailController.html":{}}}],["validateservice",{"_index":86,"title":{"injectables/ValidateService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ValidateService.html":{},"coverage.html":{},"overview.html":{}}}],["validateuser",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(data",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":1186,"title":{},"body":{"injectables/ValidateService.html":{}}}],["validation/validate.service",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["validator",{"_index":735,"title":{},"body":{"interfaces/IUser.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["validator.isemail",{"_index":738,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["validpass",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":290,"title":{},"body":{"injectables/CloudNotificationService.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":298,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["variable",{"_index":198,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["variables",{"_index":1407,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verified",{"_index":798,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["verifies",{"_index":446,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{}}}],["version",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/variables.html":{}}}],["want",{"_index":746,"title":{},"body":{"interfaces/IUser.html":{}}}],["warranties",{"_index":1381,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1377,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1317,"title":{},"body":{"index.html":{}}}],["way",{"_index":789,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["we're",{"_index":792,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["week",{"_index":1045,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["weekly",{"_index":244,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["weekly_plan",{"_index":1052,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["weeks",{"_index":954,"title":{},"body":{"injectables/PlanService.html":{}}}],["whether",{"_index":1393,"title":{},"body":{"license.html":{}}}],["width",{"_index":259,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["withdrawal",{"_index":240,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["withdrawaldate",{"_index":241,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["within",{"_index":538,"title":{},"body":{"injectables/EmailService.html":{}}}],["without",{"_index":1353,"title":{},"body":{"license.html":{}}}],["works",{"_index":791,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["worry",{"_index":542,"title":{},"body":{"injectables/EmailService.html":{}}}],["x1f33b",{"_index":553,"title":{},"body":{"injectables/EmailService.html":{}}}],["yn2x2tw8dn3kyegrrqhlmr952cfnuy2e",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ping\n                            \n                            \n                                show\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ping\n                        \n                        \n                    \n                \n            \n            \n                \nping()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('ping')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            show\n                        \n                        \n                    \n                \n            \n            \n                \nshow()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Render('welcome')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { 'version': any; 'download-link': any; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Render } from '@nestjs/common';\nimport { configKeys } from './config/config';\n\n@Controller()\nexport class AppController {\n\n  @Get()\n  @Render('welcome')\n  show() {\n    return {\n      'version': configKeys.version,\n      'download-link': configKeys.DOWNLOAD_LINK,\n    };\n  }\n\n  @Get('ping')\n  ping() {\n    return 'Awake';\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nExpenseModule\n\nExpenseModule\n\nAppModule -->\n\nExpenseModule->AppModule\n\n\n\n\n\nPlanModule\n\nPlanModule\n\nAppModule -->\n\nPlanModule->AppModule\n\n\n\n\n\nScheduleModule\n\nScheduleModule\n\nAppModule -->\n\nScheduleModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            EmailModule\n                        \n                        \n                            ExpenseModule\n                        \n                        \n                            PlanModule\n                        \n                        \n                            ScheduleModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { UserModule } from './controller/user/user.module';\nimport { PlanModule } from './controller/plans/plans.module';\nimport { ExpenseModule } from './controller/expense/expense.module';\nimport { EmailModule } from './controller/email/email.module';\nimport { configKeys } from './config/config';\nimport { ScheduleModule } from './scheduler/schedule.module';\n\n@Module({\n  imports: [MongooseModule.forRoot(configKeys.MONGODB_URI, {\n    useNewUrlParser: true,\n    useFindAndModify: false,\n  }),\n  AuthModule, EmailModule, UserModule, PlanModule, ExpenseModule, ScheduleModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nValidateService\n\nValidateService\n\nAuthModule -->\n\nValidateService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            ValidateService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AuthService } from './auth.service';\nimport { PlanModule } from './../controller/plans/plans.module';\nimport { EmailModule } from './../controller/email/email.module';\nimport { UserModule } from '../controller/user/user.module';\nimport { UserSchema } from '../model/user.model';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ValidateService } from '../validation/validate.service';\nimport { ExpenseModule } from './../controller/expense/expense.module';\nimport { configKeys } from './../config/config';\n\n@Module({\n  imports: [\n    forwardRef(() => UserModule),\n    forwardRef(() => EmailModule),\n    forwardRef(() => PlanModule),\n    forwardRef(() => ExpenseModule),\n    PassportModule.register({defaultStrategy: 'jwt', session: false}),\n    JwtModule.register({\n      secret: configKeys.JWT_SECRET,\n      signOptions: {expiresIn: '1h'},\n    }),\n    MongooseModule.forFeature([{name: 'User', schema: UserSchema}]),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy, ValidateService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, validate: ValidateService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        validate\n                                                  \n                                                        \n                                                                        ValidateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(data: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, BadRequestException, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { ValidateService } from '../validation/validate.service';\nimport { Model } from 'mongoose';\nimport * as bcrypt from 'bcryptjs';\nimport { IUser } from '../model/user.model';\n\n@Injectable()\nexport class AuthService {\n\n    constructor(\n        @InjectModel('User') private readonly userModel: Model,\n        private readonly validate: ValidateService,\n        private jwtService: JwtService,\n    ) { }\n\n    public async validateUser(data: { username: string, password: string }): Promise {\n        // validate data before checking for Admin\n        const { error } = this.validate.loginValidation(data);\n        if (error) {\n            throw new BadRequestException(error.details[0].message);\n        }\n        // check if the Admin is already in database\n        const user = await this.userModel.findOne({ username: data.username });\n        if (!user) {\n            throw new UnauthorizedException('user not found');\n        }\n\n        // check if password is correct\n        const validPass = await bcrypt.compare(data.password, user.password);\n        if (!validPass) {\n            throw new BadRequestException('Email or password is invalid');\n        }\n        return user;\n    }\n\n    login(user: any) {\n        return this.jwtService.sign({\n            id: user._id,\n            email: user.email,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BudgetDto.html":{"url":"classes/BudgetDto.html","title":"class - BudgetDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BudgetDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                budget\n                            \n                            \n                                    Readonly\n                                budgetName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            budget\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: Number, description: 'budget amount', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:294\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            budgetName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'budget name', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:287\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CardDto.html":{"url":"classes/CardDto.html","title":"class - CardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                amount\n                            \n                            \n                                    Readonly\n                                card_no\n                            \n                            \n                                    Readonly\n                                cvv\n                            \n                            \n                                    Readonly\n                                expiry_date\n                            \n                            \n                                    Readonly\n                                firstname\n                            \n                            \n                                    Readonly\n                                lastname\n                            \n                            \n                                    Readonly\n                                pin\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            amount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'amount', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:171\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            card_no\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: '15 digit card number', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:157\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            cvv\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'cvv', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:178\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            expiry_date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'card expiry date', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:149\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'first name attached to card', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:134\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lastname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'last name attached to card', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:141\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            pin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'card 4 digit pin', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:164\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudNotificationService.html":{"url":"injectables/CloudNotificationService.html","title":"injectable - CloudNotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CloudNotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/cloud-notification.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                notificationOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendNotification\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotification(registrationToken: string, message: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/cloud-notification.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            notificationOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        priority: 'high',\n        timeToLive: 60 * 60 * 24,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/controller/cloud-notification.service.ts:13\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import * as admin from 'firebase-admin';\nimport { Injectable } from '@nestjs/common';\n// tslint:disable-next-line: no-var-requires\nconst serviceAccount = require('../../savelite-c8f57-firebase-adminsdk.json');\n\nconst firebaseApp = admin.initializeApp({\n    credential: admin.credential.cert(serviceAccount),\n    databaseURL: 'https://savelite-c8f57.firebaseio.com',\n});\n\n@Injectable()\nexport class CloudNotificationService {\n    private notificationOptions = {\n        priority: 'high',\n        timeToLive: 60 * 60 * 24,\n    };\n\n    async sendNotification(registrationToken: string, message: any) {\n        return await admin.messaging().sendToDevice(registrationToken, message, this.notificationOptions);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDto.html":{"url":"classes/CreateDto.html","title":"class - CreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n            \n                Description\n            \n            \n                DTO stands for Data Transfer Object\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                first_name\n                            \n                            \n                                    Readonly\n                                last_name\n                            \n                            \n                                    Readonly\n                                middle_name\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                phone_no\n                            \n                            \n                                    Readonly\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user email address', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            first_name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user first name', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            last_name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user last name', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            middle_name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user middle name', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user password', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            phone_no\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user mobile number', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            user_name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'unique username', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:37\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteDto.html":{"url":"classes/DeleteDto.html","title":"class - DeleteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                budgetId\n                            \n                            \n                                    Readonly\n                                images\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            budgetId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'budget id', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:381\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            images\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ImageDto[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'image list to be deleted', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:374\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailController.html":{"url":"controllers/EmailController.html","title":"controller - EmailController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/email/email.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email\n            \n\n            \n                Description\n            \n            \n                the email controller is responsible for handling all kinds of requests \nconcerning client email in the api.\noperations include password reset functionality and confirmation\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resetLink\n                            \n                            \n                                    Async\n                                sendEmail\n                            \n                            \n                                    Async\n                                updatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            resetLink\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetLink(id: string, token: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('link/:id/:token')@ApiOkResponse({description: 'The resource has been succesfully returned'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/email/email.controller.ts:49\n                \n            \n\n\n            \n                \n                    After the user clicks the link sent to their email,\nuser is validated then a page where they can input their new\npassord details is displayed\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user id\n\n                                    \n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user unique token for authentication\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        response body\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmail(mail: EmailResetDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/email/email.controller.ts:29\n                \n            \n\n\n            \n                \n                    retrieves the email sent by the client, validates it\nthen sends a password reset link to the client's mail\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                                EmailResetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user email\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassword(body: PassResPageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/email/email.controller.ts:69\n                \n            \n\n\n            \n                \n                    this endpoint is called immediately after the user submits\nhis/her new passord details\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                PassResPageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        json data containing user id, token and new password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Res, NotFoundException, Param } from '@nestjs/common';\nimport { Response } from 'express';\nimport { EmailResetDto, PassResPageDto } from './../../dto/interface.dto';\nimport { EmailService } from './email.service';\nimport { ApiUseTags, ApiOkResponse, ApiForbiddenResponse, ApiNotFoundResponse, ApiCreatedResponse } from '@nestjs/swagger';\n\n/**\n * the email controller is responsible for handling all kinds of requests \n * concerning client email in the api.\n * \n * operations include password reset functionality and confirmation\n */\n@ApiUseTags('email')\n@Controller('email')\nexport class EmailController {\n    constructor(\n        private readonly emailService: EmailService,\n    ) { }\n\n    /**\n     * retrieves the email sent by the client, validates it\n     * then sends a password reset link to the client's mail\n     * @param mail user email\n     */\n    @Post()\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async sendEmail(@Body() mail: EmailResetDto) {\n        try {\n            return await this.emailService.sendPasswordResetEmail(mail.email);\n        } catch (error) {\n            throw new NotFoundException(error);\n        }\n    }\n\n    /**\n     * After the user clicks the link sent to their email,\n     * user is validated then a page where they can input their new\n     * passord details is displayed\n     * @param res response body\n     * @param id user id\n     * @param token user unique token for authentication\n     */\n    @Get('link/:id/:token')\n    @ApiOkResponse({description: 'The resource has been succesfully returned'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async resetLink(@Param('id') id: string, @Param('token') token: string, @Res() res: Response) {\n        try {\n            const authenticate = await this.emailService.isUserIdValid(id, token);\n            if (authenticate) {\n                return res.render('reset-password', {id, token});\n            }\n        } catch (error) {\n            return res.render('404');\n        }\n    }\n\n    /**\n     * this endpoint is called immediately after the user submits\n     * his/her new passord details\n     * @param body json data containing user id, token and new password\n     */\n    @Post('reset')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async updatePassword(@Body() body: PassResPageDto) {\n        try {\n            return await this.emailService.receiveNewPassword(body);\n        } catch (error) {\n            throw new NotFoundException(error);\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_imports\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nPlanModule\n\nPlanModule\n\n\n\nEmailModule\n\nEmailModule\n\nEmailModule -->\n\nPlanModule->EmailModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nEmailModule -->\n\nUserModule->EmailModule\n\n\n\n\n\nCloudNotificationService \n\nCloudNotificationService \n\nCloudNotificationService  -->\n\nEmailModule->CloudNotificationService \n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nCloudNotificationService\n\nCloudNotificationService\n\nEmailModule -->\n\nCloudNotificationService->EmailModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/controller/email/email.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudNotificationService\n                        \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PlanModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CloudNotificationService\n                        \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthModule } from './../../auth/auth.module';\nimport { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserSchema } from './../../model/user.model';\nimport { EmailController } from './email.controller';\nimport { plansSchema } from './../../model/plan.model';\nimport { PlanModule } from './../plans/plans.module';\nimport { UserModule } from './../user/user.module';\nimport { EmailService } from './email.service';\nimport { expenseSchema } from 'src/model/expense.model';\nimport { CloudNotificationService } from './../cloud-notification.service';\n\n@Module({\n    imports: [\n        forwardRef(() => AuthModule), UserModule, PlanModule,\n        MongooseModule.forFeature([\n            {name: 'User', schema: UserSchema},\n            {name: 'Plans', schema: plansSchema},\n            {name: 'Expense', schema: expenseSchema},\n        ]),\n        PassportModule.register({defaultStrategy: 'jwt', session: false}),\n    ],\n    exports: [EmailService, CloudNotificationService],\n    controllers: [EmailController],\n    providers: [EmailService, CloudNotificationService],\n})\n\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailResetDto.html":{"url":"classes/EmailResetDto.html","title":"class - EmailResetDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailResetDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user mail address', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:100\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/email/email.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ModelService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isUserIdValid\n                            \n                            \n                                    Public\n                                receiveNewPassword\n                            \n                            \n                                    Private\n                                resetPasswordTemplate\n                            \n                            \n                                    Private\n                                    Async\n                                sendEmail\n                            \n                            \n                                    Public\n                                    Async\n                                sendPasswordResetEmail\n                            \n                            \n                                    Protected\n                                errorHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isUserIdValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isUserIdValid(id: string, token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/email/email.service.ts:85\n                \n            \n\n\n            \n                \n                    determines if user token is authentic and still valid\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user id\n\n                                    \n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            receiveNewPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    receiveNewPassword(body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/email/email.service.ts:56\n                \n            \n\n\n            \n                \n                    verifies token, encrypts the new password using bcrypt.js\nsaves the encrypted password in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        json data containing user id, token and new password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            resetPasswordTemplate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPasswordTemplate(user: any, url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/email/email.service.ts:101\n                \n            \n\n\n            \n                \n                    creates a template containing the url hich is sent to the user's mail.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full user info from database\n\n                                    \n                                \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        url for password reset page\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { to: any; from: string; subject: string; html: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            sendEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmail(user: any, url: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/email/email.service.ts:139\n                \n            \n\n\n            \n                \n                    sends email to the user using sendgrid mailer\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user info\n\n                                    \n                                \n                                \n                                    url\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        url for password reset page\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            sendPasswordResetEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPasswordResetEmail(email: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/email/email.service.ts:36\n                \n            \n\n\n            \n                \n                    Service method\nsearches database for user email, if email is not found an error is returned\nusing jsonwebTokens a token with an expiry date of 1hour is\ngenerated.\nthe generated token and unique user id is used to generate a\nurl link which expires in an hour.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user email\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        url link or an error\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            errorHandler\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorHandler(err: any)\n                \n            \n\n\n            \n                \n                    Inherited from         ModelService\n\n                \n            \n            \n                \n                        Defined in         ModelService:18\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { msg: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ModelService } from '../model.service';\nimport * as jwt from 'jsonwebtoken';\nimport * as bcrypt from 'bcryptjs';\nimport { configKeys } from './../../config/config';\nimport * as sgMail from '@sendgrid/mail';\nimport * as MailGen from 'mailgen';\n@Injectable()\nexport class EmailService extends ModelService {\n\n    /**\n     * Service method\n     *\n     * searches database for user email, if email is not found an error is returned\n     * using jsonwebTokens a token with an expiry date of 1hour is\n     * generated.\n     * the generated token and unique user id is used to generate a\n     * url link which expires in an hour.\n     * @param email user email\n     * @returns url link or an error\n     */\n    public async sendPasswordResetEmail(email: any) {\n        try {\n            const user = await this.userModel.findOne({ email });\n            const secret = `${user.password}-${user.createdAt}`;\n            const token = jwt.sign({ id: user._id }, secret, {\n                expiresIn: 3600, // 1 hour\n            });\n            const url = `${configKeys.EMAIL_URL}${user._id}/${token}`;\n            return await this.sendEmail(user, url);\n            // return {url};\n        } catch (error) {\n            return error;\n        }\n    }\n\n    /**\n     * verifies token, encrypts the new password using bcrypt.js\n     * saves the encrypted password in the database\n     * @param body json data containing user id, token and new password\n     */\n    public receiveNewPassword(body: any) {\n        return new Promise((resolve, reject) => {\n            const { id, token, password } = body;\n            this.userModel.findOne({ _id: id }).then((user) => {\n                const secret = user.password + '-' + user.createdAt;\n                const payload: any = jwt.verify(token, secret);\n                // tslint:disable-next-line: triple-equals\n                if (payload.id == user._id) {\n                    bcrypt.genSalt(10, (err, salt) => {\n                        // Call error-handling middleware:\n                        if (err) { reject(err); }\n                        bcrypt.hash(password, salt, (er, hash) => {\n                            // Call error-handling middleware:\n                            if (err) { reject(er); }\n                            this.userModel.findOneAndUpdate({ _id: id }, { password: hash })\n                                .then(() => { resolve('Password change successful'); })\n                                .catch(e => reject(e));\n                        });\n                    });\n                } else { reject('wrong id'); }\n            }).catch((e) => { reject(e); });\n        });\n    }\n\n    /**\n     * determines if user token is authentic and still valid\n     * @param id user id\n     * @param token user token\n     */\n    public isUserIdValid(id: string, token: string): Promise {\n        return new Promise((resolve, reject) => {\n            this.userModel.findOne({ _id: id }).then((user) => {\n                const secret = user.password + '-' + user.createdAt;\n                return jwt.verify(token, secret);\n            }).then((payload) => {\n                resolve(true);\n            }).catch((err) => { reject(false); });\n        });\n    }\n\n    /**\n     * creates a template containing the url hich is sent to the user's mail.\n     * @param user full user info from database\n     * @param url url for password reset page\n     */\n    private resetPasswordTemplate(user: any, url: string) {\n        const mailGenerator = new MailGen({\n            theme: 'salted',\n            product: {\n                name: 'Savelite',\n                link: 'http://localhost:3000',\n                logo: 'http://localhost:3000/logo2.png',\n            },\n        });\n        const email = {\n            body: {\n                name: user.fullname,\n                intro: ['We heard that you lost your Savelite password. Sorry about that!', 'N/B: If you don’t use this link within 1 hour, it will expire.'],\n                action: {\n                    instructions: 'But don’t worry! You can use the following link to reset your password',\n                    button: {\n                        color: '#d19115',\n                        text: 'Reset Password',\n                        link: url,\n                    },\n                },\n                outro: 'Your friends at Savelite',\n            },\n        };\n        const emailTemplate = mailGenerator.generate(email);\n        return {\n            to: user.email,\n            from: 'team@savelite.com',\n            subject: '&#x1F33B; Savelite Password Reset &#x1F33B;',\n            html: emailTemplate,\n        };\n    }\n\n    /**\n     * sends email to the user using sendgrid mailer\n     * @param user user info\n     * @param url url for password reset page\n     */\n    private async sendEmail(user: any, url: any) {\n        try {\n            const msg = this.resetPasswordTemplate(user, url);\n            sgMail.setApiKey(configKeys.SENDGRID_KEY);\n            const mail = await sgMail.send(msg);\n        } catch (error) {\n            return error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExpenseController.html":{"url":"controllers/ExpenseController.html","title":"controller - ExpenseController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExpenseController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/expense/expense.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                expense\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addExpense\n                            \n                            \n                                    Async\n                                allBudget\n                            \n                            \n                                    Async\n                                deleteExpense\n                            \n                            \n                                    Async\n                                deleteImage\n                            \n                            \n                                    Async\n                                editBudget\n                            \n                            \n                                    Async\n                                editExpense\n                            \n                            \n                                    Async\n                                newBudget\n                            \n                            \n                                    Async\n                                removeBudget\n                            \n                            \n                                    Async\n                                saveImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addExpense\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addExpense(id: string, req, body: ExpenseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post(':id')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:80\n                \n            \n\n\n            \n                \n                    add an expense to the current budget\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget id\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                ExpenseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        body data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            allBudget\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    allBudget(id: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('budgets')@ApiOkResponse({description: 'The resource has been succesfully returned'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:25\n                \n            \n\n\n            \n                \n                    gets all created budgets\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget id\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteExpense\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteExpense(bId: string, id: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete(':bId/:id')@ApiCreatedResponse({description: 'The resource has successfully been deleted'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:119\n                \n            \n\n\n            \n                \n                    delete expense from a budget\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget id\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        expense id\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteImage(bId: string, id: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete('budget/image/:bId/:id')@ApiCreatedResponse({description: 'The resource has successfully been deleted'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:176\n                \n            \n\n\n            \n                \n                    remove image url from budget details\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget id\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        image id\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editBudget\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editBudget(id: string, body: BudgetDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('budget/edit/:id')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:138\n                \n            \n\n\n            \n                \n                    edit budget\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        busget id\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                BudgetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget detils\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editExpense\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editExpense(bId: string, id: string, req, body: ExpenseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post(':bId/:id')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:100\n                \n            \n\n\n            \n                \n                    edit expense\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget id\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        expense id\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                ExpenseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        expense details\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            newBudget\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newBudget(req, body: BudgetDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('budget')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:43\n                \n            \n\n\n            \n                \n                    create new budget\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                BudgetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeBudget\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeBudget(body: any, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('del-budget')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:61\n                \n            \n\n\n            \n                \n                    delete a budget\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget data\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            saveImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveImage(id: string, body: ImageDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('budget/image/:id')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:157\n                \n            \n\n\n            \n                \n                    adds an image url to budget data\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget id\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                ImageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        image details\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, Post, UseGuards, Body, Response, NotImplementedException, Put, Param, Delete } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ExpenseDto, BudgetDto, ImageDto } from './../../dto/interface.dto';\nimport { ExpenseService } from './expense.service';\nimport { ApiUseTags, ApiOkResponse, ApiForbiddenResponse, ApiNotFoundResponse, ApiCreatedResponse } from '@nestjs/swagger';\n\n@ApiUseTags('expense')\n@Controller('expense')\nexport class ExpenseController {\n\n    constructor(\n        private readonly expService: ExpenseService,\n    ) { }\n\n    /**\n     * gets all created budgets\n     * @param id budget id\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Get('budgets')\n    @ApiOkResponse({description: 'The resource has been succesfully returned'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async allBudget(@Param('id') id: string, @Request() req) {\n        try {\n            return await this.expService.allBudget(req.user, id);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * create new budget\n     * @param req request info\n     * @param body budget data\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post('budget')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async newBudget(@Request() req, @Body() body: BudgetDto) {\n        try {\n            return await this.expService.setBudget(body, req.user);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * delete a budget\n     * @param body budget data\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post('del-budget')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async removeBudget(@Body() body: any, @Request() req) {\n        try {\n            return await this.expService.removeBudget(req.user, body);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * add an expense to the current budget\n     * @param id budget id\n     * @param req request info\n     * @param body body data\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post(':id')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async addExpense(@Param('id') id: string, @Request() req, @Body() body: ExpenseDto) {\n        try {\n            return await this.expService.addExpense(body, req.user, id);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * edit expense\n     * @param bId budget id\n     * @param id expense id\n     * @param req request info\n     * @param body expense details\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post(':bId/:id')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async editExpense(@Param('bId') bId: string, @Param('id') id: string, @Request() req, @Body() body: ExpenseDto) {\n        try {\n            return await this.expService.editExpense(bId, body, req.user, id);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * delete expense from a budget\n     * @param bId budget id\n     * @param id expense id\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Delete(':bId/:id')\n    @ApiCreatedResponse({description: 'The resource has successfully been deleted'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async deleteExpense(@Param('bId') bId: string, @Param('id') id: string, @Request() req) {\n        try {\n            return await this.expService.delExpense(bId, id, req.user);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * edit budget\n     * @param id busget id\n     * @param body budget detils\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post('budget/edit/:id')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async editBudget(@Param('id') id: string, @Body() body: BudgetDto, @Request() req) {\n        try {\n            return await this.expService.editBudget(body, req.user, id);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * adds an image url to budget data\n     * @param id budget id\n     * @param body image details\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post('budget/image/:id')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async saveImage(@Param('id') id: string, @Body() body: ImageDto, @Request() req) {\n        try {\n            return await this.expService.addImage(id, body, req.user);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * remove image url from budget details\n     * @param bId budget id\n     * @param id image id\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Delete('budget/image/:bId/:id')\n    @ApiCreatedResponse({description: 'The resource has successfully been deleted'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async deleteImage(@Param('bId') bId: string, @Param('id') id: string, @Request() req) {\n        try {\n            return await this.expService.delImage(bId, id, req.user);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpenseDto.html":{"url":"classes/ExpenseDto.html","title":"class - ExpenseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpenseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                amount\n                            \n                            \n                                    Readonly\n                                category\n                            \n                            \n                                    Readonly\n                                date\n                            \n                            \n                                    Readonly\n                                descr\n                            \n                            \n                                    Readonly\n                                remark\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            amount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: Number, description: 'amount spent', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:255\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'expense category', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:262\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'date of expense', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:248\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            descr\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'expense description', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:269\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            remark\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'remarks', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:276\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExpenseModule.html":{"url":"modules/ExpenseModule.html","title":"module - ExpenseModule","body":"\n                   \n\n\n\n\n    Modules\n    ExpenseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExpenseModule\n\n\n\ncluster_ExpenseModule_exports\n\n\n\ncluster_ExpenseModule_providers\n\n\n\n\nCloudNotificationService \n\nCloudNotificationService \n\n\n\nExpenseService \n\nExpenseService \n\n\n\nExpenseModule\n\nExpenseModule\n\nCloudNotificationService  -->\n\nExpenseModule->CloudNotificationService \n\n\n\nExpenseService  -->\n\nExpenseModule->ExpenseService \n\n\n\n\n\nCloudNotificationService\n\nCloudNotificationService\n\nExpenseModule -->\n\nCloudNotificationService->ExpenseModule\n\n\n\n\n\nExpenseService\n\nExpenseService\n\nExpenseModule -->\n\nExpenseService->ExpenseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/controller/expense/expense.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudNotificationService\n                        \n                        \n                            ExpenseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExpenseController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CloudNotificationService\n                        \n                        \n                            ExpenseService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { plansSchema } from './../../model/plan.model';\nimport { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { UserSchema } from './../../model/user.model';\nimport { UserService } from './../user/user.service';\nimport { expenseSchema } from 'src/model/expense.model';\nimport { ExpenseService } from './expense.service';\nimport { ExpenseController } from './expense.controller';\nimport { CloudNotificationService } from './../cloud-notification.service';\n\n@Module({\n    imports: [\n        forwardRef(() => AuthModule),\n        MongooseModule.forFeature([\n            {name: 'User', schema: UserSchema},\n            {name: 'Plans', schema: plansSchema},\n            {name: 'Expense', schema: expenseSchema},\n        ]),\n        PassportModule.register({defaultStrategy: 'jwt', session: false}),\n    ],\n    exports: [ExpenseService, CloudNotificationService],\n    controllers: [ExpenseController],\n    providers: [ExpenseService, CloudNotificationService],\n})\n\nexport class ExpenseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExpenseService.html":{"url":"injectables/ExpenseService.html","title":"injectable - ExpenseService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExpenseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/expense/expense.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ModelService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                addExpense\n                            \n                            \n                                    Public\n                                    Async\n                                addImage\n                            \n                            \n                                    Public\n                                    Async\n                                allBudget\n                            \n                            \n                                    Public\n                                    Async\n                                delExpense\n                            \n                            \n                                    Public\n                                    Async\n                                delImage\n                            \n                            \n                                    Public\n                                    Async\n                                editBudget\n                            \n                            \n                                    Public\n                                    Async\n                                editExpense\n                            \n                            \n                                    Public\n                                    Async\n                                removeBudget\n                            \n                            \n                                    Public\n                                    Async\n                                setBudget\n                            \n                            \n                                    Protected\n                                errorHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            addExpense\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addExpense(data: ExpenseDto, user: any, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ExpenseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            addImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addImage(id: string, data: ImageDto, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                ImageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            allBudget\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    allBudget(user: any, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            delExpense\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delExpense(budgetId: string, id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    budgetId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            delImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delImage(budgetId: string, id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    budgetId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            editBudget\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editBudget(data: BudgetDto, user: any, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                BudgetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            editExpense\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editExpense(budgetId: string, data: ExpenseDto, user: any, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    budgetId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                ExpenseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            removeBudget\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeBudget(user, budget: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    budget\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            setBudget\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setBudget(data: BudgetDto, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                BudgetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            errorHandler\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorHandler(err: any)\n                \n            \n\n\n            \n                \n                    Inherited from         ModelService\n\n                \n            \n            \n                \n                        Defined in         ModelService:18\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { msg: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ModelService } from '../model.service';\nimport { ObjectID } from 'mongodb';\nimport { ExpenseDto, BudgetDto, ImageDto } from './../../dto/interface.dto';\nimport * as _ from 'lodash';\n\n@Injectable()\nexport class ExpenseService extends ModelService {\n\n    /**\n     * \n     * @param user decoded user info from validated token\n     * contains user id\n     * @param id \n     */\n    public async allBudget(user: any, id: string): Promise {\n        try {\n            return await this.expenseModel.find({\n                _userID: user.id,\n            });\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    public async addExpense(data: ExpenseDto, user: any, id: string): Promise {\n        const body = _.pick(data, ['date', 'amount', 'category', 'descr', 'remark', 'icon']);\n        try {\n            return await this.expenseModel.findOneAndUpdate({\n                _userID: user.id,\n                _id: id,\n            }, {$push: {expenses: body}}, { new: true });\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    public async setBudget(data: BudgetDto, user: any): Promise {\n        const body = _.pick(data, ['budgetName', 'budget']);\n        try {\n            const budget = new this.expenseModel({\n                budgetName: body.budgetName,\n                budget: body.budget,\n                _userID: user.id,\n            });\n            return await budget.save();\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    public async editBudget(data: BudgetDto, user: any, id: string): Promise {\n        const body = _.pick(data, ['budgetName', 'budget']);\n        if (!ObjectID.isValid(id)) {\n            return this.errorHandler('invalid id');\n        }\n        try {\n            return await this.expenseModel.findOneAndUpdate({\n                _id: id,\n                _userID: user.id,\n            }, {$set: body}, { new: true });\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    public async removeBudget(user, budget: any) {\n        try {\n            return await this.expenseModel.findByIdAndRemove({\n                _id: budget.id,\n                _userID: user.id,\n            });\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    public async editExpense(budgetId: string, data: ExpenseDto, user: any, id: string): Promise {\n        const body = _.pick(data, ['date', 'amount', 'category', 'descr', 'remark', 'icon']);\n        if (!ObjectID.isValid(id)) {\n            return this.errorHandler('invalid id');\n        }\n        try {\n            return this.expenseModel.findOneAndUpdate({\n                '_userID': user.id,\n                '_id': budgetId,\n                'expenses._id': id,\n            }, {\n                $set: {\n                    'expenses.$': body,\n                },\n            });\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    public async delExpense(budgetId: string, id: string, user: any): Promise {\n        if (!ObjectID.isValid(id)) {\n            return this.errorHandler('invalid id');\n        }\n        if (!ObjectID.isValid(budgetId)) {\n            return this.errorHandler('invalid id');\n        }\n        try {\n            await this.expenseModel.findOneAndUpdate({\n                _userID: user.id,\n                _id: budgetId,\n            }, {$pull: {expenses: {_id: id}}});\n            const newList = await this.expenseModel.findOne({\n                _userID: user.id,\n                _id: budgetId,\n            });\n            return newList.expenses;\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    public async addImage(id: string, data: ImageDto, user: any) {\n        if (!ObjectID.isValid(id)) {\n            return this.errorHandler('invalid id');\n        }\n        const body = _.pick(data, ['id', 'name', 'datetime', 'type', 'width', 'height', 'size', 'deletehash', 'link']);\n        try {\n            return await this.expenseModel.findOneAndUpdate({\n                _userID: user.id,\n                _id: id,\n            }, {$push: {images: body}}, { new: true });\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    public async delImage(budgetId: string, id: string, user: any): Promise {\n        if (!ObjectID.isValid(id)) {\n            return this.errorHandler('invalid id');\n        }\n        if (!ObjectID.isValid(budgetId)) {\n            return this.errorHandler('invalid id');\n        }\n        try {\n            return await this.expenseModel.findOneAndUpdate(\n                {\n                    _id: budgetId,\n                    _userID: user.id,\n                }, {$pull: {images: {_id: id}}}, { new: true });\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExpense.html":{"url":"interfaces/IExpense.html","title":"interface - IExpense","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IExpense\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/expense.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _userID\n                                \n                                \n                                        budget\n                                \n                                \n                                        budgetName\n                                \n                                \n                                        expenses\n                                \n                                \n                                        images\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _userID\n                                    \n                                \n                                \n                                    \n                                        _userID:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        budget\n                                    \n                                \n                                \n                                    \n                                        budget:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        budgetName\n                                    \n                                \n                                \n                                    \n                                        budgetName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expenses\n                                    \n                                \n                                \n                                    \n                                        expenses:     [literal type]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [literal type]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        images\n                                    \n                                \n                                \n                                    \n                                        images:     [literal type]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [literal type]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as mongoose from 'mongoose';\n\nexport interface IExpense extends mongoose.Document {\n    _userID: any;\n    budgetName: string;\n    budget: number;\n    expenses: [\n        {\n            // id: string;\n            date: string;\n            amount: number;\n            category: string;\n            descr: string;\n            remark: string;\n            icon: string; \n        }\n    ];\n    images: [\n        {\n            id: string;\n            name: string;\n            datetime: number;\n            type: string;\n            width: number;\n            height: number;\n            size: number;\n            deletehash: string;\n            link: string;\n        }\n    ];\n}\n\nexport const expenseSchema = new mongoose.Schema({\n    _userID: {\n        type: mongoose.Schema.Types.ObjectId,\n        required: true,\n    },\n    budgetName: {\n        type: String,\n        required: true,\n    },\n    budget: {\n        type: Number,\n        required: true,\n    },\n    expenses: [\n        {\n            date: {\n                type: String,\n                required: true,\n            },\n            amount: {\n                type: Number,\n                required: true,\n            },\n            category: {\n                type: String,\n                required: true,\n            },\n            descr: {\n                type: String,\n                required: true,\n            },\n            remark: {\n                type: String,\n                required: true,\n                default: null,\n            },\n            icon: {\n                type: String,\n                required: true,\n            },\n        },\n    ],\n    images: [\n        {\n            id: {\n                type: String,\n                required: true,\n            },\n            name: {\n                type: String,\n                required: true,\n            },\n            datetime: {\n                type: Number,\n                required: true,\n            },\n            type: {\n                type: String,\n                required: true,\n            },\n            width: {\n                type: Number,\n                required: true,\n            },\n            height: {\n                type: Number,\n                required: true,\n            },\n            size: {\n                type: Number,\n                required: true,\n            },\n            deletehash: {\n                type: String,\n                required: true,\n            },\n            link: {\n                type: String,\n                required: true,\n            },\n        },\n    ],\n}, {timestamps: true});\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPlan.html":{"url":"interfaces/IPlan.html","title":"interface - IPlan","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPlan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/plan.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _userID\n                                \n                                \n                                        card\n                                \n                                \n                                        duration\n                                \n                                \n                                        formatted_date\n                                \n                                \n                                        periodicAmount\n                                \n                                \n                                        planName\n                                \n                                \n                                        targetAmount\n                                \n                                \n                                        withdrawalDate\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _userID\n                                    \n                                \n                                \n                                    \n                                        _userID:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        card\n                                    \n                                \n                                \n                                    \n                                        card:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        duration\n                                    \n                                \n                                \n                                    \n                                        duration:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        formatted_date\n                                    \n                                \n                                \n                                    \n                                        formatted_date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        periodicAmount\n                                    \n                                \n                                \n                                    \n                                        periodicAmount:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        planName\n                                    \n                                \n                                \n                                    \n                                        planName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targetAmount\n                                    \n                                \n                                \n                                    \n                                        targetAmount:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withdrawalDate\n                                    \n                                \n                                \n                                    \n                                        withdrawalDate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as mongoose from 'mongoose';\n\nexport interface IPlan extends mongoose.Document {\n    _userID: any;\n    planName: string;\n    periodicAmount: string;\n    targetAmount: string;\n    withdrawalDate: string;\n    duration: string;\n    formatted_date: string;\n    card: {\n        firstname: string;\n        lastname: string;\n        expiry_date: string;\n        card_no: string;\n        pin: string;\n        amount: string;\n        cvv: string;\n    };\n}\n\nexport const plansSchema = new mongoose.Schema({\n    _userID: {\n        type: mongoose.Schema.Types.ObjectId,\n        required: true,\n    },\n    planName: {\n        type: String,\n        required: true,\n        unique: true,\n    },\n    periodicAmount: {\n        type: Number,\n        required: true,\n    },\n    targetAmount: {\n        type: String,\n        required: true,\n    },\n    withdrawalDate: {\n        type: Date,\n        required: true,\n    },\n    formatted_date: {\n        type: String,\n        required: true,\n    },\n    duration: {\n        type: String,\n        required: true,\n    },\n    card: {\n        firstname: {type: String, required: true},\n        lastname: {type: String, required: true},\n        expiry_date: {type: String, required: true},\n        card_no: {type: String, required: true},\n        pin: {type: String, required: true},\n        amount: {type: String, default: '0'},\n        cvv: {type: String, required: true},\n    },\n}, {timestamps: true});\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUser.html":{"url":"interfaces/IUser.html","title":"interface - IUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/user.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        createdAt\n                                \n                                \n                                        email\n                                \n                                \n                                            Optional\n                                        firebaseToken\n                                \n                                \n                                        fullname\n                                \n                                \n                                            Optional\n                                        imgDelHash\n                                \n                                \n                                        password\n                                \n                                \n                                        phone_no\n                                \n                                \n                                            Optional\n                                        profileImage\n                                \n                                \n                                            Optional\n                                        reset_password_expires\n                                \n                                \n                                            Optional\n                                        reset_password_token\n                                \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firebaseToken\n                                    \n                                \n                                \n                                    \n                                        firebaseToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fullname\n                                    \n                                \n                                \n                                    \n                                        fullname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imgDelHash\n                                    \n                                \n                                \n                                    \n                                        imgDelHash:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone_no\n                                    \n                                \n                                \n                                    \n                                        phone_no:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImage\n                                    \n                                \n                                \n                                    \n                                        profileImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reset_password_expires\n                                    \n                                \n                                \n                                    \n                                        reset_password_expires:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reset_password_token\n                                    \n                                \n                                \n                                    \n                                        reset_password_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as mongoose from 'mongoose';\nimport * as validator from 'validator';\nimport * as bcrypt from 'bcryptjs';\n\nexport interface IUser extends mongoose.Document {\n    fullname: string;\n    username: string;\n    phone_no: number;\n    password: string;\n    email: string;\n    createdAt?: any;\n    reset_password_token?: string;\n    reset_password_expires?: string;\n    profileImage?: string;\n    imgDelHash?: string;\n    firebaseToken?: string;\n}\n\nexport const UserSchema = new mongoose.Schema({\n    fullname: {\n        type: String,\n        unique: true,\n        required: true,\n    },\n    username: {\n        type: String,\n        unique: true,\n        required: true,\n    },\n    phone_no: {\n        type: String,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n        trim: true,\n        minlenght: 1,\n        unique: true,\n        validate: {\n            validator: validator.isEmail,\n            message: '{value} is not a valid email',\n        },\n    },\n    password: {\n        type: String,\n        required: true,\n        minlength: 6,\n    },\n    profileImage: {\n        type: String,\n        default: undefined,\n    },\n    imgDelHash: {\n        type: String,\n        default: undefined,\n    },\n    reset_password_token: {\n        type: String,\n        default: undefined,\n    },\n    reset_password_expires: {\n        type: String,\n        default: undefined,\n    },\n    firebaseToken: {\n        type: String,\n        default: 'token',\n    },\n}, { timestamps: true });\n\n// NOTE: Arrow functions are not used here as we do not want to use lexical scope for 'this'\nUserSchema.pre('save', function(next) {\n    const user = this;\n    // Make sure not to rehash the password if it is already hashed\n    if (!user.isModified('password')) { return next(); }\n    // Generate a salt and use it to hash the user's password\n    bcrypt.genSalt(10, (err: any, salt: any) => {\n        bcrypt.hash(user.password, salt, (error: any, hash: any) => {\n            user.password = hash;\n            next();\n        });\n    });\n});\n\nUserSchema.methods.checkPassword = function(attempt, callback) {\n    const user = this;\n    bcrypt.compare(attempt, user.password, (err, isMatch) => {\n        if (err) { return callback(err); }\n        callback(null, isMatch);\n    });\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImageDto.html":{"url":"classes/ImageDto.html","title":"class - ImageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                datetime\n                            \n                            \n                                    Readonly\n                                deletehash\n                            \n                            \n                                    Readonly\n                                height\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                link\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                size\n                            \n                            \n                                    Readonly\n                                type\n                            \n                            \n                                    Readonly\n                                width\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            datetime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: Number, description: 'creation date', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:320\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            deletehash\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'delete hash', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:355\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: Number, description: 'height', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:341\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'image id', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:306\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            link\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'url link', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:362\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'image name', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:313\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            size\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: Number, description: 'size', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:348\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'type', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:327\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: Number, description: 'width', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:334\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:24\n                \n            \n\n\n            \n                \n                    The validate() method deserves some discussion. For the jwt-strategy,\n  Passport first verifies the JWT's signature and decodes the JSON.\n  It then invokes our validate() method passing the decoded JSON as\nits single parameter. Based on the way JWT signing works, we're\nguaranteed that we're receiving a valid token that we have previously signed and issued to a valid user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the verified info {id: payload._id, email: payload.email}\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { configKeys } from './../config/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configKeys.JWT_SECRET,\n    });\n  }\n\n  /**\n   * The validate() method deserves some discussion. For the jwt-strategy,\n   *  Passport first verifies the JWT's signature and decodes the JSON.\n   *  It then invokes our validate() method passing the decoded JSON as\n   * its single parameter. Based on the way JWT signing works, we're\n   * guaranteed that we're receiving a valid token that we have previously signed and issued to a valid user.\n   * @param payload the verified info {id: payload._id, email: payload.email}\n   */\n  async validate(payload: any) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(usernameField: string, passwordField: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usernameField\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    passwordField\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(private readonly authService: AuthService) {\n        super({\n            usernameField: 'username',\n            passwordField: 'password',\n        });\n    }\n\n    async validate(usernameField: string, passwordField: string): Promise {\n        const data = {\n            username: usernameField,\n            password: passwordField,\n        };\n        const user = await this.authService.validateUser(data);\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user password', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:78\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            user_name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'username', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:71\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ModelService.html":{"url":"injectables/ModelService.html","title":"injectable - ModelService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ModelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/model.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                errorHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, planModel: Model, expenseModel: Model, notification: CloudNotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/controller/model.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        planModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        expenseModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notification\n                                                  \n                                                        \n                                                                        CloudNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            errorHandler\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorHandler(err: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/model.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { msg: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { IPlan } from './../model/plan.model';\nimport { IUser } from './../model/user.model';\nimport { IExpense } from './../model/expense.model';\nimport { CloudNotificationService } from './cloud-notification.service';\n\n@Injectable()\nexport abstract class ModelService {\n    constructor(\n        @InjectModel('User') protected readonly userModel: Model,\n        @InjectModel('Plans') protected readonly planModel: Model,\n        @InjectModel('Expense') protected readonly expenseModel: Model,\n        protected notification: CloudNotificationService,\n    ) {}\n\n    protected errorHandler(err: any) {\n        return { msg: err };\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PassResPageDto.html":{"url":"classes/PassResPageDto.html","title":"class - PassResPageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PassResPageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user id', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:110\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user password', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:124\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'token', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:117\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PlanController.html":{"url":"controllers/PlanController.html","title":"controller - PlanController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PlanController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/plans/plans.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                plan\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                allPlans\n                            \n                            \n                                    Async\n                                createPlan\n                            \n                            \n                                    Async\n                                deletePlan\n                            \n                            \n                                    Async\n                                getCard\n                            \n                            \n                                    Async\n                                updatePlan\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            allPlans\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    allPlans(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get()@ApiOkResponse({description: 'The resource has been succesfully returned'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/plans/plans.controller.ts:59\n                \n            \n\n\n            \n                \n                    retrieves all plans\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createPlan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPlan(body: PlanDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post()@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/plans/plans.controller.ts:24\n                \n            \n\n\n            \n                \n                    creates a new plan\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan info\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deletePlan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePlan(id: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete(':id')@ApiCreatedResponse({description: 'The resource has successfully been deleted'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/plans/plans.controller.ts:97\n                \n            \n\n\n            \n                \n                    delete plan\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan id\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCard\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCard(req, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('card/:id')@ApiOkResponse({description: 'The resource has been succesfully returned'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/plans/plans.controller.ts:42\n                \n            \n\n\n            \n                \n                    retrieves card details\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updatePlan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePlan(id: string, body: PlanDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put(':id')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/plans/plans.controller.ts:78\n                \n            \n\n\n            \n                \n                    update plan\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan id\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan info to be updated\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, Post, UseGuards, Body, Response, NotImplementedException, Put, Param, Delete } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { PlanService } from '../plans/plans.service';\nimport { PlanDto } from './../../dto/interface.dto';\nimport { ApiUseTags, ApiOkResponse, ApiForbiddenResponse, ApiNotFoundResponse, ApiCreatedResponse } from '@nestjs/swagger';\n\n@ApiUseTags('plan')\n@Controller('plan')\nexport class PlanController {\n    constructor(\n        private readonly planService: PlanService,\n    ) { }\n\n    /**\n     * creates a new plan\n     * @param body plan info\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post()\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async createPlan(@Body() body: PlanDto, @Request() req) {\n        try {\n            return await this.planService.create(body, req.user);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * retrieves card details\n     * @param req request info\n     * @param id plan id\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Get('card/:id')\n    @ApiOkResponse({description: 'The resource has been succesfully returned'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async getCard(@Request() req, @Param('id') id: string) {\n        try {\n            return await this.planService.getCard(id, req.user);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * retrieves all plans\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Get()\n    @ApiOkResponse({description: 'The resource has been succesfully returned'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async allPlans(@Request() req) {\n        try {\n            return await this.planService.allPlans(req.user);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * update plan\n     * @param id plan id\n     * @param body plan info to be updated\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Put(':id')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async updatePlan(@Param('id') id: string, @Body() body: PlanDto, @Request() req) {\n        try {\n            await this.planService.update(req.user, body, id);\n            return {msg: 'update successful'};\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * delete plan\n     * @param id plan id\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Delete(':id')\n    @ApiCreatedResponse({description: 'The resource has successfully been deleted'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async deletePlan(@Param('id') id: string, @Request() req) {\n        try {\n            await this.planService.delete(req.user, id);\n            return {msg: 'plan deleted'};\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlanDto.html":{"url":"classes/PlanDto.html","title":"class - PlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                card\n                            \n                            \n                                    Readonly\n                                duration\n                            \n                            \n                                    Readonly\n                                periodicAmount\n                            \n                            \n                                    Readonly\n                                planName\n                            \n                            \n                                    Readonly\n                                targetAmount\n                            \n                            \n                                    Readonly\n                                withdrawalDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            card\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'card details', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:223\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            duration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'withdrawal interval daily | weekly | monthly', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:216\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            periodicAmount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'periodic amount', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:195\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            planName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'plan name', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:188\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            targetAmount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'target amount', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:202\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            withdrawalDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'expected withdrawal date', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:209\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PlanModule.html":{"url":"modules/PlanModule.html","title":"module - PlanModule","body":"\n                   \n\n\n\n\n    Modules\n    PlanModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PlanModule\n\n\n\ncluster_PlanModule_exports\n\n\n\ncluster_PlanModule_providers\n\n\n\n\nCloudNotificationService \n\nCloudNotificationService \n\n\n\nPlanService \n\nPlanService \n\n\n\nUserService \n\nUserService \n\n\n\nPlanModule\n\nPlanModule\n\nCloudNotificationService  -->\n\nPlanModule->CloudNotificationService \n\n\n\nPlanService  -->\n\nPlanModule->PlanService \n\n\n\nUserService  -->\n\nPlanModule->UserService \n\n\n\n\n\nCloudNotificationService\n\nCloudNotificationService\n\nPlanModule -->\n\nCloudNotificationService->PlanModule\n\n\n\n\n\nPlanService\n\nPlanService\n\nPlanModule -->\n\nPlanService->PlanModule\n\n\n\n\n\nUserService\n\nUserService\n\nPlanModule -->\n\nUserService->PlanModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/controller/plans/plans.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudNotificationService\n                        \n                        \n                            PlanService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PlanController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CloudNotificationService\n                        \n                        \n                            PlanService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthModule } from 'src/auth/auth.module';\nimport { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserSchema } from './../../model/user.model';\nimport { UserService } from './../user/user.service';\nimport { PlanService } from './plans.service';\nimport { plansSchema } from './../../model/plan.model';\nimport { PlanController } from './plans.controller';\nimport { expenseSchema } from 'src/model/expense.model';\nimport { CloudNotificationService } from './../cloud-notification.service';\n\n@Module({\n    imports: [\n        forwardRef(() => AuthModule),\n        MongooseModule.forFeature([\n            {name: 'User', schema: UserSchema},\n            {name: 'Plans', schema: plansSchema},\n            {name: 'Expense', schema: expenseSchema},\n        ]),\n        PassportModule.register({defaultStrategy: 'jwt', session: false}),\n    ],\n    exports: [UserService, PlanService, CloudNotificationService],\n    controllers: [PlanController],\n    providers: [UserService, PlanService, CloudNotificationService],\n})\n\nexport class PlanModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlanService.html":{"url":"injectables/PlanService.html","title":"injectable - PlanService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PlanService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/plans/plans.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ModelService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                allPlans\n                            \n                            \n                                    Private\n                                    Async\n                                calculatePlan\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Private\n                                decryptCard\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Private\n                                encryptCard\n                            \n                            \n                                    Async\n                                getCard\n                            \n                            \n                                    Private\n                                hideDetails\n                            \n                            \n                                    Private\n                                    Async\n                                saveUpdate\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Protected\n                                errorHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            allPlans\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    allPlans(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:133\n                \n            \n\n\n            \n                \n                    searches and returns all plans created by the user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        list of all plans created by the user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            calculatePlan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    calculatePlan(body, user)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:42\n                \n            \n\n\n            \n                \n                    takes data from plan info supplied by user,\ncalculates withdrawal date\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan info\n\n                                    \n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: PlanDto, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:20\n                \n            \n\n\n            \n                \n                    saves a new plan to database\ncard info is encrypted before it is saved to database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan info\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        new plan details\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            decryptCard\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    decryptCard(doc: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:87\n                \n            \n\n\n            \n                \n                    decrupt card details\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    doc\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan info with encrypted card details\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        plan info with decrypted card details\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(user: any, id: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:203\n                \n            \n\n\n            \n                \n                    delete user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        deletion message\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            encryptCard\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    encryptCard(doc: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    doc\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan info with un-encrypted card details\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        plan info with encrypted card details\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCard\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCard(id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:118\n                \n            \n\n\n            \n                \n                    retrieves encrypted card details frrom the database,\ndecrypts it then sends to user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan id\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            hideDetails\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hideDetails(doc: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:99\n                \n            \n\n\n            \n                \n                    hide card details\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    doc\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan info with un-hidden card\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        hidden card details\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            saveUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveUpdate(plan, user, id)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:183\n                \n            \n\n\n            \n                \n                    save the updated plan info to database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    plan\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the updated info\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(user: any, data: any, id: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:152\n                \n            \n\n\n            \n                \n                    recalculate plan info before updating the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan info to be updated\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            errorHandler\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorHandler(err: any)\n                \n            \n\n\n            \n                \n                    Inherited from         ModelService\n\n                \n            \n            \n                \n                        Defined in         ModelService:18\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { msg: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ModelService } from '../model.service';\nimport { ObjectID } from 'mongodb';\nimport * as moment from 'moment';\nimport * as _ from 'lodash';\nimport * as encrypt from '../../utils/encryption';\nimport { PlanDto } from './../../dto/interface.dto';\n\n@Injectable()\nexport class PlanService extends ModelService {\n\n    /**\n     * saves a new plan to database\n     * card info is encrypted before it is saved to database\n     * @param data plan info\n     * @param user decoded user info from validated token\n     * contains user id\n     * @returns new plan details\n     */\n    public async create(data: PlanDto, user: any): Promise {\n        const body = _.pick(data, [\n            'planName', 'periodicAmount', 'targetAmount', 'duration',\n            'card',\n        ]);\n        try {\n            const planDetails = await this.calculatePlan(body, user);\n            const plan = new this.planModel(this.encryptCard(planDetails));\n            const doc = await plan.save();\n            return this.hideDetails(this.decryptCard(doc));\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    /**\n     * takes data from plan info supplied by user,\n     * calculates withdrawal date\n     * @param body plan info\n     * @param user decoded user info from validated token\n     * contains user id\n     */\n    private async calculatePlan(body, user): Promise {\n        const periodAmount = parseFloat(body.periodicAmount);\n        const trgAmount = parseFloat(body.targetAmount);\n        if (isNaN(periodAmount) || isNaN(trgAmount)) {\n            return this.errorHandler('wrong input parameters');\n        }\n        if (periodAmount > trgAmount) {\n            return this.errorHandler('amount for each period cannot be greater than the target amount');\n        }\n        const n = Math.ceil(trgAmount / periodAmount);\n        let time: any;\n        if (body.duration === 'daily') {\n            time = moment().add(n, 'days');\n        } else if (body.duration === 'weekly') {\n            time = moment().add(n, 'weeks');\n        } else if (body.duration === 'monthly') {\n            time = moment().add(n, 'months');\n        } else {\n            return this.errorHandler(`${body.duration} is not a valid string`);\n        }\n        const moreDetails = {\n            withdrawalDate: time,\n            formatted_date: moment(time).format('LLLL'),\n            _userID: user.id,\n        };\n        return { ...body, ...moreDetails };\n    }\n\n    /**\n     * \n     * @param doc plan info with un-encrypted card details\n     * @returns plan info with encrypted card details\n     */\n    private encryptCard(doc: any) {\n        doc.card.card_no = encrypt.encryptCardNum(doc.card.card_no);\n        doc.card.cvv = encrypt.encryptCVV(doc.card.cvv);\n        doc.card.pin = encrypt.encryptPin(doc.card.pin);\n        return doc;\n    }\n\n    /**\n     * decrupt card details\n     * @param doc plan info with encrypted card details\n     * @returns plan info with decrypted card details\n     */\n    private decryptCard(doc: any) {\n        doc.card.card_no = encrypt.decryptCardNum(doc.card.card_no);\n        doc.card.cvv = encrypt.decryptCVV(doc.card.cvv);\n        doc.card.pin = encrypt.decryptPin(doc.card.pin);\n        return doc;\n    }\n\n    /**\n     * hide card details\n     * @param doc plan info with un-hidden card\n     * @returns hidden card details\n     */\n    private hideDetails(doc: any) {\n        doc.card.cvv = '***';\n        doc.card.pin = '****';\n        doc.card.lastname = '*****';\n        doc.card.expiry_date = '*****';\n        const num: string = doc.card.card_no;\n        const cardNum: number = num.length;\n        const b = num.slice((cardNum - 4), cardNum);\n        doc.card.card_no = '**********' + b;\n        return doc;\n    }\n\n    /**\n     * retrieves encrypted card details frrom the database,\n     * decrypts it then sends to user\n     * @param id plan id\n     * @param user decoded user info from validated token\n     * contains user id\n     */\n    async getCard(id: string, user: any): Promise {\n        try {\n            const doc = await this.planModel.findOne({ _id: id, _userID: user.id });\n            return this.decryptCard(doc);\n        } catch (error) {\n            return this.errorHandler(error);\n        }\n    }\n\n    /**\n     * searches and returns all plans created by the user\n     * @param user decoded user info from validated token\n     * contains user id\n     * @returns list of all plans created by the user\n     */\n    async allPlans(user: any): Promise {\n        try {\n            const doc = await this.planModel.find({ _userID: user.id });\n            doc.forEach(element => {\n                element = this.hideDetails(this.decryptCard(element));\n            });\n            return doc;\n        } catch (error) {\n            return this.errorHandler(error);\n        }\n    }\n\n    /**\n     * recalculate plan info before updating the database\n     * @param user decoded user info from validated token\n     * contains user id\n     * @param data plan info to be updated\n     * @param id plan id\n     */\n    async update(user: any, data: any, id: any): Promise {\n        data.card.amount = 0;\n        const body = {\n            planName: data.planName,\n            targetAmount: data.targetAmount,\n            periodicAmount: data.periodicAmount,\n            duration: data.duration,\n            card: data.card,\n        };\n        if (!ObjectID.isValid(id)) {\n            return this.errorHandler('invalid id');\n        }\n        try {\n            await this.planModel.findById(id);\n            const res = await this.calculatePlan(body, user);\n            const plan = this.encryptCard(res);\n            const newPlan = await this.saveUpdate(plan, user, id);\n            return newPlan;\n        } catch (error) {\n            return this.errorHandler(error);\n        }\n    }\n\n    /**\n     * save the updated plan info to database\n     * @param plan \n     * @param user decoded user info from validated token\n     * contains user id\n     * @param id plan id\n     * @returns the updated info\n     */\n    private async saveUpdate(plan, user, id): Promise {\n        try {\n            let doc = await this.planModel.findOneAndUpdate({\n                _id: id,\n                _userID: user.id,\n            }, { $set: plan }, { new: true });\n            doc = this.hideDetails(this.decryptCard(doc));\n            return doc;\n        } catch (error) {\n            return this.errorHandler(error);\n        }\n    }\n\n    /**\n     * delete user\n     * @param user decoded user info from validated token\n     * contains user id\n     * @param id user id\n     * @returns deletion message\n     */\n    async delete(user: any, id: any): Promise {\n        if (!ObjectID.isValid(id)) {\n            return this.errorHandler('invalid id');\n        }\n        try {\n            await this.planModel.findOneAndDelete({\n                _id: id,\n                _userID: user.id,\n            });\n            return { message: 'plan deletion successfull' };\n        } catch (error) {\n            return this.errorHandler('plan deletion successfull');\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileUpdateDto.html":{"url":"classes/ProfileUpdateDto.html","title":"class - ProfileUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                input\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            input\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:392\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:389\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ScheduleModule.html":{"url":"modules/ScheduleModule.html","title":"module - ScheduleModule","body":"\n                   \n\n\n\n\n    Modules\n    ScheduleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ScheduleModule\n\n\n\ncluster_ScheduleModule_exports\n\n\n\ncluster_ScheduleModule_providers\n\n\n\n\nScheduleService \n\nScheduleService \n\n\n\nScheduleModule\n\nScheduleModule\n\nScheduleService  -->\n\nScheduleModule->ScheduleService \n\n\n\n\n\nScheduleService\n\nScheduleService\n\nScheduleModule -->\n\nScheduleService->ScheduleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/scheduler/schedule.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ScheduleService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ScheduleService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AgendaModule } from 'nestjs-agenda';\nimport { configKeys } from '../config/config';\nimport { plansSchema } from './../model/plan.model';\nimport { ScheduleService } from './schedule.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: 'Plans', schema: plansSchema },\n    ]),\n    AgendaModule.register({\n      db: {\n        address: configKeys.MONGODB_URI,\n        collection: 'jobs',\n        options: {\n          useNewUrlParser: true,\n          useFindAndModify: false,\n        },\n      },\n      processEvery: '30 seconds',\n    }),\n  ],\n  exports: [ScheduleService],\n  providers: [ScheduleService],\n})\n\nexport class ScheduleModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScheduleService.html":{"url":"injectables/ScheduleService.html","title":"injectable - ScheduleService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ScheduleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/scheduler/schedule.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createJob\n                            \n                            \n                                    Private\n                                    Async\n                                ravePayConnect\n                            \n                            \n                                    Private\n                                    Async\n                                searchPlans\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(planModel: Model, agenda: AgendaService)\n                    \n                \n                        \n                            \n                                Defined in src/scheduler/schedule.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        planModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        agenda\n                                                  \n                                                        \n                                                                    AgendaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            createJob\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createJob()\n                \n            \n\n\n            \n                \n                    Defined in src/scheduler/schedule.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            ravePayConnect\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ravePayConnect()\n                \n            \n\n\n            \n                \n                    Defined in src/scheduler/schedule.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            searchPlans\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    searchPlans(duration: string)\n                \n            \n\n\n            \n                \n                    Defined in src/scheduler/schedule.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    duration\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { ObjectID } from 'mongodb';\nimport * as moment from 'moment';\n// import * as _ from 'lodash';\nimport { AgendaService } from 'nestjs-agenda';\nimport { IPlan } from './../model/plan.model';\n// import { cardCharge } from '../utils/ravePay';\n\n@Injectable()\nexport class ScheduleService {\n\n    constructor(\n        @InjectModel('Plans') protected readonly planModel: Model,\n        private readonly agenda: AgendaService) {\n        // this.createJob();\n    }\n\n    private async createJob(): Promise {\n        // define a job, more details\n        this.agenda.define('DAILY_PLAN', async job => {\n            // tslint:disable-next-line: no-console\n            console.log(`job fired at ${moment().format('LLLL')}`);\n            // flutterwave connect\n        });\n        this.agenda.define('WEEKLY_PLAN', async job => {\n            // flutterwave connect\n        });\n        this.agenda.define('MONTHLY_PLAN', async job => {\n            // flutterwave connect\n        });\n        // schedule a job “At 16:00 on every day-of-week.”\n        // '0 16 * * */1'\n        this.agenda.every('*/1 * * * *', 'DAILY_PLAN', {});\n        // schedule a job “At 16:00 on every 5th day-of-week.”\n        this.agenda.every('0 16 * * */5', 'WEEKLY_PLAN', {});\n        // schedule a job “At 16:00 on day-of-month 28 in every month.”\n        this.agenda.every('0 16 28 */1 *', 'MONTHLY_PLAN', {});\n    }\n\n    private async searchPlans(duration: string) {\n        const docs = await this.planModel.find();\n        return docs.filter(res => res.duration === duration);\n    }\n\n    private async ravePayConnect() {\n        try {\n            const plan = await this.searchPlans('daily');\n            // tslint:disable-next-line: no-console\n            console.log(`all plans ${plan}`);\n        } catch (error) {\n            // tslint:disable-next-line: no-console\n            console.log(error);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenDto.html":{"url":"classes/TokenDto.html","title":"class - TokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user request token', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:89\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                sendToken\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                updateInfo\n                            \n                            \n                                    Async\n                                updateProfileImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('profile')@ApiOkResponse({description: 'The resource has been succesfully returned'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/user/user.controller.ts:74\n                \n            \n\n\n            \n                \n                    sends user info stored in database to the user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req, res, body: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('login')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/user/user.controller.ts:47\n                \n            \n\n\n            \n                \n                    log in user by checking users credentials, creating a token\nwhich will be attached to all protected requests made to the api\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        response info\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        login details\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendToken(req, body: TokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('token')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/user/user.controller.ts:93\n                \n            \n\n\n            \n                \n                    send token to user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                TokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(data: CreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/user/user.controller.ts:24\n                \n            \n\n\n            \n                \n                    creates a new user and saves the user info\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user signup info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateInfo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInfo(req, body: ProfileUpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('update')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/user/user.controller.ts:112\n                \n            \n\n\n            \n                \n                    update user info\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                ProfileUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user details\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateProfileImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfileImage(req, body: ImageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('image')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/user/user.controller.ts:130\n                \n            \n\n\n            \n                \n                    update user profile image\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                ImageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        image info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, Post, UseGuards, Body, Response, NotFoundException, HttpException, HttpStatus } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserService } from './user.service';\nimport { AuthService } from './../../auth/auth.service';\nimport { CreateDto, LoginDto, TokenDto, ImageDto, ProfileUpdateDto } from './../../dto/interface.dto';\nimport { ApiUseTags, ApiOkResponse, ApiForbiddenResponse, ApiNotFoundResponse, ApiCreatedResponse } from '@nestjs/swagger';\n\n@ApiUseTags('user')\n@Controller('user')\nexport class UserController {\n    constructor(\n        private readonly userService: UserService,\n        private readonly authService: AuthService,\n    ) { }\n\n    /**\n     * creates a new user and saves the user info\n     * @param data user signup info\n     */\n    @Post('signup')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async signup(@Body() data: CreateDto) {\n        try {\n            return await this.userService.createUser(data);\n        } catch (error) {\n            throw new HttpException({\n                status: HttpStatus.BAD_REQUEST,\n                error,\n              }, HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    /**\n     * log in user by checking users credentials, creating a token\n     * which will be attached to all protected requests made to the api\n     * @param req request info\n     * @param res response info\n     * @param body login details\n     */\n    @UseGuards(AuthGuard('local'))\n    @Post('login')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async login(@Request() req, @Response() res, @Body() body: LoginDto) {\n        const token = this.authService.login(req.user);\n        delete req.user.password;\n        res.setHeader('Authorization', `Bearer ${token}`);\n        const userDetails = {\n            id: req.user._id,\n            username: req.user.username,\n            fullname: req.user.fullname,\n            email: req.user.email,\n            phone_no: req.user.phone_no,\n            profileImage: req.user.profileImage,\n            imageDeleteHash: req.user.imageDeleteHash,\n            firebaseToken: req.user.firebaseToken,\n        };\n        res.send(userDetails);\n        return res;\n    }\n\n    /**\n     * sends user info stored in database to the user\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Get('profile')\n    @ApiOkResponse({description: 'The resource has been succesfully returned'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async getProfile(@Request() req) {\n        try {\n            const info = await this.userService.getInfo(req.user);\n            return info;\n        } catch (error) {\n            throw new NotFoundException(error);\n        }\n    }\n\n    /**\n     * send token to user\n     * @param req request info\n     * @param body token\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post('token')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async sendToken(@Request() req, @Body() body: TokenDto) {\n        try {\n            await this.userService.saveToken(req.user, body);\n            return {status: 200, message: 'Success'};\n        } catch (error) {\n            throw new NotFoundException(error);\n        }\n    }\n\n    /**\n     * update user info\n     * @param req request info\n     * @param body user details\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post('update')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async updateInfo(@Request() req, @Body() body: ProfileUpdateDto) {\n        try {\n            return await this.userService.updateProfile(req.user, body);\n        } catch (error) {\n            throw new NotFoundException(error);\n        }\n    }\n\n    /**\n     * update user profile image\n     * @param req request info\n     * @param body image info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post('image')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async updateProfileImage(@Request() req, @Body() body: ImageDto) {\n        try {\n            return await this.userService.changeProfileImage(req.user, body);\n        } catch (error) {\n            throw new NotFoundException(error);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nCloudNotificationService \n\nCloudNotificationService \n\n\n\nPlanService \n\nPlanService \n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nCloudNotificationService  -->\n\nUserModule->CloudNotificationService \n\n\n\nPlanService  -->\n\nUserModule->PlanService \n\n\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCloudNotificationService\n\nCloudNotificationService\n\nUserModule -->\n\nCloudNotificationService->UserModule\n\n\n\n\n\nPlanService\n\nPlanService\n\nUserModule -->\n\nPlanService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/controller/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudNotificationService\n                        \n                        \n                            PlanService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CloudNotificationService\n                        \n                        \n                            PlanService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserSchema } from './../../model/user.model';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { PlanService } from './../plans/plans.service';\nimport { plansSchema } from './../../model/plan.model';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { expenseSchema } from 'src/model/expense.model';\nimport { CloudNotificationService } from './../cloud-notification.service';\n\n@Module({\n    imports: [\n        forwardRef(() => AuthModule),\n        MongooseModule.forFeature([\n            {name: 'User', schema: UserSchema},\n            {name: 'Plans', schema: plansSchema},\n            {name: 'Expense', schema: expenseSchema},\n        ]),\n        PassportModule.register({defaultStrategy: 'jwt', session: false}),\n    ],\n    exports: [UserService, PlanService, CloudNotificationService],\n    controllers: [UserController],\n    providers: [UserService, PlanService, CloudNotificationService],\n})\n\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/user/user.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ModelService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                changeProfileImage\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                getInfo\n                            \n                            \n                                    Public\n                                    Async\n                                saveToken\n                            \n                            \n                                    Public\n                                    Async\n                                updateProfile\n                            \n                            \n                                    Protected\n                                errorHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            changeProfileImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changeProfileImage(user: any, body: ImageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/user/user.service.ts:47\n                \n            \n\n\n            \n                \n                    save image info to database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                ImageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        image info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        updated image info\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/user/user.service.ts:13\n                \n            \n\n\n            \n                \n                    creates a new mongodb document for the user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        saved data containing user info\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInfo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfo(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/user/user.service.ts:30\n                \n            \n\n\n            \n                \n                    retrieves user details from database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ndecoded user info from validated token\ncontains user id\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        doc - user information\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            saveToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveToken(user: any, body: TokenDto)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/user/user.service.ts:79\n                \n            \n\n\n            \n                \n                    save firebase token which will be used for push notifications\nto database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                TokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        notification token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        user info\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfile(user: any, body: ProfileUpdateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/user/user.service.ts:63\n                \n            \n\n\n            \n                \n                    save user info to be updated to database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                ProfileUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new user info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        updated user info\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            errorHandler\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorHandler(err: any)\n                \n            \n\n\n            \n                \n                    Inherited from         ModelService\n\n                \n            \n            \n                \n                        Defined in         ModelService:18\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { msg: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { TokenDto, ImageDto, ProfileUpdateDto } from './../../dto/interface.dto';\nimport { Injectable } from '@nestjs/common';\nimport { ModelService } from '../model.service';\n\n@Injectable()\nexport class UserService extends ModelService {\n\n    /**\n     * creates a new mongodb document for the user\n     * @param data\n     * @returns saved data containing user info\n     */\n    public async createUser(data: any) {\n        const user = new this.userModel({\n            fullname: data.name,\n            username: data.username,\n            phone_no: data.country_phone.phone,\n            email: data.email,\n            password: data.matching_passwords.password,\n        });\n        return await user.save();\n    }\n\n    /**\n     * retrieves user details from database\n     * @param user - decoded user info from validated token\n     * contains user id\n     * @returns doc - user information\n     */\n    public getInfo(user: any) {\n        return new Promise((resolve, reject) => {\n            this.userModel.findById(user._id).then((doc) => {\n                resolve(doc);\n            }).catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n    /**\n     * save image info to database\n     * @param user decoded user info from validated token\n     * contains user id\n     * @param body image info\n     * @returns updated image info\n     */\n    public async changeProfileImage(user: any, body: ImageDto) {\n        return await this.userModel.findOneAndUpdate({\n            _id: user.id,\n        }, {$set: {\n            profileImage: body.link,\n            imgDelHash: body.deletehash,\n        }}, {new: true});\n    }\n\n    /**\n     * save user info to be updated to database\n     * @param user decoded user info from validated token\n     * contains user id\n     * @param body new user info\n     * @returns updated user info\n     */\n    public async updateProfile(user: any, body: ProfileUpdateDto) {\n        return await this.userModel.findOneAndUpdate({\n            _id: user.id,\n        }, {$set: {\n            [body.type]: body.input,\n        }}, {new: true});\n    }\n\n    /**\n     * save firebase token which will be used for push notifications\n     * to database\n     * @param user decoded user info from validated token\n     * contains user id\n     * @param body notification token\n     * @returns user info\n     */\n    public async saveToken(user: any, body: TokenDto) {\n        return await this.userModel.findOneAndUpdate({\n            _id: user.id,\n        }, {$set: {firebaseToken: body.token}}, { new: true });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidateService.html":{"url":"injectables/ValidateService.html","title":"injectable - ValidateService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ValidateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/validate.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                admin_reg_validation\n                            \n                            \n                                    Public\n                                loginValidation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            admin_reg_validation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    admin_reg_validation(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/validation/validate.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loginValidation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loginValidation(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/validation/validate.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as Joi from '@hapi/joi';\n\n@Injectable()\nexport class ValidateService {\n\n    // Register validation\n    public admin_reg_validation(data: any) {\n        const schema = Joi.object({\n            full_name: Joi.string().min(6).required(),\n            user_name: Joi.string().min(4).required(),\n            phone_no: Joi.number().min(11).max(14).required(),\n            email: Joi.string().min(5).required().email(),\n            password: Joi.string().min(8).required(),\n        });\n        return schema.validate(data);\n    }\n\n    // login validation\n    public loginValidation(data: any) {\n        const schema = Joi.object({\n            username: Joi.string().min(4).required(),\n            password: Joi.string().min(6).required(),\n        });\n        return schema.validate(data);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config/config.ts\n            \n            variable\n            configKeys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controller/cloud-notification.service.ts\n            \n            injectable\n            CloudNotificationService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/controller/cloud-notification.service.ts\n            \n            variable\n            firebaseApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controller/cloud-notification.service.ts\n            \n            variable\n            serviceAccount\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controller/email/email.controller.ts\n            \n            controller\n            EmailController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/controller/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/controller/expense/expense.controller.ts\n            \n            controller\n            ExpenseController\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/controller/expense/expense.service.ts\n            \n            injectable\n            ExpenseService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/controller/model.service.ts\n            \n            injectable\n            ModelService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/controller/plans/plans.controller.ts\n            \n            controller\n            PlanController\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/controller/plans/plans.service.ts\n            \n            injectable\n            PlanService\n            \n                75 %\n                (9/12)\n            \n        \n        \n            \n                \n                src/controller/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/controller/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            BudgetDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            CardDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            CreateDto\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            DeleteDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            EmailResetDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            ExpenseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            ImageDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            PassResPageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            PlanDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            ProfileUpdateDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            TokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/model/expense.model.ts\n            \n            interface\n            IExpense\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/model/expense.model.ts\n            \n            variable\n            expenseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/model/plan.model.ts\n            \n            interface\n            IPlan\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/model/plan.model.ts\n            \n            variable\n            plansSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/model/user.model.ts\n            \n            interface\n            IUser\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/model/user.model.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/scheduler/schedule.service.ts\n            \n            injectable\n            ScheduleService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/encryption.ts\n            \n            function\n            decryptCardNum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/encryption.ts\n            \n            function\n            decryptCVV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/encryption.ts\n            \n            function\n            decryptPin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/encryption.ts\n            \n            function\n            encryptCardNum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/encryption.ts\n            \n            function\n            encryptCVV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/encryption.ts\n            \n            function\n            encryptPin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/encryption.ts\n            \n            variable\n            secret\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/ravePay.ts\n            \n            function\n            cardCharge\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/ravePay.ts\n            \n            variable\n            PRODUCTION_FLAG\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/ravePay.ts\n            \n            variable\n            rave\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/ravePay.ts\n            \n            variable\n            RAVE_PUBLICK_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/ravePay.ts\n            \n            variable\n            RAVE_SECRET_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/validation/validate.service.ts\n            \n            injectable\n            ValidateService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^16.1.7\n        \n            @nestjs/common : ^6.7.2\n        \n            @nestjs/core : ^6.7.2\n        \n            @nestjs/jwt : ^6.1.1\n        \n            @nestjs/mongoose : ^6.1.2\n        \n            @nestjs/passport : ^6.1.0\n        \n            @nestjs/platform-express : ^6.7.2\n        \n            @nestjs/swagger : ^3.1.0\n        \n            @sendgrid/mail : ^7.1.1\n        \n            agendash : ^1.0.0\n        \n            bcryptjs : ^2.4.3\n        \n            dotenv : ^8.2.0\n        \n            firebase-admin : ^8.12.1\n        \n            hbs : ^4.1.1\n        \n            lodash : ^4.17.15\n        \n            mailgen : ^2.0.13\n        \n            moment : ^2.24.0\n        \n            mongoose : ^5.7.11\n        \n            nestjs-agenda : ^1.0.2\n        \n            passport : ^0.4.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            ravepay : ^1.3.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^6.5.5\n        \n            swagger-ui-express : ^4.1.2\n        \n            validator : ^12.0.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            cardCharge   (src/.../ravePay.ts)\n                        \n                        \n                            decryptCardNum   (src/.../encryption.ts)\n                        \n                        \n                            decryptCVV   (src/.../encryption.ts)\n                        \n                        \n                            decryptPin   (src/.../encryption.ts)\n                        \n                        \n                            encryptCardNum   (src/.../encryption.ts)\n                        \n                        \n                            encryptCVV   (src/.../encryption.ts)\n                        \n                        \n                            encryptPin   (src/.../encryption.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    starting point for entire application\n\n\n                \n            \n        \n    \n    src/utils/ravePay.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            cardCharge\n                        \n                        \n                    \n                \n            \n            \n                \ncardCharge()\n                \n            \n\n\n\n\n        \n    \n    src/utils/encryption.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            decryptCardNum\n                        \n                        \n                    \n                \n            \n            \n                \ndecryptCardNum(card_no)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    card_no\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decryptCVV\n                        \n                        \n                    \n                \n            \n            \n                \ndecryptCVV(cvv)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cvv\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decryptPin\n                        \n                        \n                    \n                \n            \n            \n                \ndecryptPin(pin)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pin\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            encryptCardNum\n                        \n                        \n                    \n                \n            \n            \n                \nencryptCardNum(card_no)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    card_no\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            encryptCVV\n                        \n                        \n                    \n                \n            \n            \n                \nencryptCVV(cvv)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cvv\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            encryptPin\n                        \n                        \n                    \n                \n            \n            \n                \nencryptPin(pin)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pin\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  SAVELITE-API\n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular. -->\n\n\nDescription\nSavelite savelite api repository\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covStay in touch\n\nAuthors - Okoye Onyekachi & Mooreoluwa Babatunde\n\nLicense\n  Savelite is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2020 Austin Okoye\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExpenseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PlanModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ScheduleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_ExpenseModule\n\n\n\ncluster_ExpenseModule_exports\n\n\n\ncluster_ExpenseModule_providers\n\n\n\ncluster_PlanModule\n\n\n\ncluster_PlanModule_exports\n\n\n\ncluster_PlanModule_providers\n\n\n\ncluster_ScheduleModule\n\n\n\ncluster_ScheduleModule_exports\n\n\n\ncluster_ScheduleModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nCloudNotificationService \n\nCloudNotificationService \n\nCloudNotificationService  -->\n\nEmailModule->CloudNotificationService \n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nExpenseModule\n\nExpenseModule\n\nAppModule -->\n\nExpenseModule->AppModule\n\n\n\nCloudNotificationService  -->\n\nExpenseModule->CloudNotificationService \n\n\n\n\n\nExpenseService \n\nExpenseService \n\nExpenseService  -->\n\nExpenseModule->ExpenseService \n\n\n\n\n\nPlanModule\n\nPlanModule\n\nEmailModule -->\n\nPlanModule->EmailModule\n\n\n\nAppModule -->\n\nPlanModule->AppModule\n\n\n\nCloudNotificationService  -->\n\nPlanModule->CloudNotificationService \n\n\n\n\n\nPlanService \n\nPlanService \n\nPlanService  -->\n\nPlanModule->PlanService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nPlanModule->UserService \n\n\n\n\n\nScheduleModule\n\nScheduleModule\n\nAppModule -->\n\nScheduleModule->AppModule\n\n\n\n\n\nScheduleService \n\nScheduleService \n\nScheduleService  -->\n\nScheduleModule->ScheduleService \n\n\n\n\n\nUserModule\n\nUserModule\n\nEmailModule -->\n\nUserModule->EmailModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\nCloudNotificationService  -->\n\nUserModule->CloudNotificationService \n\n\n\nPlanService  -->\n\nUserModule->PlanService \n\n\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nValidateService\n\nValidateService\n\nAuthModule -->\n\nValidateService->AuthModule\n\n\n\n\n\nCloudNotificationService\n\nCloudNotificationService\n\nEmailModule -->\n\nCloudNotificationService->EmailModule\n\n\n\nExpenseModule -->\n\nCloudNotificationService->ExpenseModule\n\n\n\nPlanModule -->\n\nCloudNotificationService->PlanModule\n\n\n\nUserModule -->\n\nCloudNotificationService->UserModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nExpenseService\n\nExpenseService\n\nExpenseModule -->\n\nExpenseService->ExpenseModule\n\n\n\n\n\nPlanService\n\nPlanService\n\nPlanModule -->\n\nPlanService->PlanModule\n\n\n\nUserModule -->\n\nPlanService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nPlanModule -->\n\nUserService->PlanModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nScheduleService\n\nScheduleService\n\nScheduleModule -->\n\nScheduleService->ScheduleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            configKeys   (src/.../config.ts)\n                        \n                        \n                            expenseSchema   (src/.../expense.model.ts)\n                        \n                        \n                            firebaseApp   (src/.../cloud-notification.service.ts)\n                        \n                        \n                            plansSchema   (src/.../plan.model.ts)\n                        \n                        \n                            PRODUCTION_FLAG   (src/.../ravePay.ts)\n                        \n                        \n                            rave   (src/.../ravePay.ts)\n                        \n                        \n                            RAVE_PUBLICK_KEY   (src/.../ravePay.ts)\n                        \n                        \n                            RAVE_SECRET_KEY   (src/.../ravePay.ts)\n                        \n                        \n                            secret   (src/.../encryption.ts)\n                        \n                        \n                            serviceAccount   (src/.../cloud-notification.service.ts)\n                        \n                        \n                            UserSchema   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            configKeys\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    JWT_SECRET: 'YN2X2tW8dn3KyeGrRQHLMr952cFnUY2e',\n    SECRET: 'BhBwJueLqk7HzAFJcHeG22La85aRQXj4',\n    MONGODB_URI: 'mongodb://heroku_tg7gr6qm:q8e776fv65cscqpc1edujg0d1u@ds149353.mlab.com:49353/heroku_tg7gr6qm',\n    RAVE_PUBLICK_KEY: '',\n    RAVE_SECRET_KEY: '',\n    RAVE_PRODUCTION_FLAG: false,\n    SENDGRID_KEY: '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',\n    IMGUR_ENDPOINT: 'https://api.imgur.com/3/image',\n    IMGUR_CLIENT_ID: '924ff8331aaf4c1',\n    EMAIL_URL: 'https://savelite-api.herokuapp.com/email/link/',\n    version: '1.0.0',\n    DOWNLOAD_LINK: 'https://drive.google.com/file/d/1eGuKw8SnOym5E_HO-PdbuwfqKG2AxWi1/view?usp=sharing',\n}\n                        \n                    \n\n\n            \n        \n\n    src/model/expense.model.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            expenseSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n    _userID: {\n        type: mongoose.Schema.Types.ObjectId,\n        required: true,\n    },\n    budgetName: {\n        type: String,\n        required: true,\n    },\n    budget: {\n        type: Number,\n        required: true,\n    },\n    expenses: [\n        {\n            date: {\n                type: String,\n                required: true,\n            },\n            amount: {\n                type: Number,\n                required: true,\n            },\n            category: {\n                type: String,\n                required: true,\n            },\n            descr: {\n                type: String,\n                required: true,\n            },\n            remark: {\n                type: String,\n                required: true,\n                default: null,\n            },\n            icon: {\n                type: String,\n                required: true,\n            },\n        },\n    ],\n    images: [\n        {\n            id: {\n                type: String,\n                required: true,\n            },\n            name: {\n                type: String,\n                required: true,\n            },\n            datetime: {\n                type: Number,\n                required: true,\n            },\n            type: {\n                type: String,\n                required: true,\n            },\n            width: {\n                type: Number,\n                required: true,\n            },\n            height: {\n                type: Number,\n                required: true,\n            },\n            size: {\n                type: Number,\n                required: true,\n            },\n            deletehash: {\n                type: String,\n                required: true,\n            },\n            link: {\n                type: String,\n                required: true,\n            },\n        },\n    ],\n}, {timestamps: true})\n                        \n                    \n\n\n            \n        \n\n    src/controller/cloud-notification.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            firebaseApp\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : admin.initializeApp({\n    credential: admin.credential.cert(serviceAccount),\n    databaseURL: 'https://savelite-c8f57.firebaseio.com',\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            serviceAccount\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('../../savelite-c8f57-firebase-adminsdk.json')\n                        \n                    \n\n\n            \n        \n\n    src/model/plan.model.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            plansSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n    _userID: {\n        type: mongoose.Schema.Types.ObjectId,\n        required: true,\n    },\n    planName: {\n        type: String,\n        required: true,\n        unique: true,\n    },\n    periodicAmount: {\n        type: Number,\n        required: true,\n    },\n    targetAmount: {\n        type: String,\n        required: true,\n    },\n    withdrawalDate: {\n        type: Date,\n        required: true,\n    },\n    formatted_date: {\n        type: String,\n        required: true,\n    },\n    duration: {\n        type: String,\n        required: true,\n    },\n    card: {\n        firstname: {type: String, required: true},\n        lastname: {type: String, required: true},\n        expiry_date: {type: String, required: true},\n        card_no: {type: String, required: true},\n        pin: {type: String, required: true},\n        amount: {type: String, default: '0'},\n        cvv: {type: String, required: true},\n    },\n}, {timestamps: true})\n                        \n                    \n\n\n            \n        \n\n    src/utils/ravePay.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PRODUCTION_FLAG\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : configKeys.RAVE_PRODUCTION_FLAG\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rave\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Ravepay(RAVE_PUBLICK_KEY, RAVE_SECRET_KEY, PRODUCTION_FLAG)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RAVE_PUBLICK_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : configKeys.RAVE_PUBLICK_KEY\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RAVE_SECRET_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : configKeys.RAVE_SECRET_KEY\n                        \n                    \n\n\n            \n        \n\n    src/utils/encryption.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            secret\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : configKeys.SECRET\n                        \n                    \n\n\n            \n        \n\n    src/model/user.model.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n    fullname: {\n        type: String,\n        unique: true,\n        required: true,\n    },\n    username: {\n        type: String,\n        unique: true,\n        required: true,\n    },\n    phone_no: {\n        type: String,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n        trim: true,\n        minlenght: 1,\n        unique: true,\n        validate: {\n            validator: validator.isEmail,\n            message: '{value} is not a valid email',\n        },\n    },\n    password: {\n        type: String,\n        required: true,\n        minlength: 6,\n    },\n    profileImage: {\n        type: String,\n        default: undefined,\n    },\n    imgDelHash: {\n        type: String,\n        default: undefined,\n    },\n    reset_password_token: {\n        type: String,\n        default: undefined,\n    },\n    reset_password_expires: {\n        type: String,\n        default: undefined,\n    },\n    firebaseToken: {\n        type: String,\n        default: 'token',\n    },\n}, { timestamps: true })\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
