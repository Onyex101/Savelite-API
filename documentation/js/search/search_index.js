var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.432,1,2.387]],["body/controllers/AppController.html",[0,2.548,1,4.246,2,2.164,3,0.267,4,0.229,5,0.229,6,4.51,7,0.475,8,1.895,9,6.841,10,6.841,11,1.788,12,0.023,13,6.234,14,0.905,15,5.295,16,1.895,17,0.97,18,5.295,19,5.295,20,6.234,21,0.267,22,5.295,23,0.94,24,0.267,25,0.076,26,5.295,27,1.788,28,4.51,29,5.295,30,0.016,31,0.019,32,0.016]],["title/modules/AppModule.html",[33,1.129,34,2.387]],["body/modules/AppModule.html",[1,4.272,2,2.36,3,0.235,4,0.202,5,0.202,12,0.023,21,0.362,23,0.828,24,0.235,25,0.067,30,0.014,31,0.018,32,0.014,33,2.02,34,4.988,35,2.029,36,2.029,37,2.315,38,2.315,39,2.029,40,3.114,41,2.315,42,3.972,43,3.972,44,3.972,45,3.186,46,3.942,47,3.942,48,3.657,49,4.275,50,3.657,51,4.275,52,2.867,53,2.029,54,2.315,55,4.664,56,3.076,57,2.485,58,1.906,59,4.664,60,4.664,61,3.176,62,3.972,63,3.972,64,3.972,65,3.972,66,2.485,67,2.905,68,4.664,69,4.664,70,3.972,71,1.059,72,3.972,73,2.165]],["title/injectables/AppService.html",[51,2.183,74,0.622]],["body/injectables/AppService.html",[3,0.284,4,0.244,5,0.244,12,0.022,21,0.284,23,1.001,24,0.284,25,0.081,30,0.018,31,0.02,32,0.018,51,4.027,74,1.148,75,2.041,76,4.801]],["title/modules/AuthModule.html",[33,1.129,45,1.627]],["body/modules/AuthModule.html",[3,0.23,4,0.197,5,0.197,12,0.023,21,0.365,23,0.81,24,0.23,25,0.065,30,0.014,31,0.018,32,0.014,33,2,35,1.985,36,1.985,37,2.265,38,2.265,39,1.985,40,3.083,41,3.083,45,3.347,46,3.271,47,3.271,48,3.034,50,3.034,52,2.827,53,1.985,54,2.265,56,2.431,57,2.431,58,1.864,62,3.885,63,3.885,64,3.885,65,3.885,66,2.431,67,2.841,73,2.117,77,3.885,78,3.885,79,3.885,80,3.827,81,4.251,82,4.251,83,3.92,84,4.562,85,4.169,86,2.841,87,1.754,88,4.562,89,3.44,90,3.885,91,2.827,92,2.431,93,4.562,94,4.562,95,3.885,96,2.841,97,2.265,98,2.841,99,4.562,100,3.107,101,3.885,102,4.562,103,3.885,104,4.562,105,4.562,106,0.71,107,2.431]],["title/injectables/AuthService.html",[74,0.622,80,1.867]],["body/injectables/AuthService.html",[3,0.222,4,0.19,5,0.19,7,0.396,8,1.694,12,0.023,14,0.888,16,1.694,17,0.867,21,0.347,23,0.782,24,0.222,25,0.063,27,1.598,30,0.014,31,0.017,32,0.014,58,1.801,74,0.989,75,1.596,80,2.969,83,3.689,89,3.323,92,2.348,95,3.753,106,0.999,108,3.753,109,4.202,110,3.51,111,2.213,112,5.573,113,2.587,114,3.753,115,4.843,116,4,117,6.872,118,4.407,119,1.857,120,0.498,121,0.709,122,1.753,123,4.746,124,5.573,125,4.407,126,5.573,127,3.796,128,4.407,129,1.192,130,3.201,131,4.407,132,3.753,133,3.323,134,2.348,135,3.323,136,3.001,137,2.745,138,3.753,139,2.837,140,1.342,141,1.423,142,1.472,143,3.753,144,3.753,145,4.202,146,2.213,147,2.587,148,4.407,149,3.807,150,2.087,151,4.407,152,5.573,153,3.753,154,2.745,155,2.143,156,3.753,157,3.753,158,4.407,159,2.531,160,4.407,161,5.573,162,4.407,163,3.323,164,4.407,165,4.407,166,4.407,167,0.833,168,3.753,169,1.001,170,3.753]],["title/classes/BudgetDto.html",[25,0.05,171,1.065]],["body/classes/BudgetDto.html",[3,0.127,4,0.109,5,0.281,7,0.227,11,1.086,12,0.023,14,0.55,17,1.152,21,0.127,24,0.328,25,0.093,30,0.008,31,0.012,32,0.008,71,1.65,106,0.998,120,0.556,121,0.78,129,0.54,140,1.765,141,0.967,142,1.369,167,1.024,169,1.032,171,1.151,172,2.352,173,0.914,174,1.151,175,1.842,176,1.464,177,1.932,178,1.548,179,1.556,180,1.778,181,2.209,182,2.525,183,2.525,184,2.797,185,0.724,186,0.971,187,0.971,188,0.971,189,0.862,190,0.813,191,1.372,192,2.341,193,2.208,194,2.341,195,2.195,196,0.971,197,0.971,198,0.971,199,1.456,200,0.971,201,0.724,202,1.372,203,0.971,204,0.724,205,1.372,206,2.465,207,2.465,208,0.813,209,0.767,210,0.813,211,1.147,212,0.813,213,0.862,214,0.813,215,0.862,216,1.372,217,1.791,218,1.293,219,1.293,220,0.914,221,1.465,222,1.293,223,0.971,224,1.456,225,1.22,226,0.914,227,1.464,228,1.464,229,0.767,230,0.813,231,0.813,232,0.971,233,0.813,234,0.914,235,0.813,236,0.971,237,1.372,238,0.813,239,0.971,240,0.914,241,0.914,242,0.914,243,0.767,244,0.645,245,0.767,246,1.304,247,0.971,248,1.22,249,0.813,250,0.971,251,0.813,252,1.025,253,1.464,254,0.971,255,0.813,256,1.22,257,1.22,258,1.22,259,0.767,260,0.862,261,0.813,262,0.862,263,1.086,264,0.862,265,0.914,266,0.862,267,0.813,268,0.914,269,0.767,270,0.862]],["title/classes/CardDto.html",[25,0.05,215,1.196]],["body/classes/CardDto.html",[3,0.12,4,0.102,5,0.277,7,0.213,11,1.654,12,0.023,14,0.838,17,1.153,21,0.12,24,0.323,25,0.092,30,0.007,31,0.011,32,0.007,71,1.651,106,0.983,120,0.553,121,0.78,129,0.507,140,1.768,141,0.922,142,1.336,167,0.996,169,0.993,171,0.72,172,2.32,173,0.858,174,1.097,175,1.487,176,0.763,177,1.896,178,2.357,179,1.556,180,1.812,181,2.21,184,2.786,185,0.68,186,0.911,187,0.911,188,0.911,189,0.809,190,0.763,191,1.584,192,2.319,193,2.188,194,2.319,195,2.153,196,0.911,197,0.911,198,0.911,199,1.682,200,0.911,201,0.68,202,1.308,203,0.911,204,0.68,205,1.308,206,2.429,207,2.429,208,0.763,209,0.72,210,0.763,211,1.111,212,0.763,213,0.809,214,0.763,215,1.233,216,1.772,217,1.947,218,1.67,219,1.67,220,1.308,221,1.501,222,1.67,223,1.389,224,1.881,225,1.575,226,1.308,227,1.786,228,1.786,229,0.72,230,0.763,231,0.763,232,0.911,233,0.763,234,0.858,235,0.763,236,0.911,237,1.308,238,0.763,239,0.911,240,0.858,241,0.858,242,0.858,243,0.72,244,0.605,245,0.72,246,1.255,247,0.911,248,1.163,249,0.763,250,0.911,251,0.763,252,0.978,253,1.409,254,0.911,255,0.763,256,1.163,257,1.163,258,1.163,259,0.72,260,0.809,261,0.763,262,0.809,263,1.036,264,0.809,265,0.858,266,0.809,267,0.763,268,0.858,269,0.72,270,0.809,271,2.371,272,2.371,273,2.371,274,2.371,275,2.371,276,2.371,277,2.371]],["title/injectables/CloudNotificationService.html",[74,0.622,278,1.627]],["body/injectables/CloudNotificationService.html",[3,0.246,4,0.211,5,0.211,7,0.438,8,1.805,12,0.023,14,0.862,16,1.484,17,0.996,21,0.3,23,0.867,24,0.246,25,0.07,27,1.4,30,0.015,31,0.018,32,0.015,74,1.054,75,1.768,111,2.318,119,1.484,120,0.398,121,0.636,122,1.4,139,2.971,145,4.478,146,2.151,155,1.877,174,1.805,189,1.667,192,1.667,193,1.572,194,1.667,278,2.756,279,4.826,280,3.681,281,6.4,282,5.939,283,5.939,284,4.147,285,4.882,286,4.882,287,3.041,288,3.681,289,5.939,290,5.939,291,5.939,292,6.659,293,5.939,294,4.882,295,4.045,296,4.882,297,4.882,298,3.681,299,4.158,300,4.158,301,4.158,302,3.681,303,4.158,304,4.158,305,4.158,306,4.158,307,4.158,308,4.158,309,4.882,310,4.882]],["title/classes/CreateDto.html",[25,0.05,190,1.129]],["body/classes/CreateDto.html",[3,0.119,4,0.102,5,0.277,7,0.212,11,1.653,12,0.023,14,0.837,17,1.153,21,0.119,24,0.323,25,0.092,30,0.007,31,0.011,32,0.007,71,1.651,106,1.044,120,0.556,121,0.78,129,0.771,140,1.768,141,1.116,142,1.466,167,0.995,169,1.258,171,0.719,172,2.318,173,0.856,174,1.095,175,1.485,176,0.761,177,1.895,178,2.355,179,1.557,180,1.704,181,2.209,184,2.786,185,0.678,186,1.386,187,1.386,188,1.386,189,1.231,190,1.161,191,1.582,192,2.318,193,2.187,194,2.318,195,2.151,196,1.679,197,1.386,198,1.679,199,1.679,200,1.679,201,1.034,202,1.769,203,1.386,204,1.253,205,1.582,206,2.427,207,2.427,208,0.761,209,0.719,210,0.761,211,1.109,212,0.761,213,0.807,214,0.761,215,0.807,216,1.305,217,1.751,218,1.231,219,1.231,220,0.856,221,1.424,222,1.231,223,0.909,224,1.386,225,1.161,226,0.856,227,1.407,228,1.407,229,0.719,230,0.761,231,0.761,232,0.909,233,0.761,234,0.856,235,0.761,236,0.909,237,1.305,238,0.761,239,0.909,240,0.856,241,0.856,242,0.856,243,0.719,244,0.604,245,0.719,246,1.253,247,0.909,248,1.161,249,0.761,250,0.909,251,0.761,252,0.976,253,1.407,254,0.909,255,0.761,256,1.161,257,1.161,258,1.161,259,0.719,260,0.807,261,0.761,262,0.807,263,1.034,264,0.807,265,0.856,266,0.807,267,0.761,268,0.856,269,0.719,270,0.807,311,2.365,312,2.365,313,2.365,314,2.365,315,2.365,316,2.365,317,2.365]],["title/classes/DeleteDto.html",[25,0.05,264,1.196]],["body/classes/DeleteDto.html",[3,0.127,4,0.109,5,0.281,7,0.227,11,1.086,12,0.023,14,0.55,17,1.153,21,0.127,24,0.328,25,0.093,30,0.008,31,0.012,32,0.008,71,1.65,106,0.997,120,0.552,121,0.78,129,0.54,140,1.764,141,0.967,142,1.369,167,1.075,169,1.032,171,0.767,172,2.352,173,0.914,174,1.151,175,1.644,176,0.813,177,1.901,178,1.547,179,1.556,180,1.738,181,2.209,184,2.797,185,0.724,186,0.97,187,0.97,188,0.97,189,0.862,190,0.813,191,1.371,192,2.34,193,2.208,194,2.34,195,2.195,196,0.97,197,0.97,198,0.97,199,1.456,200,0.97,201,0.724,202,1.371,203,0.97,204,0.724,205,1.371,206,2.465,207,2.465,208,0.813,209,0.767,210,0.813,211,1.146,212,0.813,213,0.862,214,0.813,215,0.862,216,1.371,217,1.791,218,1.293,219,1.293,220,0.914,221,1.465,222,1.293,223,0.97,224,1.456,225,1.219,226,0.914,227,1.463,228,1.463,229,0.767,230,0.813,231,0.813,232,0.97,233,0.813,234,0.914,235,0.813,236,0.97,237,1.371,238,0.813,239,0.97,240,0.914,241,0.914,242,0.914,243,0.767,244,0.644,245,0.767,246,1.303,247,0.97,248,1.219,249,0.813,250,0.97,251,0.813,252,1.23,253,1.626,254,0.97,255,0.813,256,1.219,257,1.219,258,1.219,259,0.767,260,0.862,261,0.813,262,0.862,263,1.086,264,1.293,265,1.371,266,1.293,267,1.463,268,1.646,269,0.767,270,0.862,318,2.524,319,2.524]],["title/controllers/EmailController.html",[0,1.432,320,2.387]],["body/controllers/EmailController.html",[0,2.239,2,1.441,3,0.178,4,0.152,5,0.152,7,0.316,8,1.462,11,1.571,12,0.023,14,0.796,16,1.665,17,0.99,21,0.321,23,0.626,24,0.178,25,0.05,27,1.571,30,0.011,31,0.015,32,0.011,53,2.561,87,1.356,106,1.09,111,2.434,113,1.636,119,1.665,120,0.446,121,0.587,122,1.571,129,1.029,139,1.636,140,0.849,142,1.568,147,2.234,149,3.412,150,2.294,155,2.107,159,3.653,167,1.271,169,1.558,179,1.259,185,1.011,201,1.38,211,1.543,212,1.896,213,2.104,214,1.896,244,1.503,263,1.688,270,1.643,320,3.278,321,3.003,322,2.401,323,4.812,324,4.099,325,4.812,326,4.099,327,4.812,328,5.887,329,4.099,330,4.812,331,4.812,332,4.812,333,4.812,334,4.812,335,4.099,336,4.812,337,3.526,338,4.332,339,3.526,340,4.332,341,3.278,342,2.401,343,3.732,344,3.526,345,4.812,346,5.014,347,3.278,348,4.099,349,5.887,350,4.812,351,4.439,352,3.157,353,4.812,354,3.526,355,3.526,356,4.009,357,3.278,358,3.526,359,3.278,360,4.812,361,3.278,362,4.812,363,3.526,364,3.526,365,3.526,366,4.812,367,4.812,368,4.812,369,4.812,370,4.812,371,3.629,372,3.629,373,3.278,374,2.401,375,4.099,376,2.952,377,3.003,378,2.401,379,1.878,380,3.147,381,3.003,382,2.401,383,2.401,384,2.401,385,2.401,386,2.401,387,3.526,388,3.526,389,3.278,390,2.997,391,3.732,392,3.732,393,3.732,394,3.526,395,2.389,396,3.526,397,2.389,398,4.099,399,3.526,400,2.401,401,2.196,402,3.526,403,2.658,404,3.526,405,3.526,406,3.526,407,3.526,408,3.526,409,3.526]],["title/modules/EmailModule.html",[33,1.129,46,2.013]],["body/modules/EmailModule.html",[2,2.329,3,0.231,4,0.197,5,0.197,12,0.023,21,0.363,23,0.811,24,0.231,25,0.065,30,0.014,31,0.018,32,0.014,33,2.001,35,1.987,36,1.987,37,2.267,38,2.267,39,1.987,40,3.084,41,3.084,45,2.646,46,4.157,48,3.638,50,3.638,52,2.83,53,1.987,54,2.267,56,3.037,57,2.433,58,1.867,73,2.12,85,3.55,86,2.845,87,1.756,91,2.83,92,2.433,96,2.845,97,2.267,98,2.845,106,0.711,107,3.31,120,0.506,246,1.31,278,3.334,320,4.232,380,4.126,381,3.89,410,3.89,411,4.568,412,3.89,413,3.89,414,4.568,415,4.568,416,4.568,417,2.83,418,2.433,419,4.568,420,4.568,421,3.037,422,3.111,423,2.845,424,2.845,425,2.845,426,2.267]],["title/classes/EmailResetDto.html",[25,0.05,212,1.129]],["body/classes/EmailResetDto.html",[3,0.129,4,0.11,5,0.281,7,0.229,11,0.733,12,0.023,14,0.371,17,1.153,21,0.129,24,0.329,25,0.093,30,0.008,31,0.012,32,0.008,71,1.65,106,1.013,120,0.553,121,0.78,129,0.546,140,1.763,141,0.976,142,1.375,167,1.029,169,1.235,171,0.776,172,2.358,173,0.925,174,1.161,175,1.544,176,0.823,177,1.906,178,1.044,179,1.556,180,1.745,181,2.209,184,2.799,185,0.733,186,0.982,187,0.982,188,0.982,189,0.872,190,0.823,191,1.384,192,2.345,193,2.212,194,2.345,195,2.203,196,0.982,197,0.982,198,0.982,199,1.469,200,0.982,201,0.733,202,1.384,203,0.982,204,0.733,205,1.658,206,2.472,207,2.472,208,0.823,209,0.776,210,0.823,211,1.153,212,1.23,213,1.304,214,0.823,215,0.872,216,1.384,217,1.798,218,1.304,219,1.304,220,0.925,221,1.472,222,1.304,223,0.982,224,1.469,225,1.23,226,0.925,227,1.474,228,1.474,229,0.776,230,0.823,231,0.823,232,0.982,233,0.823,234,0.925,235,0.823,236,0.982,237,1.384,238,0.823,239,0.982,240,0.925,241,0.925,242,0.925,243,0.776,244,0.652,245,0.776,246,1.313,247,0.982,248,1.23,249,0.823,250,0.982,251,0.823,252,1.034,253,1.474,254,0.982,255,0.823,256,1.23,257,1.23,258,1.23,259,0.776,260,0.872,261,0.823,262,0.872,263,1.096,264,0.872,265,0.925,266,0.872,267,0.823,268,0.925,269,0.776,270,0.872,427,2.554]],["title/injectables/EmailService.html",[74,0.622,380,2.013]],["body/injectables/EmailService.html",[3,0.284,4,0.119,5,0.119,7,0.248,8,1.231,12,0.023,14,0.853,16,1.844,17,1.018,21,0.306,23,0.491,24,0.14,25,0.04,27,1.785,28,4.497,30,0.009,31,0.013,32,0.009,53,2.641,66,1.473,67,1.722,74,0.719,75,1.001,97,1.373,100,4.001,103,2.355,106,1.102,110,3.647,111,2.127,119,1.785,120,0.507,121,0.629,122,1.685,129,0.866,130,2.327,135,2.085,136,1.883,139,2.726,142,1.646,146,2.397,147,2.996,150,2.072,154,3.658,155,1.558,156,4.084,159,2.327,163,3.616,167,1.275,168,3.451,169,1.503,170,2.355,179,1.202,201,1.162,211,1.569,213,1.383,220,1.467,221,1.097,260,1.383,262,2.405,263,1.785,324,3.451,335,3.451,346,3.451,348,4.497,352,2.621,361,2.76,371,3.055,372,3.982,376,2.889,380,2.327,395,2.011,397,2.011,401,2.524,428,2.355,429,1.881,430,2.813,431,4.052,432,4.052,433,4.052,434,4.052,435,2.159,436,2.524,437,4.052,438,2.765,439,4.052,440,4.052,441,4.052,442,2.524,443,4.052,444,2.765,445,3.451,446,4.052,447,5.874,448,4.052,449,3.055,450,3.451,451,4.052,452,2.765,453,2.76,454,4.052,455,4.052,456,3.451,457,4.052,458,4.052,459,4.052,460,4.052,461,2.765,462,4.052,463,4.052,464,4.052,465,2.765,466,4.052,467,3.451,468,3.451,469,4.052,470,4.052,471,5.28,472,3.055,473,3.451,474,4.052,475,5.28,476,1.722,477,1.883,478,1.883,479,3.033,480,2.327,481,1.883,482,2.765,483,2.765,484,2.355,485,4.084,486,4.796,487,2.765,488,2.765,489,2.76,490,2.765,491,2.765,492,3.451,493,3.451,494,3.266,495,4.052,496,2.355,497,4.052,498,2.765,499,2.355,500,3.451,501,4.052,502,4.052,503,2.355,504,2.765,505,2.765,506,2.765,507,2.355,508,2.765,509,2.765,510,2.355,511,2.765,512,4.052,513,2.765,514,2.765,515,2.765,516,2.765,517,2.355,518,2.765,519,2.765,520,2.765,521,2.765,522,2.765,523,2.765,524,2.765,525,2.765,526,2.765,527,2.765,528,2.765,529,4.052,530,3.451,531,2.765,532,2.765,533,2.765,534,2.765,535,2.765,536,2.765,537,2.765,538,2.765,539,2.765,540,2.765,541,2.765,542,2.765,543,4.052,544,2.765,545,2.765,546,4.052,547,2.765,548,2.765,549,2.765]],["title/controllers/ExpenseController.html",[0,1.432,550,2.387]],["body/controllers/ExpenseController.html",[0,0.971,2,0.971,3,0.343,4,0.103,5,0.103,7,0.213,8,1.1,11,1.748,12,0.023,14,0.885,16,1.852,17,1.099,21,0.266,23,0.422,24,0.12,25,0.034,27,1.748,30,0.007,31,0.011,32,0.007,87,0.914,111,2.539,113,1.103,119,1.852,120,0.497,121,0.653,122,1.748,129,1.272,139,1.103,140,0.572,147,2.829,149,3.797,150,2.158,155,2.344,159,3.881,167,1.373,171,1.754,175,2.16,179,1.304,185,0.682,210,2.257,244,1.418,245,1.754,246,1.86,252,1.326,253,1.916,259,1.602,262,1.672,266,1.235,322,1.619,338,1.619,340,4.602,341,2.464,342,1.619,343,4.152,352,3.535,356,4.54,357,3.782,373,1.619,374,1.619,376,3.244,378,1.619,379,1.266,382,1.619,383,1.619,384,1.619,385,1.619,386,1.619,389,4.053,390,3.706,391,4.152,392,4.152,393,4.152,395,3.026,397,3.026,400,1.619,401,1.48,403,3.304,550,2.464,551,2.024,552,3.082,553,3.082,554,3.618,555,3.618,556,3.082,557,3.082,558,3.618,559,3.082,560,3.618,561,2.377,562,5.378,563,2.377,564,2.377,565,3.618,566,3.618,567,2.377,568,2.377,569,2.377,570,3.618,571,3.618,572,2.377,573,2.377,574,3.082,575,2.377,576,6.096,577,2.377,578,2.377,579,2.377,580,3.618,581,2.377,582,2.377,583,2.377,584,4.898,585,3.618,586,3.618,587,2.377,588,2.377,589,2.377,590,2.377,591,2.377,592,2.377,593,3.082,594,2.377,595,2.377,596,2.377,597,2.377,598,2.377,599,2.377,600,2.377,601,3.618,602,2.024,603,2.024,604,2.078,605,2.024,606,2.377,607,2.377,608,2.377,609,4.596,610,2.377,611,2.377,612,2.377,613,5.192,614,2.377,615,2.377,616,2.377,617,4.917,618,2.377,619,2.377,620,2.377,621,2.377,622,2.377,623,2.377,624,2.377,625,2.377,626,2.377,627,2.377,628,2.377,629,2.377,630,2.377,631,2.377,632,2.377,633,2.377,634,2.377,635,2.377,636,2.377,637,2.377,638,2.377]],["title/classes/ExpenseDto.html",[25,0.05,245,1.065]],["body/classes/ExpenseDto.html",[3,0.123,4,0.105,5,0.279,7,0.219,11,1.529,12,0.023,14,0.774,17,1.153,21,0.123,24,0.325,25,0.092,30,0.008,31,0.011,32,0.008,71,1.651,106,0.989,120,0.549,121,0.781,129,0.521,140,1.767,141,0.942,142,1.351,167,1.008,169,1.011,171,0.741,172,2.334,173,0.883,174,1.121,175,1.508,176,0.785,177,1.92,178,2.179,179,1.557,180,1.824,181,2.21,184,2.791,185,0.699,186,0.937,187,0.937,188,0.937,189,0.832,190,0.785,191,1.336,192,2.329,193,2.197,194,2.329,195,2.172,196,0.937,197,0.937,198,0.937,199,1.419,200,0.937,201,0.699,202,1.336,203,0.937,204,0.699,205,1.336,206,2.445,207,2.445,208,0.785,209,0.741,210,0.785,211,1.127,212,0.785,213,0.832,214,0.785,215,0.832,216,1.336,217,1.77,218,1.26,219,1.26,220,0.883,221,1.623,222,1.26,223,0.937,224,1.419,225,1.188,226,0.883,227,1.433,228,1.433,229,0.741,230,0.785,231,0.785,232,0.937,233,0.785,234,0.883,235,0.785,236,0.937,237,1.336,238,0.785,239,0.937,240,0.883,241,0.883,242,0.883,243,0.741,244,0.623,245,1.121,246,1.608,247,1.419,248,1.717,249,1.433,250,1.419,251,1.433,252,0.999,253,1.433,254,0.937,255,0.785,256,1.188,257,1.188,258,1.188,259,0.741,260,0.832,261,0.785,262,0.832,263,1.058,264,0.832,265,0.883,266,0.832,267,0.785,268,0.883,269,0.741,270,0.832,639,2.438,640,2.438,641,2.438,642,2.438,643,2.438]],["title/modules/ExpenseModule.html",[33,1.129,47,2.013]],["body/modules/ExpenseModule.html",[2,2.371,3,0.237,4,0.203,5,0.203,12,0.023,21,0.362,23,0.834,24,0.237,25,0.067,30,0.015,31,0.018,32,0.015,33,2.027,35,2.045,36,2.045,37,2.333,38,2.333,39,2.045,40,3.124,41,3.124,45,2.693,47,4.101,52,2.88,53,2.045,54,2.333,56,2.503,57,2.503,58,1.92,61,3.2,73,2.181,85,3.613,86,2.927,87,1.807,91,2.88,92,2.503,96,2.927,97,2.333,98,2.927,106,0.731,107,3.353,120,0.513,246,1.348,278,3.347,417,2.88,418,2.503,421,3.091,422,3.2,423,2.927,424,2.927,425,2.927,426,2.333,550,4.286,604,4.141,605,4.002,644,4.002,645,4.002,646,4.002,647,4.699,648,2.333,649,4.002,650,4.699]],["title/injectables/ExpenseService.html",[74,0.622,604,2.013]],["body/injectables/ExpenseService.html",[3,0.243,4,0.121,5,0.121,7,0.25,8,1.239,12,0.023,14,0.939,16,1.966,17,1.115,21,0.285,23,0.495,24,0.141,25,0.04,27,2.034,30,0.009,31,0.013,32,0.009,71,1.204,74,0.724,75,1.01,106,1.111,110,4.092,111,2.58,119,1.966,120,0.534,121,0.702,122,1.855,129,1.361,130,3.877,146,2.204,150,1.926,155,2.447,167,1.368,171,1.849,175,1.849,176,1.552,179,0.597,180,1.17,211,0.926,221,1.104,245,1.849,248,1.313,249,1.313,251,1.313,252,1.435,255,0.898,256,0.898,257,0.898,258,0.898,261,0.898,263,0.8,267,1.313,268,2.204,347,2.778,352,3.16,376,1.893,379,1.486,395,3.16,397,3.16,429,1.893,430,2.825,435,2.173,436,2.54,476,1.737,477,1.9,478,1.9,479,3.715,480,1.602,481,1.9,494,4.405,552,3.473,553,3.473,556,3.473,557,3.473,559,3.473,604,2.342,651,2.376,652,4.078,653,4.078,654,4.078,655,4.078,656,4.078,657,2.79,658,4.078,659,2.79,660,4.078,661,2.79,662,2.778,663,3.075,664,4.078,665,2.79,666,4.078,667,2.79,668,4.078,669,2.79,670,4.078,671,2.79,672,4.078,673,2.79,674,4.078,675,2.79,676,2.104,677,1.9,678,2.104,679,1.9,680,2.79,681,4.028,682,4.877,683,5.421,684,4.805,685,3.075,686,5.893,687,3.473,688,3.635,689,2.79,690,2.79,691,2.79,692,2.79,693,4.805,694,5.183,695,3.075,696,2.79,697,2.79,698,2.79,699,4.078,700,4.078,701,2.79,702,2.79,703,2.79]],["title/interfaces/IExpense.html",[704,1.867,705,2.387]],["body/interfaces/IExpense.html",[3,0.21,4,0.18,5,0.18,7,0.374,12,0.023,17,1.142,21,0.21,24,0.271,30,0.013,31,0.017,32,0.013,71,1.649,120,0.438,121,0.789,127,4.283,134,2.863,146,1.507,150,1.421,167,1.125,174,1.633,175,1.978,176,2.096,177,2.053,180,1.541,181,2.203,221,1.454,248,1.73,249,1.73,251,1.73,255,1.73,256,1.73,257,1.73,258,1.73,261,1.73,263,1.541,267,2.096,287,2.592,421,2.218,429,1.932,681,4.054,685,4.052,688,4.909,704,2.218,705,3.66,706,2.835,707,3.139,708,3.139,709,2.835,710,3.139,711,3.545,712,2.835]],["title/interfaces/IPlan.html",[704,1.867,713,2.183]],["body/interfaces/IPlan.html",[3,0.222,4,0.19,5,0.19,7,0.395,12,0.023,17,1.156,21,0.222,24,0.281,30,0.014,31,0.017,32,0.014,71,1.641,121,0.788,127,3.79,134,2.965,146,1.592,150,1.501,174,1.691,177,1.261,180,1.596,181,2.181,201,1.261,217,2.012,218,1.9,219,1.9,221,1.19,222,1.9,225,1.792,227,1.792,228,1.792,231,2.132,233,2.132,235,2.132,238,2.132,243,2.012,287,2.738,417,2.183,429,2.041,681,4.123,704,2.342,706,2.994,708,3.315,709,2.994,710,3.315,712,2.994,713,3.466,714,3.315,715,4.992,716,2.738]],["title/interfaces/IUser.html",[137,2.183,704,1.867]],["body/interfaces/IUser.html",[3,0.197,4,0.168,5,0.168,7,0.35,12,0.023,17,1.15,21,0.291,24,0.26,27,1.476,30,0.012,31,0.016,32,0.012,71,1.572,91,1.934,106,0.801,116,2.426,121,0.777,122,2.015,134,2.741,135,2.937,136,2.653,137,3.205,141,1.628,142,1.608,146,2.087,147,1.808,150,1.33,153,3.317,163,3.88,169,1.486,174,1.564,177,1.653,181,1.937,193,1.657,201,1.653,204,1.828,211,0.884,260,1.967,284,2.426,287,3.969,288,2.937,429,1.808,442,2.426,456,3.317,472,2.937,473,3.317,479,3.309,489,2.653,499,3.317,500,4.907,530,4.382,704,2.075,706,2.653,708,2.937,709,2.653,712,2.653,717,2.937,718,6.129,719,4.34,720,4.34,721,4.805,722,4.34,723,5.428,724,5.428,725,4.345,726,3.317,727,3.317,728,3.317,729,3.317,730,3.317,731,5.22,732,3.895,733,3.895,734,2.937,735,3.317,736,3.895,737,3.895,738,3.895,739,3.895,740,3.895,741,3.895,742,3.895,743,3.895,744,3.895,745,3.895,746,3.895,747,3.895,748,3.895,749,3.895,750,3.895,751,5.145,752,3.895,753,3.895]],["title/classes/ImageDto.html",[25,0.05,252,0.949]],["body/classes/ImageDto.html",[3,0.118,4,0.101,5,0.276,7,0.209,11,1.739,12,0.023,14,0.881,17,1.152,21,0.118,24,0.322,25,0.091,30,0.007,31,0.011,32,0.007,71,1.652,106,0.979,120,0.555,121,0.782,129,0.499,140,1.77,141,0.911,142,1.328,167,1.119,169,0.984,171,0.709,172,2.312,173,0.845,174,1.084,175,1.475,176,0.752,177,1.972,178,2.478,179,1.557,180,1.697,181,2.211,184,2.783,185,0.669,186,0.897,187,0.897,188,0.897,189,0.797,190,0.752,191,1.292,192,2.314,193,2.182,194,2.314,195,2.143,196,0.897,197,0.897,198,0.897,199,1.372,200,0.897,201,0.669,202,1.292,203,0.897,204,0.669,205,1.292,206,2.419,207,2.419,208,0.752,209,0.709,210,0.752,211,1.102,212,0.752,213,0.797,214,0.752,215,0.797,216,1.292,217,1.743,218,1.218,219,1.218,220,0.845,221,1.492,222,1.218,223,0.897,224,1.372,225,1.149,226,0.845,227,1.395,228,1.395,229,0.709,230,0.752,231,0.752,232,0.897,233,0.752,234,0.845,235,0.752,236,0.897,237,1.292,238,0.752,239,0.897,240,0.845,241,0.845,242,0.845,243,0.709,244,0.596,245,0.709,246,1.243,247,0.897,248,1.149,249,0.752,250,0.897,251,0.752,252,1.173,253,1.684,254,1.372,255,1.395,256,1.684,257,1.684,258,1.684,259,1.084,260,1.218,261,1.395,262,1.218,263,1.5,264,0.797,265,0.845,266,0.797,267,0.752,268,0.845,269,0.709,270,0.797,754,2.334,755,2.334,756,2.334,757,2.334,758,2.334,759,2.334,760,2.334,761,2.334,762,2.334]],["title/injectables/JwtStrategy.html",[74,0.622,81,2.183]],["body/injectables/JwtStrategy.html",[3,0.313,4,0.197,5,0.197,7,0.409,8,1.731,12,0.023,14,0.827,16,1.386,21,0.328,23,0.81,24,0.23,25,0.065,27,1.308,30,0.014,31,0.018,32,0.014,66,2.431,67,2.841,73,2.117,74,1.011,75,1.652,81,3.547,87,1.754,97,3.323,101,3.885,106,0.886,111,2.249,113,2.882,116,4.251,119,1.386,120,0.372,121,0.489,122,1.308,167,1.077,169,1.293,179,0.976,191,2.063,211,1.293,371,4.904,376,2.117,429,2.117,442,4.05,445,4.851,467,5.539,496,5.289,662,3.879,763,3.885,764,4.562,765,5.695,766,4.562,767,5.695,768,5.695,769,5.289,770,4.682,771,5.695,772,5.695,773,5.695,774,5.695,775,5.695,776,5.695,777,5.695,778,5.695,779,5.695,780,5.695,781,5.695,782,6.503,783,5.695,784,5.695,785,5.695,786,5.695,787,5.695,788,5.695,789,5.695,790,5.695,791,4.562,792,3.885,793,3.885,794,3.885,795,4.562,796,4.562,797,4.562,798,4.562]],["title/injectables/LocalStrategy.html",[74,0.622,82,2.183]],["body/injectables/LocalStrategy.html",[3,0.25,4,0.214,5,0.214,7,0.444,8,1.819,12,0.023,14,0.869,16,1.503,17,1.083,21,0.338,23,0.878,24,0.25,25,0.071,27,1.419,30,0.015,31,0.019,32,0.015,74,1.063,75,1.791,80,3.709,82,3.728,87,1.902,90,4.213,106,0.931,111,2.331,113,2.296,116,3.728,119,1.819,120,0.488,121,0.641,122,1.717,129,1.058,130,3.438,132,4.213,140,1.191,141,1.529,142,1.442,146,2.168,155,1.902,429,2.296,769,4.213,770,3.73,792,4.213,793,4.213,794,4.213,799,4.213,800,4.947,801,4.947,802,5.986,803,6.849,804,4.947,805,6.437,806,4.213,807,4.947,808,4.947]],["title/classes/LoginDto.html",[25,0.05,208,1.129]],["body/classes/LoginDto.html",[3,0.128,4,0.109,5,0.281,7,0.227,11,1.087,12,0.023,14,0.55,17,1.153,21,0.128,24,0.328,25,0.093,30,0.008,31,0.012,32,0.008,71,1.65,106,1.011,120,0.552,121,0.78,129,0.54,140,1.765,141,1.161,142,1.494,167,1.024,169,1.033,171,0.768,172,2.353,173,0.915,174,1.152,175,1.536,176,0.814,177,1.902,178,1.549,179,1.556,180,1.739,181,2.209,184,2.797,185,0.725,186,0.972,187,0.972,188,0.972,189,0.863,190,0.814,191,1.373,192,2.341,193,2.208,194,2.341,195,2.196,196,0.972,197,0.972,198,0.972,199,1.457,200,0.972,201,0.725,202,1.83,203,0.972,204,0.725,205,1.373,206,2.466,207,2.466,208,1.221,209,0.768,210,0.814,211,1.147,212,0.814,213,0.863,214,0.814,215,0.863,216,1.373,217,1.791,218,1.294,219,1.294,220,0.915,221,1.465,222,1.294,223,0.972,224,1.457,225,1.221,226,0.915,227,1.465,228,1.465,229,0.768,230,0.814,231,0.814,232,0.972,233,0.814,234,0.915,235,0.814,236,0.972,237,1.373,238,0.814,239,0.972,240,0.915,241,0.915,242,0.915,243,0.768,244,0.645,245,0.768,246,1.304,247,0.972,248,1.221,249,0.814,250,0.972,251,0.814,252,1.026,253,1.465,254,0.972,255,0.814,256,1.221,257,1.221,258,1.221,259,0.768,260,0.863,261,0.814,262,0.863,263,1.087,264,0.863,265,0.915,266,0.863,267,0.814,268,0.915,269,0.768,270,0.863,809,2.527,810,2.527]],["title/injectables/ModelService.html",[74,0.622,430,1.867]],["body/injectables/ModelService.html",[3,0.245,4,0.21,5,0.21,7,0.435,8,1.798,12,0.023,14,0.859,16,1.474,21,0.354,23,0.861,24,0.245,25,0.069,27,1.391,30,0.015,31,0.018,32,0.015,58,1.982,74,1.05,75,1.757,92,2.584,113,2.746,114,4.131,115,5.41,119,1.798,120,0.482,121,0.633,122,1.696,123,5.038,133,3.658,134,2.584,137,3.021,138,4.131,140,1.537,278,3.084,418,2.584,423,3.021,424,3.021,430,3.151,435,3.737,436,3.684,476,3.684,479,3.397,480,3.397,705,3.304,713,3.021,811,4.131,812,5.436,813,6.382,814,5.436,815,4.851,816,4.851,817,4.851,818,4.851,819,4.131,820,4.851]],["title/classes/PassResPageDto.html",[25,0.05,214,1.129]],["body/classes/PassResPageDto.html",[3,0.126,4,0.108,5,0.28,7,0.224,11,1.295,12,0.023,14,0.656,17,1.153,21,0.126,24,0.327,25,0.093,30,0.008,31,0.012,32,0.008,71,1.651,106,1.019,120,0.551,121,0.78,129,0.534,140,1.766,141,0.959,142,1.489,167,1.143,169,1.025,171,0.759,172,2.346,173,0.904,174,1.141,175,1.526,176,0.804,177,1.898,178,1.845,179,1.556,180,1.733,181,2.209,184,2.795,185,0.716,186,0.96,187,0.96,188,0.96,189,0.852,190,0.804,191,1.36,192,2.337,193,2.204,194,2.337,195,2.188,196,0.96,197,0.96,198,0.96,199,1.444,200,0.96,201,0.716,202,1.36,203,0.96,204,0.716,205,1.36,206,2.459,207,2.459,208,0.804,209,0.759,210,0.804,211,1.333,212,0.804,213,0.852,214,1.21,215,0.852,216,1.36,217,1.784,218,1.282,219,1.282,220,0.904,221,1.458,222,1.282,223,0.96,224,1.444,225,1.21,226,0.904,227,1.454,228,1.454,229,0.759,230,0.804,231,0.804,232,0.96,233,0.804,234,0.904,235,0.804,236,0.96,237,1.36,238,0.804,239,0.96,240,0.904,241,0.904,242,0.904,243,0.759,244,0.638,245,0.759,246,1.295,247,0.96,248,1.21,249,0.804,250,0.96,251,0.804,252,1.017,253,1.454,254,0.96,255,0.804,256,1.21,257,1.21,258,1.21,259,0.759,260,0.852,261,0.804,262,0.852,263,1.077,264,0.852,265,0.904,266,0.852,267,0.804,268,0.904,269,0.759,270,0.852,821,2.497,822,2.497,823,2.497]],["title/controllers/PlanController.html",[0,1.432,824,2.387]],["body/controllers/PlanController.html",[0,1.353,2,1.353,3,0.352,4,0.143,5,0.143,7,0.297,8,1.4,11,1.728,12,0.023,14,0.875,16,1.831,17,1.031,21,0.304,23,0.588,24,0.167,25,0.047,27,1.728,30,0.01,31,0.014,32,0.01,87,1.273,111,2.527,113,1.537,119,1.831,120,0.491,121,0.614,122,1.728,139,1.537,140,0.798,147,2.797,149,3.753,150,2.185,155,2.317,159,3.855,167,1.337,179,1.288,185,0.95,210,2.235,217,1.4,229,1.945,230,2.277,244,1.177,259,1.611,266,1.573,322,2.255,338,2.255,340,4.572,341,3.904,342,3.139,343,4.104,352,3.333,356,4.249,357,3.139,359,3.904,373,3.139,374,2.255,376,3.149,378,2.255,379,1.764,382,2.255,383,2.255,384,2.255,385,2.255,386,2.255,389,3.61,390,2.87,391,4.104,392,4.104,393,4.104,395,2.991,397,2.991,400,3.139,401,2.87,403,2.497,426,2.288,453,3.139,480,2.647,510,2.82,562,5.332,574,2.82,602,2.82,603,2.82,609,4.543,613,5.132,617,3.925,824,3.139,825,2.82,826,3.925,827,4.609,828,4.609,829,3.925,830,4.609,831,3.311,832,3.311,833,3.311,834,3.311,835,3.311,836,3.311,837,3.311,838,3.311,839,3.311,840,3.311,841,3.311,842,3.311,843,3.311,844,3.311,845,3.311,846,3.997,847,3.475,848,2.824,849,2.82,850,3.311,851,3.311,852,3.311,853,3.311,854,3.311,855,3.311,856,3.311,857,3.311,858,3.311,859,3.311,860,3.311,861,3.311,862,3.311,863,3.311,864,3.311]],["title/classes/PlanDto.html",[25,0.05,229,1.065]],["body/classes/PlanDto.html",[3,0.121,4,0.104,5,0.278,7,0.215,11,1.598,12,0.023,14,0.809,17,1.153,21,0.121,24,0.324,25,0.092,30,0.007,31,0.011,32,0.007,71,1.651,106,0.986,120,0.551,121,0.781,127,1.633,129,0.513,140,1.768,141,0.93,142,1.342,167,1.001,169,1,171,0.729,172,2.326,173,0.868,174,1.107,175,1.495,176,0.772,177,1.883,178,2.277,179,1.556,180,1.787,181,2.209,184,2.788,185,0.688,186,0.922,187,0.922,188,0.922,189,0.819,190,0.772,191,1.319,192,2.323,193,2.191,194,2.323,195,2.161,196,0.922,197,0.922,198,0.922,199,1.401,200,0.922,201,0.688,202,1.319,203,0.922,204,0.688,205,1.319,206,2.435,207,2.435,208,0.772,209,0.729,210,0.772,211,1.117,212,0.772,213,0.819,214,0.772,215,0.819,216,1.319,217,1.894,218,1.244,219,1.244,220,0.868,221,1.508,222,1.244,223,0.922,224,1.401,225,1.173,226,0.868,227,1.419,228,1.419,229,1.107,230,1.173,231,1.419,232,1.401,233,1.419,234,1.319,235,1.419,236,1.401,237,1.782,238,1.419,239,1.401,240,1.319,241,1.319,242,1.319,243,1.339,244,0.93,245,0.729,246,1.264,247,0.922,248,1.173,249,0.772,250,0.922,251,0.772,252,0.986,253,1.419,254,0.922,255,0.772,256,1.173,257,1.173,258,1.173,259,0.729,260,0.819,261,0.772,262,0.819,263,1.045,264,0.819,265,0.868,266,0.819,267,0.772,268,0.868,269,0.729,270,0.819,865,2.398,866,2.398,867,2.398,868,2.398,869,2.398,870,2.398]],["title/modules/PlanModule.html",[33,1.129,48,1.867]],["body/modules/PlanModule.html",[2,2.342,3,0.232,4,0.199,5,0.199,12,0.023,21,0.361,23,0.818,24,0.232,25,0.066,30,0.014,31,0.018,32,0.014,33,2.009,35,2.004,36,2.004,37,2.287,38,2.287,39,2.004,40,3.096,41,3.096,45,2.66,48,3.847,52,2.845,53,2.004,54,2.287,56,2.454,57,2.454,58,1.883,61,3.138,73,2.138,85,3.569,86,2.869,87,1.771,91,2.845,92,2.454,96,2.869,97,2.287,98,2.869,106,0.717,107,3.323,120,0.508,246,1.321,278,3.338,417,2.845,418,2.454,421,3.053,422,3.138,423,2.869,424,2.869,425,2.869,426,2.287,648,3.57,649,3.924,824,4.248,848,3.832,871,3.924,872,3.924,873,3.924,874,4.607,875,4.607,876,4.607]],["title/injectables/PlanService.html",[74,0.622,848,1.867]],["body/injectables/PlanService.html",[3,0.36,4,0.093,5,0.093,7,0.193,8,1.017,12,0.023,14,0.895,16,2.044,17,0.783,21,0.281,23,0.381,24,0.108,25,0.031,27,1.94,30,0.007,31,0.01,32,0.007,71,0.487,74,0.594,75,0.778,106,1.135,110,2.361,111,2.449,119,1.902,120,0.502,121,0.634,122,1.767,129,1.231,130,3.686,139,3.01,143,3.954,146,2.389,147,2.336,150,1.82,154,3.767,155,2.274,167,1.352,177,0.616,179,1.293,180,0.616,211,1.457,217,2.065,221,0.906,226,0.778,229,1.411,230,2.288,231,1.078,233,1.078,234,0.778,235,1.078,237,1.212,238,0.691,240,0.778,241,0.778,242,0.778,243,1.017,244,1.697,259,1.411,265,1.212,270,0.733,284,2.561,347,4.371,351,1.619,352,2.498,359,2.279,361,2.279,376,3.084,379,1.144,390,2.891,395,2.646,397,2.646,426,2.305,429,1.553,430,2.473,435,1.783,436,2.084,442,1.337,449,2.523,450,5.151,468,2.85,476,1.337,477,1.462,478,1.462,479,1.922,480,1.233,481,1.462,494,2.8,593,2.85,662,4.371,663,4.84,676,1.619,677,1.462,678,1.619,679,1.462,681,3.134,682,3.794,683,1.829,684,1.829,693,2.85,694,2.85,695,1.619,715,1.619,716,1.337,826,2.85,829,2.85,846,2.523,847,4.02,848,1.783,877,1.829,878,3.346,879,3.346,880,3.346,881,3.346,882,3.346,883,3.346,884,2.147,885,3.346,886,2.147,887,3.346,888,3.346,889,3.346,890,3.346,891,2.147,892,2.85,893,3.346,894,2.147,895,3.346,896,5.573,897,3.346,898,3.346,899,2.147,900,4.642,901,3.346,902,2.147,903,4.642,904,3.346,905,2.147,906,3.346,907,3.346,908,3.346,909,2.147,910,3.346,911,4.642,912,3.346,913,2.147,914,2.85,915,3.346,916,2.147,917,3.346,918,3.346,919,2.523,920,2.147,921,2.147,922,2.147,923,3.346,924,2.147,925,2.147,926,3.346,927,4.111,928,2.147,929,3.346,930,2.147,931,2.147,932,2.147,933,2.147,934,2.147,935,2.147,936,2.147,937,2.147,938,2.147,939,2.147,940,5.032,941,4.111,942,4.111,943,2.147,944,2.147,945,2.147,946,2.147,947,3.346,948,2.147,949,4.642,950,2.147,951,4.111,952,2.147,953,4.111,954,2.147,955,2.147,956,2.147,957,2.147,958,2.147,959,2.147,960,2.147,961,3.346,962,2.147,963,3.346,964,2.147,965,2.147,966,2.147,967,4.642,968,1.829,969,2.147,970,2.147,971,2.147,972,2.147,973,2.147,974,2.147,975,2.147,976,2.147,977,2.147,978,2.147,979,2.147,980,3.346,981,2.147,982,2.147,983,2.147,984,3.346,985,2.147]],["title/classes/ProfileUpdateDto.html",[25,0.05,269,1.065]],["body/classes/ProfileUpdateDto.html",[3,0.129,4,0.11,5,0.281,7,0.229,11,1.094,12,0.023,14,0.554,17,1.152,21,0.129,24,0.328,25,0.093,30,0.008,31,0.012,32,0.008,71,1.648,106,1,120,0.553,121,0.782,129,0.545,140,1.765,141,0.974,142,1.373,167,1.027,169,1.038,171,0.774,172,2.357,173,0.923,174,1.159,175,1.542,176,0.82,177,1.905,179,1.554,180,1.743,181,2.206,184,2.803,185,0.731,186,0.979,187,0.979,188,0.979,189,0.87,190,0.82,191,1.381,192,2.344,193,2.211,194,2.344,195,2.201,196,0.979,197,0.979,198,0.979,199,1.466,200,0.979,201,0.731,202,1.381,203,0.979,204,0.731,205,1.381,206,2.47,207,2.47,208,0.82,209,0.774,210,0.82,211,1.152,212,0.82,213,0.87,214,0.82,215,0.87,216,1.381,217,1.796,218,1.302,219,1.302,220,0.923,221,1.47,222,1.302,223,0.979,224,1.466,225,1.228,226,0.923,227,1.472,228,1.472,229,0.774,230,0.82,231,0.82,232,0.979,233,0.82,234,0.923,235,0.82,236,0.979,237,1.381,238,0.82,239,0.979,240,0.923,241,0.923,242,0.923,243,0.774,244,0.651,245,0.774,246,1.311,247,0.979,248,1.228,249,0.82,250,0.979,251,0.82,252,1.032,253,1.472,254,0.979,255,0.82,256,1.228,257,1.228,258,1.228,259,0.774,260,0.87,261,0.82,262,0.87,263,1.094,264,0.87,265,0.923,266,0.87,267,0.82,268,0.923,269,1.159,270,1.56,986,2.547,987,2.547]],["title/modules/ScheduleModule.html",[33,1.129,49,2.183]],["body/modules/ScheduleModule.html",[3,0.249,4,0.213,5,0.213,12,0.023,21,0.351,23,0.877,24,0.249,25,0.071,30,0.015,31,0.019,32,0.015,33,2.072,35,2.149,36,2.149,37,2.452,38,2.452,39,2.149,40,3.194,41,3.194,49,4.385,52,2.969,53,2.149,54,2.452,56,2.632,57,2.632,58,2.019,66,2.632,67,3.077,70,4.207,71,1.122,72,4.207,73,2.293,107,2.632,120,0.402,205,1.789,417,2.969,418,2.632,425,3.077,426,2.452,988,4.207,989,4.207,990,4.207,991,4.519,992,4.94,993,4.94,994,3.725,995,3.725,996,4.94,997,4.94,998,4.94,999,4.94,1000,4.94,1001,4.94,1002,4.94,1003,4.94,1004,4.94,1005,4.94]],["title/injectables/ScheduleService.html",[74,0.622,991,2.183]],["body/injectables/ScheduleService.html",[3,0.205,4,0.175,5,0.175,7,0.364,8,1.605,12,0.023,14,0.904,16,1.786,17,0.914,21,0.349,23,0.72,24,0.205,25,0.058,27,1.163,30,0.013,31,0.016,32,0.013,58,1.657,74,0.938,75,1.468,111,2.559,113,2.452,115,4.694,119,1.605,120,0.43,121,0.566,122,1.515,130,3.034,133,3.057,134,2.16,139,3.236,140,1.272,146,1.913,147,1.882,155,2.031,192,2.006,193,1.892,194,2.006,230,1.701,243,1.605,244,1.036,395,2.013,397,2.013,418,2.16,426,2.013,435,2.16,489,3.598,676,3.057,677,2.762,678,3.057,679,2.762,713,2.525,716,2.525,812,4.499,819,3.453,919,3.983,968,3.453,991,3.29,994,3.057,995,4.694,1006,3.453,1007,6.226,1008,6.226,1009,5.283,1010,4.055,1011,6.226,1012,4.055,1013,4.055,1014,4.055,1015,5.283,1016,4.055,1017,3.057,1018,4.055,1019,4.055,1020,4.055,1021,6.741,1022,3.453,1023,4.055,1024,5.876,1025,4.055,1026,4.055,1027,4.055,1028,5.876,1029,5.876,1030,4.055,1031,4.055,1032,5.876,1033,5.876,1034,5.876,1035,5.283,1036,5.876,1037,4.055,1038,4.055,1039,4.055,1040,5.283,1041,3.453,1042,4.055,1043,5.283,1044,5.283,1045,4.055,1046,4.055,1047,4.055,1048,4.055,1049,4.055,1050,4.055,1051,4.055]],["title/classes/TokenDto.html",[25,0.05,209,1.065]],["body/classes/TokenDto.html",[3,0.129,4,0.11,5,0.281,7,0.229,11,0.733,12,0.023,14,0.371,17,1.153,21,0.129,24,0.329,25,0.093,30,0.008,31,0.012,32,0.008,71,1.65,106,1.013,120,0.553,121,0.78,129,0.546,140,1.763,141,0.976,142,1.375,167,1.029,169,1.039,171,0.776,172,2.358,173,0.925,174,1.161,175,1.544,176,0.823,177,1.906,178,1.044,179,1.556,180,1.745,181,2.209,184,2.799,185,0.733,186,0.982,187,0.982,188,0.982,189,0.872,190,0.823,191,1.384,192,2.345,193,2.212,194,2.345,195,2.203,196,0.982,197,0.982,198,0.982,199,1.469,200,0.982,201,0.733,202,1.384,203,0.982,204,0.733,205,1.384,206,2.472,207,2.472,208,0.823,209,1.161,210,1.23,211,1.343,212,0.823,213,0.872,214,0.823,215,0.872,216,1.384,217,1.798,218,1.304,219,1.304,220,0.925,221,1.472,222,1.304,223,0.982,224,1.469,225,1.23,226,0.925,227,1.474,228,1.474,229,0.776,230,0.823,231,0.823,232,0.982,233,0.823,234,0.925,235,0.823,236,0.982,237,1.384,238,0.823,239,0.982,240,0.925,241,0.925,242,0.925,243,0.776,244,0.652,245,0.776,246,1.313,247,0.982,248,1.23,249,0.823,250,0.982,251,0.823,252,1.034,253,1.474,254,0.982,255,0.823,256,1.23,257,1.23,258,1.23,259,0.776,260,0.872,261,0.823,262,0.872,263,1.096,264,0.872,265,0.925,266,0.872,267,0.823,268,0.925,269,0.776,270,0.872,1052,2.554]],["title/controllers/UserController.html",[0,1.432,1053,2.387]],["body/controllers/UserController.html",[0,1.202,2,1.202,3,0.36,4,0.127,5,0.127,7,0.264,8,1.288,11,1.721,12,0.023,14,0.871,16,1.824,21,0.303,23,0.522,24,0.148,25,0.042,27,1.721,30,0.009,31,0.013,32,0.009,80,2.646,87,1.131,106,1.097,109,4.098,111,2.523,113,1.365,119,1.824,120,0.489,121,0.617,122,1.721,129,1.062,139,1.967,140,1.021,141,0.751,144,3.609,146,1.799,147,2.785,149,3.588,150,2.111,154,2.639,155,2.215,159,3.847,167,0.556,169,0.668,179,1.283,185,0.843,190,1.75,204,0.843,208,1.75,209,1.652,210,2.134,211,1.437,216,1.534,244,1.388,252,1.471,253,1.75,259,0.894,269,1.652,284,1.831,322,2.003,326,3.609,329,3.609,338,3.702,340,4.562,341,2.886,342,2.003,343,4.087,351,4.344,352,3.53,356,4.458,357,3.924,361,2.886,373,2.003,374,2.003,375,2.504,376,3.076,378,2.003,379,1.567,382,2.003,383,2.003,384,2.003,385,2.003,386,2.003,389,3.924,390,3.588,391,4.087,392,4.087,393,4.087,395,2.86,397,2.86,398,4.629,400,2.003,401,1.831,435,2.257,449,3.195,453,2.886,562,5.171,609,4.098,648,2.466,719,2.003,720,2.003,722,2.003,846,4.098,1053,2.886,1054,2.504,1055,4.237,1056,4.237,1057,5.435,1058,4.237,1059,4.237,1060,2.94,1061,2.94,1062,2.94,1063,4.237,1064,2.94,1065,2.94,1066,2.94,1067,4.237,1068,4.237,1069,4.237,1070,4.237,1071,4.237,1072,2.94,1073,2.94,1074,2.94,1075,4.237,1076,2.94,1077,2.94,1078,2.94,1079,2.94,1080,2.94,1081,2.94,1082,2.94,1083,2.94,1084,2.94,1085,4.237,1086,4.237,1087,2.94,1088,2.504,1089,2.94,1090,2.94,1091,2.94,1092,2.94,1093,2.94,1094,2.94,1095,4.237,1096,4.237,1097,2.94,1098,2.94,1099,2.94,1100,2.94,1101,2.94,1102,2.94,1103,2.94,1104,2.94,1105,2.94,1106,2.94,1107,2.94,1108,2.94,1109,2.94,1110,2.94,1111,2.94,1112,2.94,1113,2.94,1114,2.94,1115,2.94,1116,2.94,1117,2.94,1118,2.94,1119,2.94,1120,2.94,1121,2.94,1122,2.94,1123,2.94,1124,2.94,1125,2.94,1126,2.94,1127,2.94,1128,2.94]],["title/modules/UserModule.html",[33,1.129,50,1.867]],["body/modules/UserModule.html",[2,2.342,3,0.232,4,0.199,5,0.199,12,0.023,21,0.361,23,0.818,24,0.232,25,0.066,30,0.014,31,0.018,32,0.014,33,2.009,35,2.004,36,2.004,37,2.287,38,2.287,39,2.004,40,3.096,41,3.096,45,2.66,50,3.847,52,2.845,53,2.004,54,2.287,56,2.454,57,2.454,58,1.883,61,3.138,73,2.138,85,3.569,86,2.869,87,1.771,91,2.845,92,2.454,96,2.869,97,2.287,98,2.869,106,0.717,107,3.323,120,0.508,246,1.321,278,3.338,417,2.845,418,2.454,421,3.053,422,3.138,423,2.869,424,2.869,425,2.869,426,2.287,648,3.57,848,3.832,849,3.924,1053,4.248,1088,3.924,1129,4.607,1130,4.607,1131,4.607,1132,4.607,1133,4.607]],["title/injectables/UserService.html",[74,0.622,648,1.74]],["body/injectables/UserService.html",[3,0.364,4,0.144,5,0.144,7,0.299,8,1.405,12,0.023,14,0.907,16,2.063,21,0.268,23,0.59,24,0.168,25,0.048,27,1.731,30,0.01,31,0.014,32,0.01,71,1.206,74,0.821,75,1.204,106,1.143,110,4.01,111,2.48,119,1.898,120,0.509,121,0.669,122,1.792,129,1.228,141,0.849,142,0.801,146,1.204,150,2.265,154,4.069,155,2.208,157,2.833,167,1.236,169,0.755,179,1.228,204,0.954,209,1.745,211,1.555,244,1.181,252,1.554,253,2.012,269,1.745,295,3.148,347,4.45,352,3.4,359,3.148,372,3.486,376,3.033,379,1.772,429,2.146,430,3.06,435,2.463,436,2.879,453,3.148,472,3.486,476,2.071,477,2.265,478,2.265,479,1.91,480,1.91,481,2.265,492,2.833,493,2.833,494,3.619,503,2.833,507,4.526,517,2.833,648,2.295,662,4.45,663,4.927,677,3.148,682,4.007,687,3.937,695,4.007,719,2.265,720,2.265,721,2.508,722,2.265,814,3.937,847,4.71,892,3.937,896,3.937,914,5.321,1134,2.833,1135,4.623,1136,4.623,1137,4.623,1138,4.623,1139,4.623,1140,4.623,1141,3.326,1142,4.623,1143,3.326,1144,4.623,1145,4.623,1146,3.326,1147,4.623,1148,4.623,1149,3.326,1150,4.623,1151,4.623,1152,3.326,1153,3.326,1154,3.326,1155,3.326,1156,3.326,1157,3.326,1158,3.326,1159,3.326,1160,3.326,1161,3.326,1162,3.326,1163,3.326,1164,3.326,1165,3.326]],["title/injectables/ValidateService.html",[74,0.622,83,2.013]],["body/injectables/ValidateService.html",[3,0.254,4,0.217,5,0.217,7,0.452,8,1.838,12,0.023,14,0.878,16,1.838,21,0.305,23,0.893,24,0.254,25,0.072,27,1.735,30,0.016,31,0.019,32,0.016,74,1.074,75,1.823,83,3.474,107,3.223,109,3.795,110,4.014,119,1.838,120,0.493,121,0.648,122,1.735,129,1.293,141,1.285,142,1.457,146,2.19,169,1.143,202,1.823,204,1.443,1166,4.286,1167,6.049,1168,6.049,1169,6.049,1170,5.033,1171,6.049,1172,5.033,1173,5.033,1174,4.286,1175,5.033,1176,6.049,1177,6.049,1178,5.033,1179,6.049,1180,6.049,1181,5.033,1182,5.033,1183,5.033,1184,6.049]],["title/coverage.html",[1185,3.614]],["body/coverage.html",[0,2.601,1,2.642,5,0.168,6,3.304,12,0.023,25,0.1,30,0.012,31,0.016,32,0.012,39,1.688,51,2.416,66,2.067,74,1.246,76,3.304,80,2.067,81,2.416,82,2.416,83,2.228,91,1.926,100,2.642,108,3.304,121,0.415,137,2.416,150,1.324,171,1.179,173,2.542,190,1.249,195,2.525,208,1.249,209,1.179,212,1.249,214,1.249,215,1.324,229,1.179,245,1.179,252,1.05,264,1.324,269,1.179,278,1.8,279,4.336,280,4.336,298,2.925,302,2.925,320,2.642,321,3.304,380,2.228,417,1.926,421,2.067,428,3.304,430,2.067,550,2.642,551,3.304,604,2.228,648,1.926,651,3.304,704,3.064,705,2.642,707,3.869,713,2.416,714,3.869,716,4.613,717,3.869,763,3.304,799,3.304,811,3.304,824,2.642,825,3.304,848,2.067,877,3.304,991,2.416,1006,3.304,1017,2.925,1053,2.642,1054,3.304,1134,3.304,1166,3.304,1185,2.925,1186,3.879,1187,3.879,1188,3.879,1189,6.852,1190,7.216,1191,5.131,1192,3.879,1193,3.879,1194,3.304,1195,5.131,1196,3.879,1197,5.131,1198,5.131,1199,3.879,1200,3.879,1201,3.879,1202,3.879,1203,3.879,1204,3.879,1205,3.879,1206,3.879,1207,3.879,1208,3.879,1209,3.304,1210,3.879,1211,5.131,1212,5.131,1213,3.879,1214,3.879,1215,3.304,1216,6.771,1217,3.879,1218,3.879,1219,3.879,1220,3.879,1221,5.029,1222,3.304,1223,3.304,1224,3.304,1225,3.304,1226,3.304,1227,3.304,1228,4.799,1229,3.304,1230,3.304,1231,3.304,1232,3.304,1233,3.879,1234,3.879]],["title/dependencies.html",[36,1.835,1235,2.922]],["body/dependencies.html",[12,0.023,23,0.901,30,0.016,31,0.019,32,0.016,36,2.207,58,2.073,87,1.951,89,3.826,97,2.519,134,2.703,136,3.455,145,3.826,185,1.455,295,3.455,377,5.177,484,4.321,485,4.321,679,3.455,725,3.826,770,4.907,806,4.321,919,3.826,994,3.826,995,3.826,1174,4.321,1236,5.073,1237,6.507,1238,5.073,1239,5.073,1240,5.073,1241,5.073,1242,5.073,1243,5.073,1244,5.073,1245,5.073,1246,6.078,1247,5.073,1248,5.073,1249,5.073,1250,5.073,1251,5.073,1252,5.073,1253,5.073,1254,5.073,1255,5.073,1256,5.073,1257,5.073,1258,5.073,1259,5.073,1260,5.073,1261,5.073,1262,5.073,1263,5.073,1264,5.073,1265,5.073,1266,5.073,1267,5.073,1268,5.073,1269,5.073,1270,5.073]],["title/miscellaneous/functions.html",[734,3.18,1271,1.99]],["body/miscellaneous/functions.html",[7,0.467,12,0.022,30,0.016,31,0.019,32,0.016,39,2.861,119,2.14,120,0.574,122,2.02,225,1.986,227,1.986,228,1.986,734,3.921,1017,4.958,1215,4.429,1221,3.921,1222,5.253,1223,5.253,1224,5.253,1225,5.253,1226,5.253,1227,5.253,1228,3.921,1271,3.542,1272,5.2,1273,4.429,1274,5.997,1275,5.2,1276,5.2,1277,5.2,1278,5.2,1279,5.2,1280,5.2,1281,5.2,1282,5.2,1283,5.2,1284,5.2]],["title/index.html",[7,0.262,1285,2.922,1286,2.922]],["body/index.html",[4,0.218,12,0.023,30,0.016,31,0.019,32,0.016,179,1.078,735,4.292,1022,4.292,1185,3.8,1287,5.039,1288,5.039,1289,6.053,1290,5.039,1291,5.039,1292,5.039,1293,5.039,1294,5.039,1295,5.039,1296,5.039,1297,5.039,1298,5.039,1299,6.489,1300,5.039,1301,5.039,1302,5.039,1303,5.039,1304,7.069,1305,5.039,1306,5.039,1307,5.039,1308,6.991,1309,5.039,1310,5.039,1311,6.053,1312,5.039,1313,5.039,1314,5.039,1315,5.039,1316,6.053,1317,6.053,1318,5.039,1319,5.039,1320,5.039,1321,6.053,1322,6.053,1323,5.039,1324,5.039,1325,5.039,1326,5.039,1327,5.039,1328,4.292,1329,5.039,1330,5.039,1331,5.039,1332,5.039,1333,5.039,1334,5.039,1335,5.039,1336,5.039,1337,5.039,1338,5.039,1339,5.039,1340,5.039,1341,5.039,1342,5.039,1343,5.039,1344,5.039]],["title/modules.html",[35,2.085]],["body/modules.html",[12,0.02,30,0.017,31,0.02,32,0.017,34,3.727,35,2.381,45,2.54,46,3.143,47,3.143,48,2.916,49,3.408,50,2.916,1328,6.118,1345,7.183,1346,7.183,1347,7.183]],["title/overview.html",[1348,4.082]],["body/overview.html",[2,1.736,12,0.023,30,0.013,31,0.017,32,0.013,33,1.368,34,4.92,35,1.848,36,1.848,37,2.109,38,2.109,39,1.848,40,2.109,41,2.109,42,3.617,43,3.617,44,3.617,45,3.302,46,4.105,47,4.003,48,3.808,49,4.174,50,3.808,51,3.742,52,2.702,53,1.848,54,2.109,75,1.538,77,3.617,78,3.617,79,3.617,80,3.631,81,3.742,82,3.742,83,3.45,172,1.538,278,3.353,380,3.914,410,3.617,412,3.617,413,3.617,604,3.914,644,3.617,645,3.617,646,3.617,648,3.489,706,2.893,848,3.744,871,3.617,872,3.617,873,3.617,988,3.617,989,3.617,990,3.617,991,4.244,1041,3.617,1209,4.636,1348,3.617,1349,4.247,1350,4.247]],["title/miscellaneous/variables.html",[1271,1.99,1351,3.592]],["body/miscellaneous/variables.html",[7,0.304,12,0.023,17,1.135,30,0.011,31,0.015,32,0.011,66,2.494,71,1.674,73,1.572,91,2.324,100,3.653,116,2.109,120,0.276,121,0.789,141,0.865,142,0.816,150,1.976,167,0.64,169,1.063,175,1.029,176,1.09,177,1.847,180,1.342,181,2.226,189,1.156,201,1.66,204,0.971,211,0.769,217,1.029,218,1.156,219,1.156,221,1.267,222,1.156,225,1.09,227,1.09,228,1.09,231,1.09,233,1.09,235,1.09,238,1.09,243,1.029,248,1.09,249,1.09,251,1.09,255,1.09,256,1.09,257,1.09,258,1.09,261,1.09,263,0.971,267,1.09,279,2.553,280,4.045,284,2.109,287,4.416,288,5.18,295,2.306,298,3.529,299,2.884,300,2.884,301,2.884,302,3.529,303,2.884,304,2.884,305,2.884,306,2.884,307,3.986,308,2.884,417,2.324,421,2.494,442,2.109,489,2.306,681,2.915,685,2.553,688,2.553,707,2.553,709,3.653,710,3.529,711,2.884,712,3.653,714,2.553,715,2.553,716,2.109,717,2.553,719,2.306,720,2.306,721,2.553,722,2.306,723,2.884,724,2.884,725,2.553,726,2.884,727,2.884,728,2.884,729,2.884,730,2.884,731,4.929,1194,2.884,1221,2.553,1228,2.553,1229,4.569,1230,3.986,1231,4.569,1232,4.929,1271,2.306,1273,4.929,1274,2.884,1351,2.884,1352,3.386,1353,3.386,1354,4.68,1355,3.386,1356,3.386,1357,3.386,1358,3.386,1359,3.386,1360,3.386,1361,3.386,1362,3.386,1363,3.386,1364,3.386,1365,3.386,1366,3.386,1367,3.386,1368,3.386,1369,3.386,1370,3.386,1371,3.386,1372,3.386,1373,3.386,1374,3.386,1375,3.386]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":716,"title":{},"body":{"interfaces/IPlan.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":1264,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1258,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1190,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1213,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1201,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1219,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1211,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1189,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1191,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1220,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1212,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1214,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1208,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1218,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":489,"title":{},"body":{"injectables/EmailService.html":{},"interfaces/IUser.html":{},"injectables/ScheduleService.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1246,"title":{},"body":{"dependencies.html":{}}}],["1.0.2",{"_index":1257,"title":{},"body":{"dependencies.html":{}}}],["1.3.0",{"_index":1261,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1217,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1193,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":1210,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1195,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":1209,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["12.0.0",{"_index":1270,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":223,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["16",{"_index":1036,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["16.1.7",{"_index":1236,"title":{},"body":{"dependencies.html":{}}}],["16:00",{"_index":1033,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["1h",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{}}}],["1hour",{"_index":470,"title":{},"body":{"injectables/EmailService.html":{}}}],["2.0.13",{"_index":1254,"title":{},"body":{"dependencies.html":{}}}],["2.24.0",{"_index":1255,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1247,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1121,"title":{},"body":{"controllers/UserController.html":{}}}],["24",{"_index":293,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["28",{"_index":1044,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["3",{"_index":1350,"title":{},"body":{"overview.html":{}}}],["3.1.0",{"_index":1243,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":1004,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["33",{"_index":1192,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":488,"title":{},"body":{"injectables/EmailService.html":{}}}],["4",{"_index":226,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["4.0.0",{"_index":1259,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":1252,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1269,"title":{},"body":{"dependencies.html":{}}}],["4.17.15",{"_index":1253,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1196,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1041,"title":{},"body":{"injectables/ScheduleService.html":{},"overview.html":{}}}],["5.7.11",{"_index":1256,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":1203,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":1198,"title":{},"body":{"coverage.html":{}}}],["5th",{"_index":1039,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["6",{"_index":730,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["6.1.0",{"_index":1241,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":1239,"title":{},"body":{"dependencies.html":{}}}],["6.1.2",{"_index":1240,"title":{},"body":{"dependencies.html":{}}}],["6.5.5",{"_index":1266,"title":{},"body":{"dependencies.html":{}}}],["6.7.2",{"_index":1237,"title":{},"body":{"dependencies.html":{}}}],["6/7",{"_index":1207,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":292,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["7",{"_index":1349,"title":{},"body":{"overview.html":{}}}],["7.1.1",{"_index":1244,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":1197,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1204,"title":{},"body":{"coverage.html":{}}}],["8.12.1",{"_index":1250,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":1249,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":1202,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":1206,"title":{},"body":{"coverage.html":{}}}],["9/10",{"_index":1200,"title":{},"body":{"coverage.html":{}}}],["9/12",{"_index":1205,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1199,"title":{},"body":{"coverage.html":{}}}],["924ff8331aaf4c1",{"_index":1368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_",{"_index":678,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{}}}],["_.pick(data",{"_index":684,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{}}}],["_id",{"_index":494,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["_userid",{"_index":681,"title":{},"body":{"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"injectables/PlanService.html":{},"miscellaneous/variables.html":{}}}],["abstract",{"_index":818,"title":{},"body":{"injectables/ModelService.html":{}}}],["action",{"_index":533,"title":{},"body":{"injectables/EmailService.html":{}}}],["add",{"_index":565,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["addexpense",{"_index":552,"title":{},"body":{"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{}}}],["addexpense(@param('id",{"_index":622,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["addexpense(data",{"_index":656,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["addexpense(id",{"_index":561,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["addimage",{"_index":652,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["addimage(id",{"_index":658,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["address",{"_index":205,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"classes/TokenDto.html":{}}}],["adds",{"_index":601,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["admin",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"dependencies.html":{}}}],["admin.credential.cert(serviceaccount",{"_index":305,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["admin.initializeapp",{"_index":303,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["admin.messaging().sendtodevice(registrationtoken",{"_index":309,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["admin_reg_validation",{"_index":1167,"title":{},"body":{"injectables/ValidateService.html":{}}}],["admin_reg_validation(data",{"_index":1169,"title":{},"body":{"injectables/ValidateService.html":{}}}],["adminsdk.json",{"_index":301,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["agenda",{"_index":995,"title":{},"body":{"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"dependencies.html":{}}}],["agendamodule",{"_index":993,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["agendamodule.register",{"_index":997,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["agendaservice",{"_index":1011,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["agendash",{"_index":1245,"title":{},"body":{"dependencies.html":{}}}],["allbudget",{"_index":553,"title":{},"body":{"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{}}}],["allbudget(@param('id",{"_index":611,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["allbudget(id",{"_index":567,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["allbudget(user",{"_index":660,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["allplans",{"_index":826,"title":{},"body":{"controllers/PlanController.html":{},"injectables/PlanService.html":{}}}],["allplans(@request",{"_index":857,"title":{},"body":{"controllers/PlanController.html":{}}}],["allplans(req",{"_index":831,"title":{},"body":{"controllers/PlanController.html":{}}}],["allplans(user",{"_index":883,"title":{},"body":{"injectables/PlanService.html":{}}}],["already",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{}}}],["amazing",{"_index":1329,"title":{},"body":{"index.html":{}}}],["amount",{"_index":180,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["angular",{"_index":1298,"title":{},"body":{"index.html":{}}}],["api",{"_index":329,"title":{},"body":{"controllers/EmailController.html":{},"controllers/UserController.html":{}}}],["api.herokuapp.com/email/reset",{"_index":1370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apicreatedresponse",{"_index":386,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apicreatedresponse({description",{"_index":389,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apiforbiddenresponse",{"_index":384,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apiforbiddenresponse({description",{"_index":391,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apimodelproperty",{"_index":184,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["apimodelproperty({type",{"_index":178,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/TokenDto.html":{}}}],["apinotfoundresponse",{"_index":385,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apinotfoundresponse({description",{"_index":393,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apiokresponse",{"_index":383,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apiokresponse({description",{"_index":400,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apiusetags",{"_index":382,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["apiusetags('email",{"_index":387,"title":{},"body":{"controllers/EmailController.html":{}}}],["apiusetags('expense",{"_index":606,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["apiusetags('plan",{"_index":850,"title":{},"body":{"controllers/PlanController.html":{}}}],["apiusetags('user",{"_index":1090,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":1306,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1278,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applications",{"_index":1295,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":34,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":51,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arrow",{"_index":733,"title":{},"body":{"interfaces/IUser.html":{}}}],["async",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["attached",{"_index":216,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{}}}],["auth.service",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":415,"title":{},"body":{"modules/EmailModule.html":{}}}],["auth/auth.service",{"_index":1089,"title":{},"body":{"controllers/UserController.html":{}}}],["authentic",{"_index":440,"title":{},"body":{"injectables/EmailService.html":{}}}],["authentication",{"_index":353,"title":{},"body":{"controllers/EmailController.html":{}}}],["authguard",{"_index":378,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["authmodule",{"_index":45,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1337,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":80,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["awake",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["b",{"_index":963,"title":{},"body":{"injectables/PlanService.html":{}}}],["backers",{"_index":1330,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('email",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(error.details[0].message",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["based",{"_index":778,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["bcrypt",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"interfaces/IUser.html":{}}}],["bcrypt.compare(attempt",{"_index":750,"title":{},"body":{"interfaces/IUser.html":{}}}],["bcrypt.compare(data.password",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(10",{"_index":499,"title":{},"body":{"injectables/EmailService.html":{},"interfaces/IUser.html":{}}}],["bcrypt.hash(password",{"_index":504,"title":{},"body":{"injectables/EmailService.html":{}}}],["bcrypt.hash(user.password",{"_index":746,"title":{},"body":{"interfaces/IUser.html":{}}}],["bcrypt.js",{"_index":448,"title":{},"body":{"injectables/EmailService.html":{}}}],["bcryptjs",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"interfaces/IUser.html":{},"dependencies.html":{}}}],["bearer",{"_index":1103,"title":{},"body":{"controllers/UserController.html":{}}}],["before",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PlanService.html":{}}}],["bhbwjuelqk7hzafjcheg22la85arqxj4",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bid",{"_index":576,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["body",{"_index":352,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["body.budget",{"_index":691,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["body.budgetname",{"_index":690,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["body.deletehash",{"_index":1162,"title":{},"body":{"injectables/UserService.html":{}}}],["body.duration",{"_index":941,"title":{},"body":{"injectables/PlanService.html":{}}}],["body.input",{"_index":1164,"title":{},"body":{"injectables/UserService.html":{}}}],["body.link",{"_index":1161,"title":{},"body":{"injectables/UserService.html":{}}}],["body.token",{"_index":1165,"title":{},"body":{"injectables/UserService.html":{}}}],["body.type",{"_index":1163,"title":{},"body":{"injectables/UserService.html":{}}}],["bootstrap",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1347,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1345,"title":{},"body":{"modules.html":{}}}],["budget",{"_index":175,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["budget')@apicreatedresponse({description",{"_index":596,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["budget.id",{"_index":697,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["budget.save",{"_index":692,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["budgetdto",{"_index":171,"title":{"classes/BudgetDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["budgetid",{"_index":268,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["budgetname",{"_index":176,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["budgets",{"_index":571,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["building",{"_index":1290,"title":{},"body":{"index.html":{}}}],["busget",{"_index":585,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["button",{"_index":537,"title":{},"body":{"injectables/EmailService.html":{}}}],["c8f57",{"_index":300,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["c8f57.firebaseio.com",{"_index":308,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["calculateplan",{"_index":878,"title":{},"body":{"injectables/PlanService.html":{}}}],["calculateplan(body",{"_index":885,"title":{},"body":{"injectables/PlanService.html":{}}}],["calculates",{"_index":889,"title":{},"body":{"injectables/PlanService.html":{}}}],["call",{"_index":501,"title":{},"body":{"injectables/EmailService.html":{}}}],["callback",{"_index":749,"title":{},"body":{"interfaces/IUser.html":{}}}],["callback(err",{"_index":752,"title":{},"body":{"interfaces/IUser.html":{}}}],["callback(null",{"_index":753,"title":{},"body":{"interfaces/IUser.html":{}}}],["called",{"_index":367,"title":{},"body":{"controllers/EmailController.html":{}}}],["card",{"_index":217,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["card_no",{"_index":225,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["cardcharge",{"_index":1017,"title":{},"body":{"injectables/ScheduleService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["carddto",{"_index":215,"title":{"classes/CardDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["cardnum",{"_index":961,"title":{},"body":{"injectables/PlanService.html":{}}}],["catch",{"_index":397,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{}}}],["catch((e",{"_index":514,"title":{},"body":{"injectables/EmailService.html":{}}}],["catch((err",{"_index":517,"title":{},"body":{"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["catch(e",{"_index":511,"title":{},"body":{"injectables/EmailService.html":{}}}],["category",{"_index":248,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["change",{"_index":509,"title":{},"body":{"injectables/EmailService.html":{}}}],["changeprofileimage",{"_index":1135,"title":{},"body":{"injectables/UserService.html":{}}}],["changeprofileimage(user",{"_index":1140,"title":{},"body":{"injectables/UserService.html":{}}}],["check",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["checking",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["class",{"_index":25,"title":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"coverage.html":{}}}],["classes",{"_index":172,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"overview.html":{}}}],["clicks",{"_index":345,"title":{},"body":{"controllers/EmailController.html":{}}}],["client",{"_index":328,"title":{},"body":{"controllers/EmailController.html":{}}}],["client's",{"_index":362,"title":{},"body":{"controllers/EmailController.html":{}}}],["cloud",{"_index":423,"title":{},"body":{"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"injectables/ModelService.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["cloudnotificationservice",{"_index":278,"title":{"injectables/CloudNotificationService.html":{}},"body":{"injectables/CloudNotificationService.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"injectables/ModelService.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":410,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":412,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_imports",{"_index":411,"title":{},"body":{"modules/EmailModule.html":{}}}],["cluster_emailmodule_providers",{"_index":413,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_expensemodule",{"_index":644,"title":{},"body":{"modules/ExpenseModule.html":{},"overview.html":{}}}],["cluster_expensemodule_exports",{"_index":645,"title":{},"body":{"modules/ExpenseModule.html":{},"overview.html":{}}}],["cluster_expensemodule_providers",{"_index":646,"title":{},"body":{"modules/ExpenseModule.html":{},"overview.html":{}}}],["cluster_planmodule",{"_index":871,"title":{},"body":{"modules/PlanModule.html":{},"overview.html":{}}}],["cluster_planmodule_exports",{"_index":872,"title":{},"body":{"modules/PlanModule.html":{},"overview.html":{}}}],["cluster_planmodule_providers",{"_index":873,"title":{},"body":{"modules/PlanModule.html":{},"overview.html":{}}}],["cluster_schedulemodule",{"_index":988,"title":{},"body":{"modules/ScheduleModule.html":{},"overview.html":{}}}],["cluster_schedulemodule_exports",{"_index":989,"title":{},"body":{"modules/ScheduleModule.html":{},"overview.html":{}}}],["cluster_schedulemodule_providers",{"_index":990,"title":{},"body":{"modules/ScheduleModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1129,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_exports",{"_index":1130,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1131,"title":{},"body":{"modules/UserModule.html":{}}}],["collection",{"_index":1000,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["color",{"_index":538,"title":{},"body":{"injectables/EmailService.html":{}}}],["concerning",{"_index":327,"title":{},"body":{"controllers/EmailController.html":{}}}],["config/config",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{},"modules/ScheduleModule.html":{}}}],["configkeys",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{},"modules/ScheduleModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configkeys.email_url}${user._id}/${token",{"_index":490,"title":{},"body":{"injectables/EmailService.html":{}}}],["configkeys.jwt_secret",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configkeys.mongodb_uri",{"_index":999,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["configkeys.rave_production_flag",{"_index":1371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configkeys.rave_publick_key",{"_index":1373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configkeys.rave_secret_key",{"_index":1374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configkeys.secret",{"_index":1375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["confirmation",{"_index":333,"title":{},"body":{"controllers/EmailController.html":{}}}],["connect",{"_index":1029,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["console",{"_index":1024,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["console.log(`all",{"_index":1050,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["console.log(`job",{"_index":1025,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["console.log(error",{"_index":1051,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["const",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["constructor",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"controllers/PlanController.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{}}}],["constructor(authservice",{"_index":800,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(planmodel",{"_index":1010,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["constructor(private",{"_index":807,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(usermodel",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ModelService.html":{}}}],["containing",{"_index":372,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["contains",{"_index":663,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('email",{"_index":388,"title":{},"body":{"controllers/EmailController.html":{}}}],["controller('expense",{"_index":607,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["controller('plan",{"_index":851,"title":{},"body":{"controllers/PlanController.html":{}}}],["controller('user",{"_index":1091,"title":{},"body":{"controllers/UserController.html":{}}}],["controller/email/email.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["controller/expense/expense.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["controller/plans/plans.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["controller/user/user.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"controllers/ExpenseController.html":{},"modules/ExpenseModule.html":{},"controllers/PlanController.html":{},"modules/PlanModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["correct",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["coverage",{"_index":1185,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":593,"title":{},"body":{"controllers/ExpenseController.html":{},"injectables/PlanService.html":{}}}],["create(data",{"_index":890,"title":{},"body":{"injectables/PlanService.html":{}}}],["created",{"_index":390,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{}}}],["created'})@apiforbiddenresponse({description",{"_index":357,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["createdat",{"_index":718,"title":{},"body":{"interfaces/IUser.html":{}}}],["createdto",{"_index":190,"title":{"classes/CreateDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["createjob",{"_index":1007,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["createplan",{"_index":827,"title":{},"body":{"controllers/PlanController.html":{}}}],["createplan(@body",{"_index":852,"title":{},"body":{"controllers/PlanController.html":{}}}],["createplan(body",{"_index":834,"title":{},"body":{"controllers/PlanController.html":{}}}],["creates",{"_index":453,"title":{},"body":{"injectables/EmailService.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser",{"_index":1136,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(data",{"_index":1142,"title":{},"body":{"injectables/UserService.html":{}}}],["creating",{"_index":1070,"title":{},"body":{"controllers/UserController.html":{}}}],["creation",{"_index":254,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["credential",{"_index":304,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["credentials",{"_index":1069,"title":{},"body":{"controllers/UserController.html":{}}}],["current",{"_index":566,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["cvv",{"_index":228,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["d19115",{"_index":539,"title":{},"body":{"injectables/EmailService.html":{}}}],["daily",{"_index":240,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["daily_plan",{"_index":1038,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["data",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"classes/ImageDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["data.card",{"_index":977,"title":{},"body":{"injectables/PlanService.html":{}}}],["data.card.amount",{"_index":972,"title":{},"body":{"injectables/PlanService.html":{}}}],["data.country_phone.phone",{"_index":1155,"title":{},"body":{"injectables/UserService.html":{}}}],["data.duration",{"_index":976,"title":{},"body":{"injectables/PlanService.html":{}}}],["data.email",{"_index":1156,"title":{},"body":{"injectables/UserService.html":{}}}],["data.matching_passwords.password",{"_index":1157,"title":{},"body":{"injectables/UserService.html":{}}}],["data.name",{"_index":1154,"title":{},"body":{"injectables/UserService.html":{}}}],["data.periodicamount",{"_index":975,"title":{},"body":{"injectables/PlanService.html":{}}}],["data.planname",{"_index":973,"title":{},"body":{"injectables/PlanService.html":{}}}],["data.targetamount",{"_index":974,"title":{},"body":{"injectables/PlanService.html":{}}}],["data.username",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["database",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["databaseurl",{"_index":306,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":221,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["datetime",{"_index":255,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["day",{"_index":1034,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["days",{"_index":943,"title":{},"body":{"injectables/PlanService.html":{}}}],["db",{"_index":998,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["declarations",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoded",{"_index":662,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["decodes",{"_index":773,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{}}}],["decrupt",{"_index":895,"title":{},"body":{"injectables/PlanService.html":{}}}],["decryptcard",{"_index":879,"title":{},"body":{"injectables/PlanService.html":{}}}],["decryptcard(doc",{"_index":893,"title":{},"body":{"injectables/PlanService.html":{}}}],["decryptcardnum",{"_index":1222,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["decryptcardnum(card_no",{"_index":1279,"title":{},"body":{"miscellaneous/functions.html":{}}}],["decryptcvv",{"_index":1223,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["decryptcvv(cvv",{"_index":1280,"title":{},"body":{"miscellaneous/functions.html":{}}}],["decrypted",{"_index":897,"title":{},"body":{"injectables/PlanService.html":{}}}],["decryptpin",{"_index":1224,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["decryptpin(pin",{"_index":1281,"title":{},"body":{"miscellaneous/functions.html":{}}}],["decrypts",{"_index":907,"title":{},"body":{"injectables/PlanService.html":{}}}],["default",{"_index":287,"title":{},"body":{"injectables/CloudNotificationService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":1020,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["delete",{"_index":259,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{}}}],["delete(':bid/:id",{"_index":627,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["delete(':id",{"_index":862,"title":{},"body":{"controllers/PlanController.html":{}}}],["delete('budget/image/:bid/:id",{"_index":636,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["delete(user",{"_index":898,"title":{},"body":{"injectables/PlanService.html":{}}}],["deleted",{"_index":266,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["deleted'})@apiforbiddenresponse({description",{"_index":574,"title":{},"body":{"controllers/ExpenseController.html":{},"controllers/PlanController.html":{}}}],["deletedto",{"_index":264,"title":{"classes/DeleteDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["deleteexpense",{"_index":554,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["deleteexpense(@param('bid",{"_index":628,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["deleteexpense(bid",{"_index":572,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["deletehash",{"_index":261,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["deleteimage",{"_index":555,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["deleteimage(@param('bid",{"_index":637,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["deleteimage(bid",{"_index":577,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["deleteplan",{"_index":828,"title":{},"body":{"controllers/PlanController.html":{}}}],["deleteplan(@param('id",{"_index":863,"title":{},"body":{"controllers/PlanController.html":{}}}],["deleteplan(id",{"_index":837,"title":{},"body":{"controllers/PlanController.html":{}}}],["deletion",{"_index":900,"title":{},"body":{"injectables/PlanService.html":{}}}],["delexpense",{"_index":653,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["delexpense(budgetid",{"_index":664,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["delimage",{"_index":654,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["delimage(budgetid",{"_index":666,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["dependencies",{"_index":36,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["descr",{"_index":249,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":179,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["deserves",{"_index":767,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["details",{"_index":244,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["determines",{"_index":439,"title":{},"body":{"injectables/EmailService.html":{}}}],["detils",{"_index":586,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["development",{"_index":1307,"title":{},"body":{"index.html":{}}}],["digit",{"_index":224,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["discussion",{"_index":768,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["displayed",{"_index":350,"title":{},"body":{"controllers/EmailController.html":{}}}],["doc",{"_index":896,"title":{},"body":{"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["doc.card.card_no",{"_index":949,"title":{},"body":{"injectables/PlanService.html":{}}}],["doc.card.cvv",{"_index":951,"title":{},"body":{"injectables/PlanService.html":{}}}],["doc.card.expiry_date",{"_index":959,"title":{},"body":{"injectables/PlanService.html":{}}}],["doc.card.lastname",{"_index":958,"title":{},"body":{"injectables/PlanService.html":{}}}],["doc.card.pin",{"_index":953,"title":{},"body":{"injectables/PlanService.html":{}}}],["doc.foreach(element",{"_index":969,"title":{},"body":{"injectables/PlanService.html":{}}}],["docs",{"_index":1046,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["docs.filter(res",{"_index":1047,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["document",{"_index":1144,"title":{},"body":{"injectables/UserService.html":{}}}],["documentation",{"_index":1186,"title":{},"body":{"coverage.html":{}}}],["don’t",{"_index":529,"title":{},"body":{"injectables/EmailService.html":{}}}],["dotenv",{"_index":1248,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":186,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["dto/interface.dto",{"_index":379,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["duration",{"_index":243,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["e2e",{"_index":1318,"title":{},"body":{"index.html":{}}}],["each",{"_index":935,"title":{},"body":{"injectables/PlanService.html":{}}}],["edit",{"_index":584,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["editbudget",{"_index":556,"title":{},"body":{"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{}}}],["editbudget(@param('id",{"_index":631,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["editbudget(data",{"_index":668,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["editbudget(id",{"_index":581,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["editexpense",{"_index":557,"title":{},"body":{"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{}}}],["editexpense(@param('bid",{"_index":625,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["editexpense(bid",{"_index":587,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["editexpense(budgetid",{"_index":670,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["efficient",{"_index":1291,"title":{},"body":{"index.html":{}}}],["element",{"_index":970,"title":{},"body":{"injectables/PlanService.html":{}}}],["email",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"miscellaneous/variables.html":{}}}],["email.controller",{"_index":416,"title":{},"body":{"modules/EmailModule.html":{}}}],["email.service",{"_index":381,"title":{},"body":{"controllers/EmailController.html":{},"modules/EmailModule.html":{}}}],["email_url",{"_index":1369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emailcontroller",{"_index":320,"title":{"controllers/EmailController.html":{}},"body":{"controllers/EmailController.html":{},"modules/EmailModule.html":{},"coverage.html":{}}}],["emailmodule",{"_index":46,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailresetdto",{"_index":212,"title":{"classes/EmailResetDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["emailservice",{"_index":380,"title":{"injectables/EmailService.html":{}},"body":{"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["emailtemplate",{"_index":543,"title":{},"body":{"injectables/EmailService.html":{}}}],["encrypt",{"_index":920,"title":{},"body":{"injectables/PlanService.html":{}}}],["encrypt.decryptcardnum(doc.card.card_no",{"_index":955,"title":{},"body":{"injectables/PlanService.html":{}}}],["encrypt.decryptcvv(doc.card.cvv",{"_index":956,"title":{},"body":{"injectables/PlanService.html":{}}}],["encrypt.decryptpin(doc.card.pin",{"_index":957,"title":{},"body":{"injectables/PlanService.html":{}}}],["encrypt.encryptcardnum(doc.card.card_no",{"_index":950,"title":{},"body":{"injectables/PlanService.html":{}}}],["encrypt.encryptcvv(doc.card.cvv",{"_index":952,"title":{},"body":{"injectables/PlanService.html":{}}}],["encrypt.encryptpin(doc.card.pin",{"_index":954,"title":{},"body":{"injectables/PlanService.html":{}}}],["encryptcard",{"_index":880,"title":{},"body":{"injectables/PlanService.html":{}}}],["encryptcard(doc",{"_index":901,"title":{},"body":{"injectables/PlanService.html":{}}}],["encryptcardnum",{"_index":1225,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["encryptcardnum(card_no",{"_index":1282,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encryptcvv",{"_index":1226,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["encryptcvv(cvv",{"_index":1283,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encrypted",{"_index":450,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PlanService.html":{}}}],["encryptpin",{"_index":1227,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["encryptpin(pin",{"_index":1284,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encrypts",{"_index":446,"title":{},"body":{"injectables/EmailService.html":{}}}],["endpoint",{"_index":366,"title":{},"body":{"controllers/EmailController.html":{}}}],["entire",{"_index":1277,"title":{},"body":{"miscellaneous/functions.html":{}}}],["er",{"_index":505,"title":{},"body":{"injectables/EmailService.html":{}}}],["err",{"_index":479,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"interfaces/IUser.html":{},"injectables/ModelService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["error",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"interfaces/IUser.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{}}}],["errorhandler",{"_index":436,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/ModelService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["errorhandler(err",{"_index":476,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/ModelService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["expected",{"_index":236,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["expense",{"_index":246,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"modules/UserModule.html":{}}}],["expense.controller",{"_index":650,"title":{},"body":{"modules/ExpenseModule.html":{}}}],["expense.service",{"_index":605,"title":{},"body":{"controllers/ExpenseController.html":{},"modules/ExpenseModule.html":{}}}],["expensecontroller",{"_index":550,"title":{"controllers/ExpenseController.html":{}},"body":{"controllers/ExpenseController.html":{},"modules/ExpenseModule.html":{},"coverage.html":{}}}],["expensedto",{"_index":245,"title":{"classes/ExpenseDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["expensemodel",{"_index":813,"title":{},"body":{"injectables/ModelService.html":{}}}],["expensemodule",{"_index":47,"title":{"modules/ExpenseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExpenseModule.html":{},"modules.html":{},"overview.html":{}}}],["expenses",{"_index":688,"title":{},"body":{"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"miscellaneous/variables.html":{}}}],["expenses._id",{"_index":698,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["expenseschema",{"_index":421,"title":{},"body":{"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"interfaces/IExpense.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["expenseservice",{"_index":604,"title":{"injectables/ExpenseService.html":{}},"body":{"controllers/ExpenseController.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"coverage.html":{},"overview.html":{}}}],["expire",{"_index":532,"title":{},"body":{"injectables/EmailService.html":{}}}],["expires",{"_index":474,"title":{},"body":{"injectables/EmailService.html":{}}}],["expiresin",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"injectables/EmailService.html":{}}}],["expiry",{"_index":220,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["expiry_date",{"_index":222,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["exports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":377,"title":{},"body":{"controllers/EmailController.html":{},"dependencies.html":{}}}],["expservice",{"_index":608,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["extends",{"_index":429,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["extractjwt",{"_index":791,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":796,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"injectables/JwtStrategy.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"coverage.html":{}}}],["firebase",{"_index":295,"title":{},"body":{"injectables/CloudNotificationService.html":{},"injectables/UserService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["firebaseapp",{"_index":302,"title":{},"body":{"injectables/CloudNotificationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasetoken",{"_index":719,"title":{},"body":{"interfaces/IUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["fired",{"_index":1026,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["first",{"_index":191,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["first_name",{"_index":196,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["firstname",{"_index":218,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["flutterwave",{"_index":1028,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["following",{"_index":536,"title":{},"body":{"injectables/EmailService.html":{}}}],["forbidden",{"_index":392,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["forbidden'})@apinotfoundresponse({description",{"_index":343,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["formatted_date",{"_index":715,"title":{},"body":{"interfaces/IPlan.html":{},"injectables/PlanService.html":{},"miscellaneous/variables.html":{}}}],["forwardref",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["found",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["framework",{"_index":1289,"title":{},"body":{"index.html":{}}}],["friends",{"_index":542,"title":{},"body":{"injectables/EmailService.html":{}}}],["frrom",{"_index":906,"title":{},"body":{"injectables/PlanService.html":{}}}],["full",{"_index":457,"title":{},"body":{"injectables/EmailService.html":{}}}],["full_name",{"_index":1178,"title":{},"body":{"injectables/ValidateService.html":{}}}],["fullname",{"_index":720,"title":{},"body":{"interfaces/IUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":1216,"title":{},"body":{"coverage.html":{}}}],["function(attempt",{"_index":748,"title":{},"body":{"interfaces/IUser.html":{}}}],["function(next",{"_index":740,"title":{},"body":{"interfaces/IUser.html":{}}}],["functionality",{"_index":332,"title":{},"body":{"controllers/EmailController.html":{}}}],["functions",{"_index":734,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/IUser.html":{},"miscellaneous/functions.html":{}}}],["generate",{"_index":473,"title":{},"body":{"injectables/EmailService.html":{},"interfaces/IUser.html":{}}}],["generated",{"_index":471,"title":{},"body":{"injectables/EmailService.html":{}}}],["get('budgets",{"_index":610,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["get('card/:id",{"_index":854,"title":{},"body":{"controllers/PlanController.html":{}}}],["get('ping",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["get('profile",{"_index":1115,"title":{},"body":{"controllers/UserController.html":{}}}],["get('reset/:id/:token",{"_index":399,"title":{},"body":{"controllers/EmailController.html":{}}}],["get('reset/:id/:token')@apiokresponse({description",{"_index":339,"title":{},"body":{"controllers/EmailController.html":{}}}],["get()@render('welcome",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["getcard",{"_index":829,"title":{},"body":{"controllers/PlanController.html":{},"injectables/PlanService.html":{}}}],["getcard(@request",{"_index":855,"title":{},"body":{"controllers/PlanController.html":{}}}],["getcard(id",{"_index":904,"title":{},"body":{"injectables/PlanService.html":{}}}],["getcard(req",{"_index":840,"title":{},"body":{"controllers/PlanController.html":{}}}],["getinfo",{"_index":1137,"title":{},"body":{"injectables/UserService.html":{}}}],["getinfo(user",{"_index":1145,"title":{},"body":{"injectables/UserService.html":{}}}],["getprofile",{"_index":1055,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile(@request",{"_index":1116,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile(req",{"_index":1060,"title":{},"body":{"controllers/UserController.html":{}}}],["gets",{"_index":570,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["getting",{"_index":1285,"title":{"index.html":{}},"body":{}}],["greater",{"_index":937,"title":{},"body":{"injectables/PlanService.html":{}}}],["grow",{"_index":1325,"title":{},"body":{"index.html":{}}}],["guaranteed",{"_index":783,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handling",{"_index":324,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["hapi/joi",{"_index":1174,"title":{},"body":{"injectables/ValidateService.html":{},"dependencies.html":{}}}],["hash",{"_index":260,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["hashed",{"_index":744,"title":{},"body":{"interfaces/IUser.html":{}}}],["hbs",{"_index":1251,"title":{},"body":{"dependencies.html":{}}}],["heard",{"_index":525,"title":{},"body":{"injectables/EmailService.html":{}}}],["heavily",{"_index":1296,"title":{},"body":{"index.html":{}}}],["height",{"_index":257,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["here",{"_index":735,"title":{},"body":{"interfaces/IUser.html":{},"index.html":{}}}],["hich",{"_index":455,"title":{},"body":{"injectables/EmailService.html":{}}}],["hidden",{"_index":911,"title":{},"body":{"injectables/PlanService.html":{}}}],["hide",{"_index":910,"title":{},"body":{"injectables/PlanService.html":{}}}],["hidedetails",{"_index":881,"title":{},"body":{"injectables/PlanService.html":{}}}],["hidedetails(doc",{"_index":908,"title":{},"body":{"injectables/PlanService.html":{}}}],["high",{"_index":290,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["his/her",{"_index":370,"title":{},"body":{"controllers/EmailController.html":{}}}],["hour",{"_index":475,"title":{},"body":{"injectables/EmailService.html":{}}}],["html",{"_index":459,"title":{},"body":{"injectables/EmailService.html":{}}}],["httpexception",{"_index":1086,"title":{},"body":{"controllers/UserController.html":{}}}],["https://api.imgur.com/3/image",{"_index":1366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":1341,"title":{},"body":{"index.html":{}}}],["https://savelite",{"_index":307,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["httpstatus",{"_index":1087,"title":{},"body":{"controllers/UserController.html":{}}}],["httpstatus.bad_request",{"_index":1096,"title":{},"body":{"controllers/UserController.html":{}}}],["icon",{"_index":685,"title":{},"body":{"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":1187,"title":{},"body":{"coverage.html":{}}}],["iexpense",{"_index":705,"title":{"interfaces/IExpense.html":{}},"body":{"interfaces/IExpense.html":{},"injectables/ModelService.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":797,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":253,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["imagedeletehash",{"_index":1111,"title":{},"body":{"controllers/UserController.html":{}}}],["imagedto",{"_index":252,"title":{"classes/ImageDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["images",{"_index":267,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["imgdelhash",{"_index":721,"title":{},"body":{"interfaces/IUser.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["imgur_client_id",{"_index":1367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["imgur_endpoint",{"_index":1365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["immediately",{"_index":368,"title":{},"body":{"controllers/EmailController.html":{}}}],["import",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["imports",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{}}}],["include",{"_index":331,"title":{},"body":{"controllers/EmailController.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["information",{"_index":1147,"title":{},"body":{"injectables/UserService.html":{}}}],["inherited",{"_index":477,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":74,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"coverage.html":{}}}],["injectables",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"overview.html":{}}}],["injectmodel",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ModelService.html":{},"injectables/ScheduleService.html":{}}}],["injectmodel('expense",{"_index":820,"title":{},"body":{"injectables/ModelService.html":{}}}],["injectmodel('plans",{"_index":819,"title":{},"body":{"injectables/ModelService.html":{},"injectables/ScheduleService.html":{}}}],["injectmodel('user",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ModelService.html":{}}}],["input",{"_index":270,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["inspired",{"_index":1297,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1303,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1305,"title":{},"body":{"index.html":{}}}],["instructions",{"_index":534,"title":{},"body":{"injectables/EmailService.html":{}}}],["interface",{"_index":704,"title":{"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{}},"body":{"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"coverage.html":{}}}],["interfaces",{"_index":706,"title":{},"body":{"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"overview.html":{}}}],["interval",{"_index":239,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["intro",{"_index":524,"title":{},"body":{"injectables/EmailService.html":{}}}],["invalid",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["invokes",{"_index":774,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["iplan",{"_index":713,"title":{"interfaces/IPlan.html":{}},"body":{"interfaces/IPlan.html":{},"injectables/ModelService.html":{},"injectables/ScheduleService.html":{},"coverage.html":{}}}],["ismatch",{"_index":751,"title":{},"body":{"interfaces/IUser.html":{}}}],["isnan(periodamount",{"_index":931,"title":{},"body":{"injectables/PlanService.html":{}}}],["isnan(trgamount",{"_index":932,"title":{},"body":{"injectables/PlanService.html":{}}}],["issued",{"_index":787,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["isuseridvalid",{"_index":431,"title":{},"body":{"injectables/EmailService.html":{}}}],["isuseridvalid(id",{"_index":437,"title":{},"body":{"injectables/EmailService.html":{}}}],["iuser",{"_index":137,"title":{"interfaces/IUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{},"injectables/ModelService.html":{},"coverage.html":{}}}],["job",{"_index":1021,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["jobs",{"_index":1001,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["joi",{"_index":1173,"title":{},"body":{"injectables/ValidateService.html":{}}}],["joi.number().min(11).max(14).required",{"_index":1181,"title":{},"body":{"injectables/ValidateService.html":{}}}],["joi.object",{"_index":1177,"title":{},"body":{"injectables/ValidateService.html":{}}}],["joi.string().min(4).required",{"_index":1180,"title":{},"body":{"injectables/ValidateService.html":{}}}],["joi.string().min(5).required().email",{"_index":1182,"title":{},"body":{"injectables/ValidateService.html":{}}}],["joi.string().min(6).required",{"_index":1179,"title":{},"body":{"injectables/ValidateService.html":{}}}],["joi.string().min(8).required",{"_index":1183,"title":{},"body":{"injectables/ValidateService.html":{}}}],["join",{"_index":1332,"title":{},"body":{"index.html":{}}}],["json",{"_index":371,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{}}}],["jsonwebtoken",{"_index":482,"title":{},"body":{"injectables/EmailService.html":{}}}],["jsonwebtokens",{"_index":469,"title":{},"body":{"injectables/EmailService.html":{}}}],["jwt",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"modules/ExpenseModule.html":{},"injectables/JwtStrategy.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["jwt's",{"_index":771,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt.sign",{"_index":487,"title":{},"body":{"injectables/EmailService.html":{}}}],["jwt.strategy",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt.verify(token",{"_index":497,"title":{},"body":{"injectables/EmailService.html":{}}}],["jwt_secret",{"_index":1357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":795,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":81,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1338,"title":{},"body":{"index.html":{}}}],["kinds",{"_index":325,"title":{},"body":{"controllers/EmailController.html":{}}}],["last",{"_index":199,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["last_name",{"_index":200,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["lastname",{"_index":219,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["lexical",{"_index":737,"title":{},"body":{"interfaces/IUser.html":{}}}],["license",{"_index":1344,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1322,"title":{},"body":{"index.html":{}}}],["line",{"_index":194,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{}}}],["link",{"_index":263,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":265,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["literal",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"classes/PlanDto.html":{}}}],["local",{"_index":806,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{}}}],["localstrategy",{"_index":82,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["lodash",{"_index":679,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"dependencies.html":{}}}],["log",{"_index":1067,"title":{},"body":{"controllers/UserController.html":{}}}],["login",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/ValidateService.html":{}}}],["login(@request",{"_index":1099,"title":{},"body":{"controllers/UserController.html":{}}}],["login(req",{"_index":1064,"title":{},"body":{"controllers/UserController.html":{}}}],["login(user",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":208,"title":{"classes/LoginDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["loginvalidation",{"_index":1168,"title":{},"body":{"injectables/ValidateService.html":{}}}],["loginvalidation(data",{"_index":1171,"title":{},"body":{"injectables/ValidateService.html":{}}}],["lost",{"_index":526,"title":{},"body":{"injectables/EmailService.html":{}}}],["made",{"_index":1071,"title":{},"body":{"controllers/UserController.html":{}}}],["mail",{"_index":213,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["mailer",{"_index":463,"title":{},"body":{"injectables/EmailService.html":{}}}],["mailgen",{"_index":485,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["mailgenerator",{"_index":519,"title":{},"body":{"injectables/EmailService.html":{}}}],["mailgenerator.generate(email",{"_index":544,"title":{},"body":{"injectables/EmailService.html":{}}}],["make",{"_index":741,"title":{},"body":{"interfaces/IUser.html":{}}}],["matching",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(trgamount",{"_index":939,"title":{},"body":{"injectables/PlanService.html":{}}}],["max",{"_index":206,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["message",{"_index":284,"title":{},"body":{"injectables/CloudNotificationService.html":{},"interfaces/IUser.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":1263,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":467,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["middle",{"_index":197,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["middle_name",{"_index":198,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["middleware",{"_index":502,"title":{},"body":{"injectables/EmailService.html":{}}}],["minlenght",{"_index":727,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["minlength",{"_index":729,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":1271,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1321,"title":{},"body":{"index.html":{}}}],["mobile",{"_index":203,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["mode",{"_index":1311,"title":{},"body":{"index.html":{}}}],["model",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ModelService.html":{},"injectables/ScheduleService.html":{}}}],["model.service",{"_index":481,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["model/expense.model",{"_index":817,"title":{},"body":{"injectables/ModelService.html":{}}}],["model/plan.model",{"_index":418,"title":{},"body":{"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"injectables/ModelService.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"modules/UserModule.html":{}}}],["model/user.model",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"injectables/ModelService.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["modelservice",{"_index":430,"title":{"injectables/ModelService.html":{}},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/ModelService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["modelservice:18",{"_index":478,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["module",{"_index":33,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":35,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":919,"title":{},"body":{"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"dependencies.html":{}}}],["moment().add(n",{"_index":942,"title":{},"body":{"injectables/PlanService.html":{}}}],["moment().format('llll",{"_index":1027,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["moment(time).format('llll",{"_index":948,"title":{},"body":{"injectables/PlanService.html":{}}}],["mongodb",{"_index":677,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"injectables/UserService.html":{}}}],["mongodb://localhost:27017/savelite",{"_index":1361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongodb_uri",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"injectables/ModelService.html":{},"injectables/ScheduleService.html":{},"dependencies.html":{}}}],["mongoose.document",{"_index":708,"title":{},"body":{"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{}}}],["mongoose.schema",{"_index":709,"title":{},"body":{"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["mongoose.schema.types.objectid",{"_index":710,"title":{},"body":{"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":425,"title":{},"body":{"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature([{name",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{}}}],["mongoosemodule.forroot(configkeys.mongodb_uri",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["month",{"_index":1043,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["monthly",{"_index":242,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["monthly_plan",{"_index":1045,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["months",{"_index":945,"title":{},"body":{"injectables/PlanService.html":{}}}],["more",{"_index":1022,"title":{},"body":{"injectables/ScheduleService.html":{},"index.html":{}}}],["moredetails",{"_index":947,"title":{},"body":{"injectables/PlanService.html":{}}}],["msg",{"_index":480,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/ModelService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["myśliwiec",{"_index":1339,"title":{},"body":{"index.html":{}}}],["n",{"_index":938,"title":{},"body":{"injectables/PlanService.html":{}}}],["n/b",{"_index":528,"title":{},"body":{"injectables/EmailService.html":{}}}],["name",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":1299,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1343,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":994,"title":{},"body":{"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"controllers/PlanController.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1238,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"injectables/ModelService.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"controllers/ExpenseController.html":{},"modules/ExpenseModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PlanController.html":{},"modules/PlanModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1242,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":185,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["new",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newbudget",{"_index":558,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["newbudget(@request",{"_index":615,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["newbudget(req",{"_index":590,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["newlist",{"_index":701,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["newlist.expenses",{"_index":703,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["newplan",{"_index":980,"title":{},"body":{"injectables/PlanService.html":{}}}],["next",{"_index":193,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{}}}],["node.js",{"_index":1288,"title":{},"body":{"index.html":{}}}],["note",{"_index":732,"title":{},"body":{"interfaces/IUser.html":{}}}],["notfoundexception",{"_index":375,"title":{},"body":{"controllers/EmailController.html":{},"controllers/UserController.html":{}}}],["notfoundexception(error",{"_index":398,"title":{},"body":{"controllers/EmailController.html":{},"controllers/UserController.html":{}}}],["notification",{"_index":814,"title":{},"body":{"injectables/ModelService.html":{},"injectables/UserService.html":{}}}],["notification.service",{"_index":424,"title":{},"body":{"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"injectables/ModelService.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["notification.service.ts",{"_index":280,"title":{},"body":{"injectables/CloudNotificationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["notification.service.ts:13",{"_index":294,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["notification.service.ts:18",{"_index":285,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["notificationoptions",{"_index":281,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["notifications",{"_index":1150,"title":{},"body":{"injectables/UserService.html":{}}}],["notimplementedexception",{"_index":602,"title":{},"body":{"controllers/ExpenseController.html":{},"controllers/PlanController.html":{}}}],["notimplementedexception(error",{"_index":613,"title":{},"body":{"controllers/ExpenseController.html":{},"controllers/PlanController.html":{}}}],["npm",{"_index":1304,"title":{},"body":{"index.html":{}}}],["null",{"_index":711,"title":{},"body":{"interfaces/IExpense.html":{},"miscellaneous/variables.html":{}}}],["num",{"_index":960,"title":{},"body":{"injectables/PlanService.html":{}}}],["num.length",{"_index":962,"title":{},"body":{"injectables/PlanService.html":{}}}],["num.slice((cardnum",{"_index":964,"title":{},"body":{"injectables/PlanService.html":{}}}],["number",{"_index":177,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":189,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["objectid",{"_index":676,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{}}}],["objectid.isvalid(budgetid",{"_index":699,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["objectid.isvalid(id",{"_index":693,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{}}}],["open",{"_index":1323,"title":{},"body":{"index.html":{}}}],["operations",{"_index":330,"title":{},"body":{"controllers/EmailController.html":{}}}],["optional",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1002,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["out",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["outro",{"_index":541,"title":{},"body":{"injectables/EmailService.html":{}}}],["overview",{"_index":1348,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1235,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":348,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["param",{"_index":376,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param('id",{"_index":403,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{}}}],["param('token",{"_index":404,"title":{},"body":{"controllers/EmailController.html":{}}}],["parameter",{"_index":777,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["parameters",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"miscellaneous/functions.html":{}}}],["parsefloat(body.periodicamount",{"_index":928,"title":{},"body":{"injectables/PlanService.html":{}}}],["parsefloat(body.targetamount",{"_index":930,"title":{},"body":{"injectables/PlanService.html":{}}}],["passing",{"_index":775,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passord",{"_index":349,"title":{},"body":{"controllers/EmailController.html":{}}}],["passport",{"_index":770,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["passportmodule.register({defaultstrategy",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["passportstrategy",{"_index":792,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":793,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passrespagedto",{"_index":214,"title":{"classes/PassResPageDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["password",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"miscellaneous/variables.html":{}}}],["passwordfield",{"_index":803,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["payload",{"_index":496,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{}}}],["payload._id",{"_index":789,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":790,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":498,"title":{},"body":{"injectables/EmailService.html":{}}}],["per",{"_index":207,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["period",{"_index":936,"title":{},"body":{"injectables/PlanService.html":{}}}],["periodamount",{"_index":927,"title":{},"body":{"injectables/PlanService.html":{}}}],["periodic",{"_index":232,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["periodicamount",{"_index":233,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["phone_no",{"_index":204,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"miscellaneous/variables.html":{}}}],["pin",{"_index":227,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["ping",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["plan",{"_index":230,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{}}}],["plan.save",{"_index":925,"title":{},"body":{"injectables/PlanService.html":{}}}],["plancontroller",{"_index":824,"title":{"controllers/PlanController.html":{}},"body":{"controllers/PlanController.html":{},"modules/PlanModule.html":{},"coverage.html":{}}}],["plandetails",{"_index":922,"title":{},"body":{"injectables/PlanService.html":{}}}],["plandto",{"_index":229,"title":{"classes/PlanDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["planmodel",{"_index":812,"title":{},"body":{"injectables/ModelService.html":{},"injectables/ScheduleService.html":{}}}],["planmodule",{"_index":48,"title":{"modules/PlanModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/PlanModule.html":{},"modules.html":{},"overview.html":{}}}],["planname",{"_index":231,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["plans",{"_index":426,"title":{},"body":{"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"controllers/PlanController.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"modules/UserModule.html":{}}}],["plans.controller",{"_index":876,"title":{},"body":{"modules/PlanModule.html":{}}}],["plans.service",{"_index":875,"title":{},"body":{"modules/PlanModule.html":{}}}],["plans/plans.module",{"_index":419,"title":{},"body":{"modules/EmailModule.html":{}}}],["plans/plans.service",{"_index":849,"title":{},"body":{"controllers/PlanController.html":{},"modules/UserModule.html":{}}}],["planservice",{"_index":848,"title":{"injectables/PlanService.html":{}},"body":{"controllers/PlanController.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["plansschema",{"_index":417,"title":{},"body":{"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"interfaces/IPlan.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["please",{"_index":1333,"title":{},"body":{"index.html":{}}}],["point",{"_index":1276,"title":{},"body":{"miscellaneous/functions.html":{}}}],["post",{"_index":373,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["post(':bid/:id",{"_index":624,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["post(':id",{"_index":621,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["post('budget",{"_index":614,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["post('budget/edit/:id",{"_index":630,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["post('budget/image/:id",{"_index":633,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["post('del",{"_index":618,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["post('image",{"_index":1126,"title":{},"body":{"controllers/UserController.html":{}}}],["post('login",{"_index":1098,"title":{},"body":{"controllers/UserController.html":{}}}],["post('reset",{"_index":407,"title":{},"body":{"controllers/EmailController.html":{}}}],["post('reset')@apicreatedresponse({description",{"_index":364,"title":{},"body":{"controllers/EmailController.html":{}}}],["post('signup",{"_index":1092,"title":{},"body":{"controllers/UserController.html":{}}}],["post('signup')@apicreatedresponse({description",{"_index":1077,"title":{},"body":{"controllers/UserController.html":{}}}],["post('token",{"_index":1118,"title":{},"body":{"controllers/UserController.html":{}}}],["post('update",{"_index":1123,"title":{},"body":{"controllers/UserController.html":{}}}],["post()@apicreatedresponse({description",{"_index":355,"title":{},"body":{"controllers/EmailController.html":{}}}],["prefix",{"_index":322,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["previously",{"_index":785,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["priority",{"_index":289,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["private",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{}}}],["processevery",{"_index":1003,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["product",{"_index":522,"title":{},"body":{"injectables/EmailService.html":{}}}],["production",{"_index":1313,"title":{},"body":{"index.html":{}}}],["production_flag",{"_index":1229,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":1085,"title":{},"body":{"controllers/UserController.html":{}}}],["profileimage",{"_index":722,"title":{},"body":{"interfaces/IUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["profileupdatedto",{"_index":269,"title":{"classes/ProfileUpdateDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["progressive",{"_index":1287,"title":{},"body":{"index.html":{}}}],["project",{"_index":1324,"title":{},"body":{"index.html":{}}}],["promise",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/LocalStrategy.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{}}}],["promise((resolve",{"_index":492,"title":{},"body":{"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":174,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["protected",{"_index":435,"title":{},"body":{"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/ModelService.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["pull",{"_index":700,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["push",{"_index":687,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/UserService.html":{}}}],["put",{"_index":603,"title":{},"body":{"controllers/ExpenseController.html":{},"controllers/PlanController.html":{}}}],["put(':id",{"_index":859,"title":{},"body":{"controllers/PlanController.html":{}}}],["rave",{"_index":1230,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rave_production_flag",{"_index":1362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rave_publick_key",{"_index":1231,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rave_secret_key",{"_index":1232,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ravepay",{"_index":1260,"title":{},"body":{"dependencies.html":{}}}],["ravepay(rave_publick_key",{"_index":1372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ravepayconnect",{"_index":1008,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["read",{"_index":1334,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{}}}],["recalculate",{"_index":917,"title":{},"body":{"injectables/PlanService.html":{}}}],["receivenewpassword",{"_index":432,"title":{},"body":{"injectables/EmailService.html":{}}}],["receivenewpassword(body",{"_index":443,"title":{},"body":{"injectables/EmailService.html":{}}}],["receiving",{"_index":784,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["reflect",{"_index":1262,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":1175,"title":{},"body":{"injectables/ValidateService.html":{}}}],["registrationtoken",{"_index":286,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["rehash",{"_index":743,"title":{},"body":{"interfaces/IUser.html":{}}}],["reject",{"_index":493,"title":{},"body":{"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["reject('wrong",{"_index":513,"title":{},"body":{"injectables/EmailService.html":{}}}],["reject(e",{"_index":512,"title":{},"body":{"injectables/EmailService.html":{}}}],["reject(er",{"_index":506,"title":{},"body":{"injectables/EmailService.html":{}}}],["reject(err",{"_index":503,"title":{},"body":{"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["reject(false",{"_index":518,"title":{},"body":{"injectables/EmailService.html":{}}}],["remark",{"_index":251,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["remarks",{"_index":250,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["remove",{"_index":580,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["removebudget",{"_index":559,"title":{},"body":{"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{}}}],["removebudget(@body",{"_index":619,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["removebudget(body",{"_index":594,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["removebudget(user",{"_index":672,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["render",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["render('welcome",{"_index":26,"title":{},"body":{"controllers/AppController.html":{}}}],["repository",{"_index":1302,"title":{},"body":{"index.html":{}}}],["req",{"_index":562,"title":{},"body":{"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["req.user",{"_index":617,"title":{},"body":{"controllers/ExpenseController.html":{},"controllers/PlanController.html":{}}}],["req.user._id",{"_index":1105,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.email",{"_index":1108,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.firebasetoken",{"_index":1113,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.fullname",{"_index":1107,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.imagedeletehash",{"_index":1112,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.password",{"_index":1101,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.phone_no",{"_index":1109,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.profileimage",{"_index":1110,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.username",{"_index":1106,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":210,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{}}}],["requests",{"_index":326,"title":{},"body":{"controllers/EmailController.html":{},"controllers/UserController.html":{}}}],["require('../../savelite",{"_index":299,"title":{},"body":{"injectables/CloudNotificationService.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":181,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["requires",{"_index":297,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["res",{"_index":351,"title":{},"body":{"controllers/EmailController.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{}}}],["res.duration",{"_index":1048,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["res.render('reset",{"_index":406,"title":{},"body":{"controllers/EmailController.html":{}}}],["res.send(userdetails",{"_index":1114,"title":{},"body":{"controllers/UserController.html":{}}}],["res.setheader('authorization",{"_index":1102,"title":{},"body":{"controllers/UserController.html":{}}}],["reset",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["reset_password_expires",{"_index":723,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["reset_password_token",{"_index":724,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["resetpassword",{"_index":334,"title":{},"body":{"controllers/EmailController.html":{}}}],["resetpassword(@res",{"_index":402,"title":{},"body":{"controllers/EmailController.html":{}}}],["resetpassword(res",{"_index":337,"title":{},"body":{"controllers/EmailController.html":{}}}],["resetpasswordtemplate",{"_index":433,"title":{},"body":{"injectables/EmailService.html":{}}}],["resetpasswordtemplate(user",{"_index":451,"title":{},"body":{"injectables/EmailService.html":{}}}],["resolve('password",{"_index":508,"title":{},"body":{"injectables/EmailService.html":{}}}],["resolve(doc",{"_index":1160,"title":{},"body":{"injectables/UserService.html":{}}}],["resolve(true",{"_index":516,"title":{},"body":{"injectables/EmailService.html":{}}}],["resource",{"_index":340,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["response",{"_index":338,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["responsible",{"_index":323,"title":{},"body":{"controllers/EmailController.html":{}}}],["result",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":359,"title":{},"body":{"controllers/EmailController.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["return",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["returned",{"_index":401,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["returned'})@apiforbiddenresponse({description",{"_index":342,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["returns",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CloudNotificationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ModelService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{}}}],["run",{"_index":1308,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1265,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":500,"title":{},"body":{"injectables/EmailService.html":{},"interfaces/IUser.html":{}}}],["salted",{"_index":521,"title":{},"body":{"injectables/EmailService.html":{}}}],["save",{"_index":914,"title":{},"body":{"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["saved",{"_index":892,"title":{},"body":{"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["saveimage",{"_index":560,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["saveimage(@param('id",{"_index":634,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["saveimage(id",{"_index":598,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["savelite",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/EmailService.html":{}}}],["saves",{"_index":449,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{}}}],["savetoken",{"_index":1138,"title":{},"body":{"injectables/UserService.html":{}}}],["savetoken(user",{"_index":1148,"title":{},"body":{"injectables/UserService.html":{}}}],["saveupdate",{"_index":882,"title":{},"body":{"injectables/PlanService.html":{}}}],["saveupdate(plan",{"_index":912,"title":{},"body":{"injectables/PlanService.html":{}}}],["scalable",{"_index":1292,"title":{},"body":{"index.html":{}}}],["schedule",{"_index":1032,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["schedule.service",{"_index":996,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["schedulemodule",{"_index":49,"title":{"modules/ScheduleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ScheduleModule.html":{},"modules.html":{},"overview.html":{}}}],["scheduler/schedule.module",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["scheduleservice",{"_index":991,"title":{"injectables/ScheduleService.html":{}},"body":{"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"coverage.html":{},"overview.html":{}}}],["schema",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"injectables/ValidateService.html":{}}}],["schema.validate(data",{"_index":1184,"title":{},"body":{"injectables/ValidateService.html":{}}}],["scope",{"_index":738,"title":{},"body":{"interfaces/IUser.html":{}}}],["searches",{"_index":468,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PlanService.html":{}}}],["searchplans",{"_index":1009,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["searchplans(duration",{"_index":1015,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["seconds",{"_index":1005,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["secret",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{},"injectables/EmailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":798,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["send",{"_index":1075,"title":{},"body":{"controllers/UserController.html":{}}}],["sendemail",{"_index":335,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["sendemail(@body",{"_index":394,"title":{},"body":{"controllers/EmailController.html":{}}}],["sendemail(mail",{"_index":354,"title":{},"body":{"controllers/EmailController.html":{}}}],["sendemail(user",{"_index":460,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendgrid",{"_index":462,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendgrid/mail",{"_index":484,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["sendgrid_key",{"_index":1363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sendnotification",{"_index":282,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["sendnotification(registrationtoken",{"_index":283,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["sendpasswordresetemail",{"_index":434,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendpasswordresetemail(email",{"_index":464,"title":{},"body":{"injectables/EmailService.html":{}}}],["sends",{"_index":361,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{}}}],["sendtoken",{"_index":1056,"title":{},"body":{"controllers/UserController.html":{}}}],["sendtoken(@request",{"_index":1119,"title":{},"body":{"controllers/UserController.html":{}}}],["sendtoken(req",{"_index":1072,"title":{},"body":{"controllers/UserController.html":{}}}],["sent",{"_index":346,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["server",{"_index":1293,"title":{},"body":{"index.html":{}}}],["service",{"_index":466,"title":{},"body":{"injectables/EmailService.html":{}}}],["serviceaccount",{"_index":298,"title":{},"body":{"injectables/CloudNotificationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["session",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["set",{"_index":695,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["setbudget",{"_index":655,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["setbudget(data",{"_index":674,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["sg.ne9yqvfisrah7wpu_9pmta.j6rl9nnivuvrtyyzn3gmhkh416l7jvd3rrhnux07ufg",{"_index":1364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sgmail",{"_index":483,"title":{},"body":{"injectables/EmailService.html":{}}}],["sgmail.send(msg",{"_index":549,"title":{},"body":{"injectables/EmailService.html":{}}}],["sgmail.setapikey(configkeys.sendgrid_key",{"_index":548,"title":{},"body":{"injectables/EmailService.html":{}}}],["show",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["side",{"_index":1294,"title":{},"body":{"index.html":{}}}],["signature",{"_index":772,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["signed",{"_index":786,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["signing",{"_index":780,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["signoptions",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":1057,"title":{},"body":{"controllers/UserController.html":{}}}],["signup(@body",{"_index":1093,"title":{},"body":{"controllers/UserController.html":{}}}],["signup(data",{"_index":1076,"title":{},"body":{"controllers/UserController.html":{}}}],["single",{"_index":776,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["size",{"_index":258,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["sorry",{"_index":527,"title":{},"body":{"injectables/EmailService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"index.html":{}}}],["spent",{"_index":247,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["sponsors",{"_index":1327,"title":{},"body":{"index.html":{}}}],["src/.../cloud",{"_index":1354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../config.ts",{"_index":1352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../encryption.ts",{"_index":1274,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../expense.model.ts",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1272,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../plan.model.ts",{"_index":1355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ravepay.ts",{"_index":1273,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.model.ts",{"_index":1356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:13",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:8",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":76,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:38",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":763,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:24",{"_index":766,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":764,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.strategy.ts",{"_index":799,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:15",{"_index":804,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:7",{"_index":801,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/config/config.ts",{"_index":1194,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/controller/cloud",{"_index":279,"title":{},"body":{"injectables/CloudNotificationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/controller/email/email.controller.ts",{"_index":321,"title":{},"body":{"controllers/EmailController.html":{},"coverage.html":{}}}],["src/controller/email/email.controller.ts:30",{"_index":358,"title":{},"body":{"controllers/EmailController.html":{}}}],["src/controller/email/email.controller.ts:50",{"_index":344,"title":{},"body":{"controllers/EmailController.html":{}}}],["src/controller/email/email.controller.ts:66",{"_index":365,"title":{},"body":{"controllers/EmailController.html":{}}}],["src/controller/email/email.module.ts",{"_index":414,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/controller/email/email.service.ts",{"_index":428,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/controller/email/email.service.ts:101",{"_index":452,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/controller/email/email.service.ts:138",{"_index":461,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/controller/email/email.service.ts:37",{"_index":465,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/controller/email/email.service.ts:57",{"_index":444,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/controller/email/email.service.ts:85",{"_index":438,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/controller/expense/expense.controller.ts",{"_index":551,"title":{},"body":{"controllers/ExpenseController.html":{},"coverage.html":{}}}],["src/controller/expense/expense.controller.ts:100",{"_index":589,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.controller.ts:119",{"_index":575,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.controller.ts:138",{"_index":583,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.controller.ts:157",{"_index":600,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.controller.ts:176",{"_index":579,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.controller.ts:25",{"_index":569,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.controller.ts:43",{"_index":592,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.controller.ts:61",{"_index":597,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.controller.ts:80",{"_index":564,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["src/controller/expense/expense.module.ts",{"_index":647,"title":{},"body":{"modules/ExpenseModule.html":{}}}],["src/controller/expense/expense.service.ts",{"_index":651,"title":{},"body":{"injectables/ExpenseService.html":{},"coverage.html":{}}}],["src/controller/expense/expense.service.ts:120",{"_index":659,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/expense/expense.service.ts:135",{"_index":667,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/expense/expense.service.ts:16",{"_index":661,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/expense/expense.service.ts:26",{"_index":657,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/expense/expense.service.ts:38",{"_index":675,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/expense/expense.service.ts:52",{"_index":669,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/expense/expense.service.ts:67",{"_index":673,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/expense/expense.service.ts:78",{"_index":671,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/expense/expense.service.ts:98",{"_index":665,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["src/controller/model.service.ts",{"_index":811,"title":{},"body":{"injectables/ModelService.html":{},"coverage.html":{}}}],["src/controller/model.service.ts:10",{"_index":815,"title":{},"body":{"injectables/ModelService.html":{}}}],["src/controller/model.service.ts:18",{"_index":816,"title":{},"body":{"injectables/ModelService.html":{}}}],["src/controller/plans/plans.controller.ts",{"_index":825,"title":{},"body":{"controllers/PlanController.html":{},"coverage.html":{}}}],["src/controller/plans/plans.controller.ts:24",{"_index":836,"title":{},"body":{"controllers/PlanController.html":{}}}],["src/controller/plans/plans.controller.ts:42",{"_index":842,"title":{},"body":{"controllers/PlanController.html":{}}}],["src/controller/plans/plans.controller.ts:59",{"_index":833,"title":{},"body":{"controllers/PlanController.html":{}}}],["src/controller/plans/plans.controller.ts:78",{"_index":845,"title":{},"body":{"controllers/PlanController.html":{}}}],["src/controller/plans/plans.controller.ts:97",{"_index":839,"title":{},"body":{"controllers/PlanController.html":{}}}],["src/controller/plans/plans.module.ts",{"_index":874,"title":{},"body":{"modules/PlanModule.html":{}}}],["src/controller/plans/plans.service.ts",{"_index":877,"title":{},"body":{"injectables/PlanService.html":{},"coverage.html":{}}}],["src/controller/plans/plans.service.ts:118",{"_index":905,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:133",{"_index":884,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:152",{"_index":916,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:183",{"_index":913,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:20",{"_index":891,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:203",{"_index":899,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:42",{"_index":886,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:75",{"_index":902,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:87",{"_index":894,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/plans/plans.service.ts:99",{"_index":909,"title":{},"body":{"injectables/PlanService.html":{}}}],["src/controller/user/user.controller.ts",{"_index":1054,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/controller/user/user.controller.ts:112",{"_index":1081,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user/user.controller.ts:130",{"_index":1084,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user/user.controller.ts:24",{"_index":1078,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user/user.controller.ts:47",{"_index":1066,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user/user.controller.ts:74",{"_index":1062,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user/user.controller.ts:93",{"_index":1074,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user/user.module.ts",{"_index":1132,"title":{},"body":{"modules/UserModule.html":{}}}],["src/controller/user/user.service.ts",{"_index":1134,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/controller/user/user.service.ts:13",{"_index":1143,"title":{},"body":{"injectables/UserService.html":{}}}],["src/controller/user/user.service.ts:30",{"_index":1146,"title":{},"body":{"injectables/UserService.html":{}}}],["src/controller/user/user.service.ts:47",{"_index":1141,"title":{},"body":{"injectables/UserService.html":{}}}],["src/controller/user/user.service.ts:63",{"_index":1152,"title":{},"body":{"injectables/UserService.html":{}}}],["src/controller/user/user.service.ts:79",{"_index":1149,"title":{},"body":{"injectables/UserService.html":{}}}],["src/dto/interface.dto.ts",{"_index":173,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["src/dto/interface.dto.ts:100",{"_index":427,"title":{},"body":{"classes/EmailResetDto.html":{}}}],["src/dto/interface.dto.ts:110",{"_index":821,"title":{},"body":{"classes/PassResPageDto.html":{}}}],["src/dto/interface.dto.ts:117",{"_index":823,"title":{},"body":{"classes/PassResPageDto.html":{}}}],["src/dto/interface.dto.ts:124",{"_index":822,"title":{},"body":{"classes/PassResPageDto.html":{}}}],["src/dto/interface.dto.ts:13",{"_index":312,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/dto/interface.dto.ts:134",{"_index":275,"title":{},"body":{"classes/CardDto.html":{}}}],["src/dto/interface.dto.ts:141",{"_index":276,"title":{},"body":{"classes/CardDto.html":{}}}],["src/dto/interface.dto.ts:149",{"_index":274,"title":{},"body":{"classes/CardDto.html":{}}}],["src/dto/interface.dto.ts:157",{"_index":272,"title":{},"body":{"classes/CardDto.html":{}}}],["src/dto/interface.dto.ts:164",{"_index":277,"title":{},"body":{"classes/CardDto.html":{}}}],["src/dto/interface.dto.ts:171",{"_index":271,"title":{},"body":{"classes/CardDto.html":{}}}],["src/dto/interface.dto.ts:178",{"_index":273,"title":{},"body":{"classes/CardDto.html":{}}}],["src/dto/interface.dto.ts:188",{"_index":868,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/dto/interface.dto.ts:195",{"_index":867,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/dto/interface.dto.ts:202",{"_index":869,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/dto/interface.dto.ts:209",{"_index":870,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/dto/interface.dto.ts:21",{"_index":314,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/dto/interface.dto.ts:216",{"_index":866,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/dto/interface.dto.ts:223",{"_index":865,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/dto/interface.dto.ts:248",{"_index":641,"title":{},"body":{"classes/ExpenseDto.html":{}}}],["src/dto/interface.dto.ts:255",{"_index":639,"title":{},"body":{"classes/ExpenseDto.html":{}}}],["src/dto/interface.dto.ts:262",{"_index":640,"title":{},"body":{"classes/ExpenseDto.html":{}}}],["src/dto/interface.dto.ts:269",{"_index":642,"title":{},"body":{"classes/ExpenseDto.html":{}}}],["src/dto/interface.dto.ts:276",{"_index":643,"title":{},"body":{"classes/ExpenseDto.html":{}}}],["src/dto/interface.dto.ts:287",{"_index":183,"title":{},"body":{"classes/BudgetDto.html":{}}}],["src/dto/interface.dto.ts:29",{"_index":313,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/dto/interface.dto.ts:294",{"_index":182,"title":{},"body":{"classes/BudgetDto.html":{}}}],["src/dto/interface.dto.ts:306",{"_index":757,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:313",{"_index":759,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:320",{"_index":754,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:327",{"_index":761,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:334",{"_index":762,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:341",{"_index":756,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:348",{"_index":760,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:355",{"_index":755,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:362",{"_index":758,"title":{},"body":{"classes/ImageDto.html":{}}}],["src/dto/interface.dto.ts:37",{"_index":317,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/dto/interface.dto.ts:374",{"_index":319,"title":{},"body":{"classes/DeleteDto.html":{}}}],["src/dto/interface.dto.ts:381",{"_index":318,"title":{},"body":{"classes/DeleteDto.html":{}}}],["src/dto/interface.dto.ts:389",{"_index":987,"title":{},"body":{"classes/ProfileUpdateDto.html":{}}}],["src/dto/interface.dto.ts:392",{"_index":986,"title":{},"body":{"classes/ProfileUpdateDto.html":{}}}],["src/dto/interface.dto.ts:45",{"_index":316,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/dto/interface.dto.ts:52",{"_index":311,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/dto/interface.dto.ts:59",{"_index":315,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/dto/interface.dto.ts:71",{"_index":810,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/dto/interface.dto.ts:78",{"_index":809,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/dto/interface.dto.ts:89",{"_index":1052,"title":{},"body":{"classes/TokenDto.html":{}}}],["src/main.ts",{"_index":1215,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/model/expense.model",{"_index":422,"title":{},"body":{"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{}}}],["src/model/expense.model.ts",{"_index":707,"title":{},"body":{"interfaces/IExpense.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/model/plan.model.ts",{"_index":714,"title":{},"body":{"interfaces/IPlan.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/model/user.model.ts",{"_index":717,"title":{},"body":{"interfaces/IUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/scheduler/schedule.module.ts",{"_index":992,"title":{},"body":{"modules/ScheduleModule.html":{}}}],["src/scheduler/schedule.service.ts",{"_index":1006,"title":{},"body":{"injectables/ScheduleService.html":{},"coverage.html":{}}}],["src/scheduler/schedule.service.ts:12",{"_index":1012,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["src/scheduler/schedule.service.ts:20",{"_index":1013,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["src/scheduler/schedule.service.ts:42",{"_index":1016,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["src/scheduler/schedule.service.ts:47",{"_index":1014,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["src/utils/encryption.ts",{"_index":1221,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/utils/ravepay.ts",{"_index":1228,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/validation/validate.service.ts",{"_index":1166,"title":{},"body":{"injectables/ValidateService.html":{},"coverage.html":{}}}],["src/validation/validate.service.ts:20",{"_index":1172,"title":{},"body":{"injectables/ValidateService.html":{}}}],["src/validation/validate.service.ts:8",{"_index":1170,"title":{},"body":{"injectables/ValidateService.html":{}}}],["stands",{"_index":187,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["start",{"_index":1309,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1312,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1314,"title":{},"body":{"index.html":{}}}],["started",{"_index":1286,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1301,"title":{},"body":{"index.html":{}}}],["starting",{"_index":1275,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":1188,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":1095,"title":{},"body":{"controllers/UserController.html":{}}}],["stay",{"_index":1335,"title":{},"body":{"index.html":{}}}],["still",{"_index":441,"title":{},"body":{"injectables/EmailService.html":{}}}],["stored",{"_index":1063,"title":{},"body":{"controllers/UserController.html":{}}}],["strategy",{"_index":769,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":458,"title":{},"body":{"injectables/EmailService.html":{}}}],["submits",{"_index":369,"title":{},"body":{"controllers/EmailController.html":{}}}],["succesfully",{"_index":341,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["success",{"_index":1122,"title":{},"body":{"controllers/UserController.html":{}}}],["successful",{"_index":510,"title":{},"body":{"injectables/EmailService.html":{},"controllers/PlanController.html":{}}}],["successfull",{"_index":984,"title":{},"body":{"injectables/PlanService.html":{}}}],["successfully",{"_index":356,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":794,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["supplied",{"_index":888,"title":{},"body":{"injectables/PlanService.html":{}}}],["support",{"_index":1328,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":742,"title":{},"body":{"interfaces/IUser.html":{}}}],["svg",{"_index":1346,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1267,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":1234,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1233,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":887,"title":{},"body":{"injectables/PlanService.html":{}}}],["target",{"_index":234,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["targetamount",{"_index":235,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["team@savelite.com",{"_index":545,"title":{},"body":{"injectables/EmailService.html":{}}}],["template",{"_index":454,"title":{},"body":{"injectables/EmailService.html":{}}}],["test",{"_index":1317,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1320,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1319,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1316,"title":{},"body":{"index.html":{}}}],["text",{"_index":540,"title":{},"body":{"injectables/EmailService.html":{}}}],["thanks",{"_index":1326,"title":{},"body":{"index.html":{}}}],["theme",{"_index":520,"title":{},"body":{"injectables/EmailService.html":{}}}],["then((payload",{"_index":515,"title":{},"body":{"injectables/EmailService.html":{}}}],["then((user",{"_index":495,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.agenda.define('daily_plan",{"_index":1023,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.agenda.define('monthly_plan",{"_index":1031,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.agenda.define('weekly_plan",{"_index":1030,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.agenda.every('*/1",{"_index":1037,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.agenda.every('0",{"_index":1040,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.authservice.login(req.user",{"_index":1100,"title":{},"body":{"controllers/UserController.html":{}}}],["this.authservice.validateuser(data",{"_index":808,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.calculateplan(body",{"_index":923,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.createjob",{"_index":1019,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.decryptcard(doc",{"_index":966,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.emailservice.isuseridvalid(id",{"_index":405,"title":{},"body":{"controllers/EmailController.html":{}}}],["this.emailservice.receivenewpassword(body",{"_index":409,"title":{},"body":{"controllers/EmailController.html":{}}}],["this.emailservice.sendpasswordresetemail(mail.email",{"_index":396,"title":{},"body":{"controllers/EmailController.html":{}}}],["this.encryptcard(res",{"_index":979,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.errorhandler('amount",{"_index":934,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.errorhandler('invalid",{"_index":694,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{}}}],["this.errorhandler('plan",{"_index":985,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.errorhandler('wrong",{"_index":933,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.errorhandler(`${body.duration",{"_index":946,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.errorhandler(err",{"_index":683,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{}}}],["this.errorhandler(error",{"_index":967,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.expensemodel",{"_index":689,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["this.expensemodel.find",{"_index":680,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["this.expensemodel.findbyidandremove",{"_index":696,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["this.expensemodel.findone",{"_index":702,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["this.expensemodel.findoneandupdate",{"_index":686,"title":{},"body":{"injectables/ExpenseService.html":{}}}],["this.expservice.addexpense(body",{"_index":623,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.expservice.addimage(id",{"_index":635,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.expservice.allbudget(req.user",{"_index":612,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.expservice.delexpense(bid",{"_index":629,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.expservice.delimage(bid",{"_index":638,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.expservice.editbudget(body",{"_index":632,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.expservice.editexpense(bid",{"_index":626,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.expservice.removebudget(req.user",{"_index":620,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.expservice.setbudget(body",{"_index":616,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["this.hidedetails(this.decryptcard(doc",{"_index":926,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.hidedetails(this.decryptcard(element",{"_index":971,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.jwtservice.sign",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.notificationoptions",{"_index":310,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["this.planmodel(this.encryptcard(plandetails",{"_index":924,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.planmodel.find",{"_index":968,"title":{},"body":{"injectables/PlanService.html":{},"injectables/ScheduleService.html":{}}}],["this.planmodel.findbyid(id",{"_index":978,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.planmodel.findone",{"_index":965,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.planmodel.findoneanddelete",{"_index":983,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.planmodel.findoneandupdate",{"_index":982,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.planservice.allplans(req.user",{"_index":858,"title":{},"body":{"controllers/PlanController.html":{}}}],["this.planservice.create(body",{"_index":853,"title":{},"body":{"controllers/PlanController.html":{}}}],["this.planservice.delete(req.user",{"_index":864,"title":{},"body":{"controllers/PlanController.html":{}}}],["this.planservice.getcard(id",{"_index":856,"title":{},"body":{"controllers/PlanController.html":{}}}],["this.planservice.update(req.user",{"_index":861,"title":{},"body":{"controllers/PlanController.html":{}}}],["this.resetpasswordtemplate(user",{"_index":547,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.saveupdate(plan",{"_index":981,"title":{},"body":{"injectables/PlanService.html":{}}}],["this.searchplans('daily",{"_index":1049,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["this.sendemail(user",{"_index":491,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.usermodel",{"_index":1153,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(user._id).then((doc",{"_index":1159,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{}}}],["this.usermodel.findoneandupdate",{"_index":507,"title":{},"body":{"injectables/EmailService.html":{},"injectables/UserService.html":{}}}],["this.userservice.changeprofileimage(req.user",{"_index":1128,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.createuser(data",{"_index":1094,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getinfo(req.user",{"_index":1117,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.savetoken(req.user",{"_index":1120,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateprofile(req.user",{"_index":1125,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validate.loginvalidation(data",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["time",{"_index":940,"title":{},"body":{"injectables/PlanService.html":{}}}],["timestamps",{"_index":712,"title":{},"body":{"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["timetolive",{"_index":291,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["title",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["token",{"_index":211,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["tokendto",{"_index":209,"title":{"classes/TokenDto.html":{}},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["touch",{"_index":1336,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":188,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["trgamount",{"_index":929,"title":{},"body":{"injectables/PlanService.html":{}}}],["trim",{"_index":726,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["true",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"modules/ScheduleModule.html":{},"classes/TokenDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":395,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"injectables/ExpenseService.html":{},"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/ScheduleService.html":{},"controllers/UserController.html":{}}}],["tslint:disable",{"_index":192,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{}}}],["twitter",{"_index":1342,"title":{},"body":{"index.html":{}}}],["type",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"injectables/CloudNotificationService.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"injectables/ModelService.html":{},"classes/PassResPageDto.html":{},"controllers/PlanController.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"injectables/ScheduleService.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":1300,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1268,"title":{},"body":{"dependencies.html":{}}}],["un",{"_index":903,"title":{},"body":{"injectables/PlanService.html":{}}}],["unauthorizedexception",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('user",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":731,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":201,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":1315,"title":{},"body":{"index.html":{}}}],["update",{"_index":846,"title":{},"body":{"controllers/PlanController.html":{},"injectables/PlanService.html":{},"controllers/UserController.html":{}}}],["update(user",{"_index":915,"title":{},"body":{"injectables/PlanService.html":{}}}],["updated",{"_index":847,"title":{},"body":{"controllers/PlanController.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["updateinfo",{"_index":1058,"title":{},"body":{"controllers/UserController.html":{}}}],["updateinfo(@request",{"_index":1124,"title":{},"body":{"controllers/UserController.html":{}}}],["updateinfo(req",{"_index":1079,"title":{},"body":{"controllers/UserController.html":{}}}],["updatepassword",{"_index":336,"title":{},"body":{"controllers/EmailController.html":{}}}],["updatepassword(@body",{"_index":408,"title":{},"body":{"controllers/EmailController.html":{}}}],["updatepassword(body",{"_index":363,"title":{},"body":{"controllers/EmailController.html":{}}}],["updateplan",{"_index":830,"title":{},"body":{"controllers/PlanController.html":{}}}],["updateplan(@param('id",{"_index":860,"title":{},"body":{"controllers/PlanController.html":{}}}],["updateplan(id",{"_index":843,"title":{},"body":{"controllers/PlanController.html":{}}}],["updateprofile",{"_index":1139,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofile(user",{"_index":1151,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofileimage",{"_index":1059,"title":{},"body":{"controllers/UserController.html":{}}}],["updateprofileimage(@request",{"_index":1127,"title":{},"body":{"controllers/UserController.html":{}}}],["updateprofileimage(req",{"_index":1082,"title":{},"body":{"controllers/UserController.html":{}}}],["updating",{"_index":918,"title":{},"body":{"injectables/PlanService.html":{}}}],["url",{"_index":262,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"controllers/ExpenseController.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["use",{"_index":530,"title":{},"body":{"injectables/EmailService.html":{},"interfaces/IUser.html":{}}}],["used",{"_index":472,"title":{},"body":{"injectables/EmailService.html":{},"interfaces/IUser.html":{},"injectables/UserService.html":{}}}],["usefindandmodify",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/ScheduleModule.html":{}}}],["useguards",{"_index":374,"title":{},"body":{"controllers/EmailController.html":{},"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('jwt",{"_index":609,"title":{},"body":{"controllers/ExpenseController.html":{},"controllers/PlanController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('local",{"_index":1097,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@delete(':bid/:id')@apicreatedresponse({description",{"_index":573,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@delete(':id')@apicreatedresponse({description",{"_index":838,"title":{},"body":{"controllers/PlanController.html":{}}}],["useguards(undefined)@delete('budget/image/:bid/:id')@apicreatedresponse({description",{"_index":578,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@get('budgets')@apiokresponse({description",{"_index":568,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@get('card/:id')@apiokresponse({description",{"_index":841,"title":{},"body":{"controllers/PlanController.html":{}}}],["useguards(undefined)@get('profile')@apiokresponse({description",{"_index":1061,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get()@apiokresponse({description",{"_index":832,"title":{},"body":{"controllers/PlanController.html":{}}}],["useguards(undefined)@post(':bid/:id')@apicreatedresponse({description",{"_index":588,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@post(':id')@apicreatedresponse({description",{"_index":563,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@post('budget')@apicreatedresponse({description",{"_index":591,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@post('budget/edit/:id')@apicreatedresponse({description",{"_index":582,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@post('budget/image/:id')@apicreatedresponse({description",{"_index":599,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@post('del",{"_index":595,"title":{},"body":{"controllers/ExpenseController.html":{}}}],["useguards(undefined)@post('image')@apicreatedresponse({description",{"_index":1083,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@post('login')@apicreatedresponse({description",{"_index":1065,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@post('token')@apicreatedresponse({description",{"_index":1073,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@post('update')@apicreatedresponse({description",{"_index":1080,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@post()@apicreatedresponse({description",{"_index":835,"title":{},"body":{"controllers/PlanController.html":{}}}],["useguards(undefined)@put(':id')@apicreatedresponse({description",{"_index":844,"title":{},"body":{"controllers/PlanController.html":{}}}],["usenewurlparser",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/ScheduleModule.html":{}}}],["user",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"classes/EmailResetDto.html":{},"injectables/EmailService.html":{},"classes/ExpenseDto.html":{},"modules/ExpenseModule.html":{},"injectables/ExpenseService.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"modules/PlanModule.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user's",{"_index":456,"title":{},"body":{"injectables/EmailService.html":{},"interfaces/IUser.html":{}}}],["user._id",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{}}}],["user.controller",{"_index":1133,"title":{},"body":{"modules/UserModule.html":{}}}],["user.createdat",{"_index":486,"title":{},"body":{"injectables/EmailService.html":{}}}],["user.email",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{}}}],["user.fullname",{"_index":523,"title":{},"body":{"injectables/EmailService.html":{}}}],["user.id",{"_index":682,"title":{},"body":{"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["user.ismodified('password",{"_index":745,"title":{},"body":{"interfaces/IUser.html":{}}}],["user.password",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"interfaces/IUser.html":{}}}],["user.save",{"_index":1158,"title":{},"body":{"injectables/UserService.html":{}}}],["user.service",{"_index":1088,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":420,"title":{},"body":{"modules/EmailModule.html":{}}}],["user/user.service",{"_index":649,"title":{},"body":{"modules/ExpenseModule.html":{},"modules/PlanModule.html":{}}}],["user_name",{"_index":202,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"injectables/ValidateService.html":{}}}],["usercontroller",{"_index":1053,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdetails",{"_index":1104,"title":{},"body":{"controllers/UserController.html":{}}}],["usermodel",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ModelService.html":{}}}],["usermodule",{"_index":50,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IUser.html":{},"classes/ImageDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateService.html":{},"miscellaneous/variables.html":{}}}],["usernamefield",{"_index":805,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":1068,"title":{},"body":{"controllers/UserController.html":{}}}],["userschema",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"interfaces/IUser.html":{},"modules/PlanModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema.methods.checkpassword",{"_index":747,"title":{},"body":{"interfaces/IUser.html":{}}}],["userschema.pre('save",{"_index":739,"title":{},"body":{"interfaces/IUser.html":{}}}],["userservice",{"_index":648,"title":{"injectables/UserService.html":{}},"body":{"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":447,"title":{},"body":{"injectables/EmailService.html":{}}}],["utils/encryption",{"_index":921,"title":{},"body":{"injectables/PlanService.html":{}}}],["utils/ravepay",{"_index":1018,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["valid",{"_index":442,"title":{},"body":{"injectables/EmailService.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/PlanService.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["validate(payload",{"_index":765,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(usernamefield",{"_index":802,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validated",{"_index":347,"title":{},"body":{"controllers/EmailController.html":{},"injectables/ExpenseService.html":{},"injectables/PlanService.html":{},"injectables/UserService.html":{}}}],["validates",{"_index":360,"title":{},"body":{"controllers/EmailController.html":{}}}],["validateservice",{"_index":83,"title":{"injectables/ValidateService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ValidateService.html":{},"coverage.html":{},"overview.html":{}}}],["validateuser",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(data",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":1176,"title":{},"body":{"injectables/ValidateService.html":{}}}],["validation/validate.service",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["validator",{"_index":725,"title":{},"body":{"interfaces/IUser.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["validator.isemail",{"_index":728,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["validpass",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":288,"title":{},"body":{"injectables/CloudNotificationService.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":296,"title":{},"body":{"injectables/CloudNotificationService.html":{}}}],["variable",{"_index":195,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["variables",{"_index":1351,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verified",{"_index":788,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["verifies",{"_index":445,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{}}}],["want",{"_index":736,"title":{},"body":{"interfaces/IUser.html":{}}}],["watch",{"_index":1310,"title":{},"body":{"index.html":{}}}],["way",{"_index":779,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["we're",{"_index":782,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["website",{"_index":1340,"title":{},"body":{"index.html":{}}}],["week",{"_index":1035,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["weekly",{"_index":241,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["weekly_plan",{"_index":1042,"title":{},"body":{"injectables/ScheduleService.html":{}}}],["weeks",{"_index":944,"title":{},"body":{"injectables/PlanService.html":{}}}],["width",{"_index":256,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"injectables/ExpenseService.html":{},"interfaces/IExpense.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["withdrawal",{"_index":237,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{}}}],["withdrawaldate",{"_index":238,"title":{},"body":{"classes/BudgetDto.html":{},"classes/CardDto.html":{},"classes/CreateDto.html":{},"classes/DeleteDto.html":{},"classes/EmailResetDto.html":{},"classes/ExpenseDto.html":{},"interfaces/IPlan.html":{},"classes/ImageDto.html":{},"classes/LoginDto.html":{},"classes/PassResPageDto.html":{},"classes/PlanDto.html":{},"injectables/PlanService.html":{},"classes/ProfileUpdateDto.html":{},"classes/TokenDto.html":{},"miscellaneous/variables.html":{}}}],["within",{"_index":531,"title":{},"body":{"injectables/EmailService.html":{}}}],["works",{"_index":781,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["worry",{"_index":535,"title":{},"body":{"injectables/EmailService.html":{}}}],["x1f33b",{"_index":546,"title":{},"body":{"injectables/EmailService.html":{}}}],["yn2x2tw8dn3kyegrrqhlmr952cfnuy2e",{"_index":1358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["you'd",{"_index":1331,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/ExpenseModule.html":{},"modules/PlanModule.html":{},"modules/ScheduleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ping\n                            \n                            \n                                show\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ping\n                        \n                        \n                    \n                \n            \n            \n                \nping()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('ping')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            show\n                        \n                        \n                    \n                \n            \n            \n                \nshow()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Render('welcome')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { title: string; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Render } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n\n  @Get()\n  @Render('welcome')\n  show() {\n    return {title: 'Savelite'};\n  }\n\n  @Get('ping')\n  ping() {\n    return 'Awake';\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nExpenseModule\n\nExpenseModule\n\nAppModule -->\n\nExpenseModule->AppModule\n\n\n\n\n\nPlanModule\n\nPlanModule\n\nAppModule -->\n\nPlanModule->AppModule\n\n\n\n\n\nScheduleModule\n\nScheduleModule\n\nAppModule -->\n\nScheduleModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            EmailModule\n                        \n                        \n                            ExpenseModule\n                        \n                        \n                            PlanModule\n                        \n                        \n                            ScheduleModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { UserModule } from './controller/user/user.module';\nimport { PlanModule } from './controller/plans/plans.module';\nimport { ExpenseModule } from './controller/expense/expense.module';\nimport { EmailModule } from './controller/email/email.module';\nimport { configKeys } from './config/config';\nimport { ScheduleModule } from './scheduler/schedule.module';\n\n@Module({\n  imports: [MongooseModule.forRoot(configKeys.MONGODB_URI, {\n    useNewUrlParser: true,\n    useFindAndModify: false,\n  }),\n  AuthModule, EmailModule, UserModule, PlanModule, ExpenseModule, ScheduleModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nValidateService\n\nValidateService\n\nAuthModule -->\n\nValidateService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            ValidateService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AuthService } from './auth.service';\nimport { PlanModule } from './../controller/plans/plans.module';\nimport { EmailModule } from './../controller/email/email.module';\nimport { UserModule } from '../controller/user/user.module';\nimport { UserSchema } from '../model/user.model';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ValidateService } from '../validation/validate.service';\nimport { ExpenseModule } from './../controller/expense/expense.module';\nimport { configKeys } from './../config/config';\n\n@Module({\n  imports: [\n    forwardRef(() => UserModule),\n    forwardRef(() => EmailModule),\n    forwardRef(() => PlanModule),\n    forwardRef(() => ExpenseModule),\n    PassportModule.register({defaultStrategy: 'jwt', session: false}),\n    JwtModule.register({\n      secret: configKeys.JWT_SECRET,\n      signOptions: {expiresIn: '1h'},\n    }),\n    MongooseModule.forFeature([{name: 'User', schema: UserSchema}]),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy, ValidateService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, validate: ValidateService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        validate\n                                                  \n                                                        \n                                                                        ValidateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(data: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, BadRequestException, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { ValidateService } from '../validation/validate.service';\nimport { Model } from 'mongoose';\nimport * as bcrypt from 'bcryptjs';\nimport { IUser } from '../model/user.model';\n\n@Injectable()\nexport class AuthService {\n\n    constructor(\n        @InjectModel('User') private readonly userModel: Model,\n        private readonly validate: ValidateService,\n        private jwtService: JwtService,\n    ) { }\n\n    public async validateUser(data: { username: string, password: string }): Promise {\n        // validate data before checking for Admin\n        const { error } = this.validate.loginValidation(data);\n        if (error) {\n            throw new BadRequestException(error.details[0].message);\n        }\n        // check if the Admin is already in database\n        const user = await this.userModel.findOne({ username: data.username });\n        if (!user) {\n            throw new UnauthorizedException('user not found');\n        }\n\n        // check if password is correct\n        const validPass = await bcrypt.compare(data.password, user.password);\n        if (!validPass) {\n            throw new BadRequestException('Email or password is invalid');\n        }\n        return user;\n    }\n\n    login(user: any) {\n        return this.jwtService.sign({\n            id: user._id,\n            email: user.email,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BudgetDto.html":{"url":"classes/BudgetDto.html","title":"class - BudgetDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BudgetDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                budget\n                            \n                            \n                                    Readonly\n                                budgetName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            budget\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: Number, description: 'budget amount', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:294\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            budgetName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'budget name', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:287\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CardDto.html":{"url":"classes/CardDto.html","title":"class - CardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                amount\n                            \n                            \n                                    Readonly\n                                card_no\n                            \n                            \n                                    Readonly\n                                cvv\n                            \n                            \n                                    Readonly\n                                expiry_date\n                            \n                            \n                                    Readonly\n                                firstname\n                            \n                            \n                                    Readonly\n                                lastname\n                            \n                            \n                                    Readonly\n                                pin\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            amount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'amount', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:171\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            card_no\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: '15 digit card number', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:157\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            cvv\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'cvv', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:178\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            expiry_date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'card expiry date', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:149\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'first name attached to card', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:134\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lastname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'last name attached to card', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:141\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            pin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'card 4 digit pin', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:164\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudNotificationService.html":{"url":"injectables/CloudNotificationService.html","title":"injectable - CloudNotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CloudNotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/cloud-notification.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                notificationOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendNotification\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotification(registrationToken: string, message: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/cloud-notification.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            notificationOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        priority: 'high',\n        timeToLive: 60 * 60 * 24,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/controller/cloud-notification.service.ts:13\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import * as admin from 'firebase-admin';\nimport { Injectable } from '@nestjs/common';\n// tslint:disable-next-line: no-var-requires\nconst serviceAccount = require('../../savelite-c8f57-firebase-adminsdk.json');\n\nconst firebaseApp = admin.initializeApp({\n    credential: admin.credential.cert(serviceAccount),\n    databaseURL: 'https://savelite-c8f57.firebaseio.com',\n});\n\n@Injectable()\nexport class CloudNotificationService {\n    private notificationOptions = {\n        priority: 'high',\n        timeToLive: 60 * 60 * 24,\n    };\n\n    async sendNotification(registrationToken: string, message: any) {\n        return await admin.messaging().sendToDevice(registrationToken, message, this.notificationOptions);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDto.html":{"url":"classes/CreateDto.html","title":"class - CreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n            \n                Description\n            \n            \n                DTO stands for Data Transfer Object\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                first_name\n                            \n                            \n                                    Readonly\n                                last_name\n                            \n                            \n                                    Readonly\n                                middle_name\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                phone_no\n                            \n                            \n                                    Readonly\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user email address', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            first_name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user first name', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            last_name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user last name', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            middle_name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user middle name', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user password', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            phone_no\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user mobile number', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            user_name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'unique username', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:37\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteDto.html":{"url":"classes/DeleteDto.html","title":"class - DeleteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                budgetId\n                            \n                            \n                                    Readonly\n                                images\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            budgetId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'budget id', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:381\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            images\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ImageDto[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'image list to be deleted', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:374\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailController.html":{"url":"controllers/EmailController.html","title":"controller - EmailController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/email/email.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email\n            \n\n            \n                Description\n            \n            \n                the email controller is responsible for handling all kinds of requests \nconcerning client email in the api.\noperations include password reset functionality and confirmation\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                sendEmail\n                            \n                            \n                                    Async\n                                updatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            resetPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(res: Response, id: string, token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('reset/:id/:token')@ApiOkResponse({description: 'The resource has been succesfully returned'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/email/email.controller.ts:50\n                \n            \n\n\n            \n                \n                    After the user clicks the link sent to their email,\nuser is validated then a page where they can input their new\npassord details is displayed\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        response body\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user id\n\n                                    \n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user unique token for authentication\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmail(mail: EmailResetDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/email/email.controller.ts:30\n                \n            \n\n\n            \n                \n                    retrieves the email sent by the client, validates it\nthen sends a password reset link to the client's mail\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                                EmailResetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user email\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassword(body: PassResPageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/email/email.controller.ts:66\n                \n            \n\n\n            \n                \n                    this endpoint is called immediately after the user submits\nhis/her new passord details\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                PassResPageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        json data containing user id, token and new password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, UseGuards, Body, Res, NotFoundException, Param } from '@nestjs/common';\nimport { Response } from 'express';\nimport { AuthGuard } from '@nestjs/passport';\nimport { EmailResetDto, PassResPageDto } from './../../dto/interface.dto';\nimport { EmailService } from './email.service';\nimport { ApiUseTags, ApiOkResponse, ApiForbiddenResponse, ApiNotFoundResponse, ApiCreatedResponse } from '@nestjs/swagger';\n\n/**\n * the email controller is responsible for handling all kinds of requests \n * concerning client email in the api.\n * \n * operations include password reset functionality and confirmation\n */\n@ApiUseTags('email')\n@Controller('email')\nexport class EmailController {\n    constructor(\n        private readonly emailService: EmailService,\n    ) { }\n\n    /**\n     * retrieves the email sent by the client, validates it\n     * then sends a password reset link to the client's mail\n     * @param mail user email\n     */\n    @Post()\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async sendEmail(@Body() mail: EmailResetDto) {\n        try {\n            return await this.emailService.sendPasswordResetEmail(mail.email);\n        } catch (error) {\n            throw new NotFoundException(error);\n        }\n    }\n\n    /**\n     * After the user clicks the link sent to their email,\n     * user is validated then a page where they can input their new\n     * passord details is displayed\n     * @param res response body\n     * @param id user id\n     * @param token user unique token for authentication\n     */\n    @Get('reset/:id/:token')\n    @ApiOkResponse({description: 'The resource has been succesfully returned'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async resetPassword(@Res() res: Response, @Param('id') id: string, @Param('token') token: string) {\n        if (await this.emailService.isUserIdValid(id, token)) {\n            return res.render('reset-password', {id, token});\n        }\n        throw new NotFoundException();\n    }\n\n    /**\n     * this endpoint is called immediately after the user submits\n     * his/her new passord details\n     * @param body json data containing user id, token and new password\n     */\n    @Post('reset')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async updatePassword(@Body() body: PassResPageDto) {\n        try {\n            return await this.emailService.receiveNewPassword(body);\n        } catch (error) {\n            throw new NotFoundException(error);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_imports\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nPlanModule\n\nPlanModule\n\n\n\nEmailModule\n\nEmailModule\n\nEmailModule -->\n\nPlanModule->EmailModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nEmailModule -->\n\nUserModule->EmailModule\n\n\n\n\n\nCloudNotificationService \n\nCloudNotificationService \n\nCloudNotificationService  -->\n\nEmailModule->CloudNotificationService \n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nCloudNotificationService\n\nCloudNotificationService\n\nEmailModule -->\n\nCloudNotificationService->EmailModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/controller/email/email.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudNotificationService\n                        \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PlanModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CloudNotificationService\n                        \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthModule } from './../../auth/auth.module';\nimport { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserSchema } from './../../model/user.model';\nimport { EmailController } from './email.controller';\nimport { plansSchema } from './../../model/plan.model';\nimport { PlanModule } from './../plans/plans.module';\nimport { UserModule } from './../user/user.module';\nimport { EmailService } from './email.service';\nimport { expenseSchema } from 'src/model/expense.model';\nimport { CloudNotificationService } from './../cloud-notification.service';\n\n@Module({\n    imports: [\n        forwardRef(() => AuthModule), UserModule, PlanModule,\n        MongooseModule.forFeature([\n            {name: 'User', schema: UserSchema},\n            {name: 'Plans', schema: plansSchema},\n            {name: 'Expense', schema: expenseSchema},\n        ]),\n        PassportModule.register({defaultStrategy: 'jwt', session: false}),\n    ],\n    exports: [EmailService, CloudNotificationService],\n    controllers: [EmailController],\n    providers: [EmailService, CloudNotificationService],\n})\n\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailResetDto.html":{"url":"classes/EmailResetDto.html","title":"class - EmailResetDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailResetDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user mail address', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:100\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/email/email.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ModelService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isUserIdValid\n                            \n                            \n                                    Public\n                                receiveNewPassword\n                            \n                            \n                                    Private\n                                resetPasswordTemplate\n                            \n                            \n                                    Private\n                                    Async\n                                sendEmail\n                            \n                            \n                                    Public\n                                    Async\n                                sendPasswordResetEmail\n                            \n                            \n                                    Protected\n                                errorHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isUserIdValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isUserIdValid(id: string, token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/email/email.service.ts:85\n                \n            \n\n\n            \n                \n                    determines if user token is authentic and still valid\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user id\n\n                                    \n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            receiveNewPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    receiveNewPassword(body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/email/email.service.ts:57\n                \n            \n\n\n            \n                \n                    verifies token, encrypts the new password using bcrypt.js\nsaves the encrypted password in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        json data containing user id, token and new password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            resetPasswordTemplate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPasswordTemplate(user: any, url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/email/email.service.ts:101\n                \n            \n\n\n            \n                \n                    creates a template containing the url hich is sent to the user's mail.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full user info from database\n\n                                    \n                                \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        url for password reset page\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { to: any; from: string; subject: string; html: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            sendEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmail(user: any, url: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/email/email.service.ts:138\n                \n            \n\n\n            \n                \n                    sends email to the user using sendgrid mailer\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user info\n\n                                    \n                                \n                                \n                                    url\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        url for password reset page\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            sendPasswordResetEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPasswordResetEmail(email: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/email/email.service.ts:37\n                \n            \n\n\n            \n                \n                    Service method\nsearches database for user email, if email is not found an error is returned\nusing jsonwebTokens a token with an expiry date of 1hour is\ngenerated.\nthe generated token and unique user id is used to generate a\nurl link which expires in an hour.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user email\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        url link or an error\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            errorHandler\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorHandler(err: any)\n                \n            \n\n\n            \n                \n                    Inherited from         ModelService\n\n                \n            \n            \n                \n                        Defined in         ModelService:18\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { msg: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ModelService } from '../model.service';\nimport * as jwt from 'jsonwebtoken';\nimport * as bcrypt from 'bcryptjs';\nimport { configKeys } from './../../config/config';\nimport * as sgMail from '@sendgrid/mail';\nimport * as MailGen from 'mailgen';\n\n@Injectable()\nexport class EmailService extends ModelService {\n\n    /**\n     * Service method\n     * \n     * searches database for user email, if email is not found an error is returned\n     * using jsonwebTokens a token with an expiry date of 1hour is\n     * generated.\n     * the generated token and unique user id is used to generate a\n     * url link which expires in an hour.\n     * @param email user email\n     * @returns url link or an error\n     */\n    public async sendPasswordResetEmail(email: any) {\n        try {\n            const user = await this.userModel.findOne({ email });\n            const secret = `${user.password}-${user.createdAt}`;\n            const token = jwt.sign({ id: user._id }, secret, {\n                expiresIn: 3600, // 1 hour\n            });\n            const url = `${configKeys.EMAIL_URL}${user._id}/${token}`;\n            // await this.sendEmail(user, url);\n            return { url };\n        } catch (error) {\n            return error;\n        }\n    }\n\n    /**\n     * verifies token, encrypts the new password using bcrypt.js\n     * saves the encrypted password in the database\n     * @param body json data containing user id, token and new password\n     */\n    public receiveNewPassword(body: any) {\n        return new Promise((resolve, reject) => {\n            const { id, token, password } = body;\n            this.userModel.findOne({ _id: id }).then((user) => {\n                const secret = user.password + '-' + user.createdAt;\n                const payload: any = jwt.verify(token, secret);\n                if (payload.id === user._id) {\n                    bcrypt.genSalt(10, (err, salt) => {\n                        // Call error-handling middleware:\n                        if (err) { reject(err); }\n                        bcrypt.hash(password, salt, (er, hash) => {\n                            // Call error-handling middleware:\n                            if (err) { reject(er); }\n                            this.userModel.findOneAndUpdate({ _id: id }, { password: hash })\n                                .then(() => { resolve('Password change successful'); })\n                                .catch(e => reject(e));\n                        });\n                    });\n                } else { reject('wrong id'); }\n            }).catch((e) => { reject(e); });\n        });\n    }\n\n    /**\n     * determines if user token is authentic and still valid\n     * @param id user id\n     * @param token user token\n     */\n    public isUserIdValid(id: string, token: string): Promise {\n        return new Promise((resolve, reject) => {\n            this.userModel.findOne({ _id: id }).then((user) => {\n                const secret = user.password + '-' + user.createdAt;\n                return jwt.verify(token, secret);\n            }).then((payload) => {\n                resolve(true);\n            }).catch((err) => { reject(false); });\n        });\n    }\n\n    /**\n     * creates a template containing the url hich is sent to the user's mail.\n     * @param user full user info from database\n     * @param url url for password reset page\n     */\n    private resetPasswordTemplate(user: any, url: string) {\n        const mailGenerator = new MailGen({\n            theme: 'salted',\n            product: {\n                name: 'savelite',\n                link: '',\n            },\n        });\n        const email = {\n            body: {\n                name: user.fullname,\n                intro: ['We heard that you lost your Savelite password. Sorry about that!', 'N/B: If you don’t use this link within 1 hour, it will expire.'],\n                action: {\n                    instructions: 'But don’t worry! You can use the following link to reset your password',\n                    button: {\n                        color: '#d19115',\n                        text: 'Reset Password',\n                        link: url,\n                    },\n                },\n                outro: 'Your friends at Savelite',\n            },\n        };\n        const emailTemplate = mailGenerator.generate(email);\n        return {\n            to: user.email,\n            from: 'team@savelite.com',\n            subject: '&#x1F33B; Savelite Password Reset &#x1F33B;',\n            html: emailTemplate,\n        };\n    }\n\n    /**\n     * sends email to the user using sendgrid mailer\n     * @param user user info\n     * @param url url for password reset page\n     */\n    private async sendEmail(user: any, url: any) {\n        try {\n            const msg = this.resetPasswordTemplate(user, url);\n            sgMail.setApiKey(configKeys.SENDGRID_KEY);\n            return sgMail.send(msg);\n        } catch (error) {\n            return error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExpenseController.html":{"url":"controllers/ExpenseController.html","title":"controller - ExpenseController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExpenseController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/expense/expense.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                expense\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addExpense\n                            \n                            \n                                    Async\n                                allBudget\n                            \n                            \n                                    Async\n                                deleteExpense\n                            \n                            \n                                    Async\n                                deleteImage\n                            \n                            \n                                    Async\n                                editBudget\n                            \n                            \n                                    Async\n                                editExpense\n                            \n                            \n                                    Async\n                                newBudget\n                            \n                            \n                                    Async\n                                removeBudget\n                            \n                            \n                                    Async\n                                saveImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addExpense\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addExpense(id: string, req, body: ExpenseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post(':id')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:80\n                \n            \n\n\n            \n                \n                    add an expense to the current budget\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget id\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                ExpenseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        body data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            allBudget\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    allBudget(id: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('budgets')@ApiOkResponse({description: 'The resource has been succesfully returned'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:25\n                \n            \n\n\n            \n                \n                    gets all created budgets\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget id\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteExpense\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteExpense(bId: string, id: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete(':bId/:id')@ApiCreatedResponse({description: 'The resource has successfully been deleted'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:119\n                \n            \n\n\n            \n                \n                    delete expense from a budget\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget id\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        expense id\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteImage(bId: string, id: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete('budget/image/:bId/:id')@ApiCreatedResponse({description: 'The resource has successfully been deleted'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:176\n                \n            \n\n\n            \n                \n                    remove image url from budget details\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget id\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        image id\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editBudget\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editBudget(id: string, body: BudgetDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('budget/edit/:id')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:138\n                \n            \n\n\n            \n                \n                    edit budget\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        busget id\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                BudgetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget detils\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editExpense\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editExpense(bId: string, id: string, req, body: ExpenseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post(':bId/:id')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:100\n                \n            \n\n\n            \n                \n                    edit expense\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget id\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        expense id\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                ExpenseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        expense details\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            newBudget\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newBudget(req, body: BudgetDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('budget')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:43\n                \n            \n\n\n            \n                \n                    create new budget\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                BudgetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeBudget\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeBudget(body: any, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('del-budget')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:61\n                \n            \n\n\n            \n                \n                    delete a budget\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget data\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            saveImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveImage(id: string, body: ImageDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('budget/image/:id')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/expense/expense.controller.ts:157\n                \n            \n\n\n            \n                \n                    adds an image url to budget data\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        budget id\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                ImageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        image details\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, Post, UseGuards, Body, Response, NotImplementedException, Put, Param, Delete } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ExpenseDto, BudgetDto, ImageDto } from './../../dto/interface.dto';\nimport { ExpenseService } from './expense.service';\nimport { ApiUseTags, ApiOkResponse, ApiForbiddenResponse, ApiNotFoundResponse, ApiCreatedResponse } from '@nestjs/swagger';\n\n@ApiUseTags('expense')\n@Controller('expense')\nexport class ExpenseController {\n\n    constructor(\n        private readonly expService: ExpenseService,\n    ) { }\n\n    /**\n     * gets all created budgets\n     * @param id budget id\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Get('budgets')\n    @ApiOkResponse({description: 'The resource has been succesfully returned'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async allBudget(@Param('id') id: string, @Request() req) {\n        try {\n            return await this.expService.allBudget(req.user, id);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * create new budget\n     * @param req request info\n     * @param body budget data\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post('budget')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async newBudget(@Request() req, @Body() body: BudgetDto) {\n        try {\n            return await this.expService.setBudget(body, req.user);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * delete a budget\n     * @param body budget data\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post('del-budget')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async removeBudget(@Body() body: any, @Request() req) {\n        try {\n            return await this.expService.removeBudget(req.user, body);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * add an expense to the current budget\n     * @param id budget id\n     * @param req request info\n     * @param body body data\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post(':id')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async addExpense(@Param('id') id: string, @Request() req, @Body() body: ExpenseDto) {\n        try {\n            return await this.expService.addExpense(body, req.user, id);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * edit expense\n     * @param bId budget id\n     * @param id expense id\n     * @param req request info\n     * @param body expense details\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post(':bId/:id')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async editExpense(@Param('bId') bId: string, @Param('id') id: string, @Request() req, @Body() body: ExpenseDto) {\n        try {\n            return await this.expService.editExpense(bId, body, req.user, id);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * delete expense from a budget\n     * @param bId budget id\n     * @param id expense id\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Delete(':bId/:id')\n    @ApiCreatedResponse({description: 'The resource has successfully been deleted'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async deleteExpense(@Param('bId') bId: string, @Param('id') id: string, @Request() req) {\n        try {\n            return await this.expService.delExpense(bId, id, req.user);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * edit budget\n     * @param id busget id\n     * @param body budget detils\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post('budget/edit/:id')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async editBudget(@Param('id') id: string, @Body() body: BudgetDto, @Request() req) {\n        try {\n            return await this.expService.editBudget(body, req.user, id);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * adds an image url to budget data\n     * @param id budget id\n     * @param body image details\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post('budget/image/:id')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async saveImage(@Param('id') id: string, @Body() body: ImageDto, @Request() req) {\n        try {\n            return await this.expService.addImage(id, body, req.user);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * remove image url from budget details\n     * @param bId budget id\n     * @param id image id\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Delete('budget/image/:bId/:id')\n    @ApiCreatedResponse({description: 'The resource has successfully been deleted'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async deleteImage(@Param('bId') bId: string, @Param('id') id: string, @Request() req) {\n        try {\n            return await this.expService.delImage(bId, id, req.user);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpenseDto.html":{"url":"classes/ExpenseDto.html","title":"class - ExpenseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpenseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                amount\n                            \n                            \n                                    Readonly\n                                category\n                            \n                            \n                                    Readonly\n                                date\n                            \n                            \n                                    Readonly\n                                descr\n                            \n                            \n                                    Readonly\n                                remark\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            amount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: Number, description: 'amount spent', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:255\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'expense category', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:262\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'date of expense', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:248\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            descr\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'expense description', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:269\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            remark\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'remarks', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:276\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExpenseModule.html":{"url":"modules/ExpenseModule.html","title":"module - ExpenseModule","body":"\n                   \n\n\n\n\n    Modules\n    ExpenseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExpenseModule\n\n\n\ncluster_ExpenseModule_exports\n\n\n\ncluster_ExpenseModule_providers\n\n\n\n\nCloudNotificationService \n\nCloudNotificationService \n\n\n\nExpenseService \n\nExpenseService \n\n\n\nExpenseModule\n\nExpenseModule\n\nCloudNotificationService  -->\n\nExpenseModule->CloudNotificationService \n\n\n\nExpenseService  -->\n\nExpenseModule->ExpenseService \n\n\n\n\n\nCloudNotificationService\n\nCloudNotificationService\n\nExpenseModule -->\n\nCloudNotificationService->ExpenseModule\n\n\n\n\n\nExpenseService\n\nExpenseService\n\nExpenseModule -->\n\nExpenseService->ExpenseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/controller/expense/expense.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudNotificationService\n                        \n                        \n                            ExpenseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExpenseController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CloudNotificationService\n                        \n                        \n                            ExpenseService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { plansSchema } from './../../model/plan.model';\nimport { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { UserSchema } from './../../model/user.model';\nimport { UserService } from './../user/user.service';\nimport { expenseSchema } from 'src/model/expense.model';\nimport { ExpenseService } from './expense.service';\nimport { ExpenseController } from './expense.controller';\nimport { CloudNotificationService } from './../cloud-notification.service';\n\n@Module({\n    imports: [\n        forwardRef(() => AuthModule),\n        MongooseModule.forFeature([\n            {name: 'User', schema: UserSchema},\n            {name: 'Plans', schema: plansSchema},\n            {name: 'Expense', schema: expenseSchema},\n        ]),\n        PassportModule.register({defaultStrategy: 'jwt', session: false}),\n    ],\n    exports: [ExpenseService, CloudNotificationService],\n    controllers: [ExpenseController],\n    providers: [ExpenseService, CloudNotificationService],\n})\n\nexport class ExpenseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExpenseService.html":{"url":"injectables/ExpenseService.html","title":"injectable - ExpenseService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExpenseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/expense/expense.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ModelService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                addExpense\n                            \n                            \n                                    Public\n                                    Async\n                                addImage\n                            \n                            \n                                    Public\n                                    Async\n                                allBudget\n                            \n                            \n                                    Public\n                                    Async\n                                delExpense\n                            \n                            \n                                    Public\n                                    Async\n                                delImage\n                            \n                            \n                                    Public\n                                    Async\n                                editBudget\n                            \n                            \n                                    Public\n                                    Async\n                                editExpense\n                            \n                            \n                                    Public\n                                    Async\n                                removeBudget\n                            \n                            \n                                    Public\n                                    Async\n                                setBudget\n                            \n                            \n                                    Protected\n                                errorHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            addExpense\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addExpense(data: ExpenseDto, user: any, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ExpenseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            addImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addImage(id: string, data: ImageDto, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                ImageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            allBudget\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    allBudget(user: any, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            delExpense\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delExpense(budgetId: string, id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    budgetId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            delImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delImage(budgetId: string, id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    budgetId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            editBudget\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editBudget(data: BudgetDto, user: any, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                BudgetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            editExpense\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editExpense(budgetId: string, data: ExpenseDto, user: any, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    budgetId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                ExpenseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            removeBudget\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeBudget(user, budget: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    budget\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            setBudget\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setBudget(data: BudgetDto, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/expense/expense.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                BudgetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            errorHandler\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorHandler(err: any)\n                \n            \n\n\n            \n                \n                    Inherited from         ModelService\n\n                \n            \n            \n                \n                        Defined in         ModelService:18\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { msg: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ModelService } from '../model.service';\nimport { ObjectID } from 'mongodb';\nimport { ExpenseDto, BudgetDto, ImageDto } from './../../dto/interface.dto';\nimport * as _ from 'lodash';\n\n@Injectable()\nexport class ExpenseService extends ModelService {\n\n    /**\n     * \n     * @param user decoded user info from validated token\n     * contains user id\n     * @param id \n     */\n    public async allBudget(user: any, id: string): Promise {\n        try {\n            return await this.expenseModel.find({\n                _userID: user.id,\n            });\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    public async addExpense(data: ExpenseDto, user: any, id: string): Promise {\n        const body = _.pick(data, ['date', 'amount', 'category', 'descr', 'remark', 'icon']);\n        try {\n            return await this.expenseModel.findOneAndUpdate({\n                _userID: user.id,\n                _id: id,\n            }, {$push: {expenses: body}}, { new: true });\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    public async setBudget(data: BudgetDto, user: any): Promise {\n        const body = _.pick(data, ['budgetName', 'budget']);\n        try {\n            const budget = new this.expenseModel({\n                budgetName: body.budgetName,\n                budget: body.budget,\n                _userID: user.id,\n            });\n            return await budget.save();\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    public async editBudget(data: BudgetDto, user: any, id: string): Promise {\n        const body = _.pick(data, ['budgetName', 'budget']);\n        if (!ObjectID.isValid(id)) {\n            return this.errorHandler('invalid id');\n        }\n        try {\n            return await this.expenseModel.findOneAndUpdate({\n                _id: id,\n                _userID: user.id,\n            }, {$set: body}, { new: true });\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    public async removeBudget(user, budget: any) {\n        try {\n            return await this.expenseModel.findByIdAndRemove({\n                _id: budget.id,\n                _userID: user.id,\n            });\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    public async editExpense(budgetId: string, data: ExpenseDto, user: any, id: string): Promise {\n        const body = _.pick(data, ['date', 'amount', 'category', 'descr', 'remark', 'icon']);\n        if (!ObjectID.isValid(id)) {\n            return this.errorHandler('invalid id');\n        }\n        try {\n            return this.expenseModel.findOneAndUpdate({\n                '_userID': user.id,\n                '_id': budgetId,\n                'expenses._id': id,\n            }, {\n                $set: {\n                    'expenses.$': body,\n                },\n            });\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    public async delExpense(budgetId: string, id: string, user: any): Promise {\n        if (!ObjectID.isValid(id)) {\n            return this.errorHandler('invalid id');\n        }\n        if (!ObjectID.isValid(budgetId)) {\n            return this.errorHandler('invalid id');\n        }\n        try {\n            await this.expenseModel.findOneAndUpdate({\n                _userID: user.id,\n                _id: budgetId,\n            }, {$pull: {expenses: {_id: id}}});\n            const newList = await this.expenseModel.findOne({\n                _userID: user.id,\n                _id: budgetId,\n            });\n            return newList.expenses;\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    public async addImage(id: string, data: ImageDto, user: any) {\n        if (!ObjectID.isValid(id)) {\n            return this.errorHandler('invalid id');\n        }\n        const body = _.pick(data, ['id', 'name', 'datetime', 'type', 'width', 'height', 'size', 'deletehash', 'link']);\n        try {\n            return await this.expenseModel.findOneAndUpdate({\n                _userID: user.id,\n                _id: id,\n            }, {$push: {images: body}}, { new: true });\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    public async delImage(budgetId: string, id: string, user: any): Promise {\n        if (!ObjectID.isValid(id)) {\n            return this.errorHandler('invalid id');\n        }\n        if (!ObjectID.isValid(budgetId)) {\n            return this.errorHandler('invalid id');\n        }\n        try {\n            return await this.expenseModel.findOneAndUpdate(\n                {\n                    _id: budgetId,\n                    _userID: user.id,\n                }, {$pull: {images: {_id: id}}}, { new: true });\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExpense.html":{"url":"interfaces/IExpense.html","title":"interface - IExpense","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IExpense\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/expense.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _userID\n                                \n                                \n                                        budget\n                                \n                                \n                                        budgetName\n                                \n                                \n                                        expenses\n                                \n                                \n                                        images\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _userID\n                                    \n                                \n                                \n                                    \n                                        _userID:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        budget\n                                    \n                                \n                                \n                                    \n                                        budget:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        budgetName\n                                    \n                                \n                                \n                                    \n                                        budgetName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expenses\n                                    \n                                \n                                \n                                    \n                                        expenses:     [literal type]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [literal type]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        images\n                                    \n                                \n                                \n                                    \n                                        images:     [literal type]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [literal type]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as mongoose from 'mongoose';\n\nexport interface IExpense extends mongoose.Document {\n    _userID: any;\n    budgetName: string;\n    budget: number;\n    expenses: [\n        {\n            // id: string;\n            date: string;\n            amount: number;\n            category: string;\n            descr: string;\n            remark: string;\n            icon: string; \n        }\n    ];\n    images: [\n        {\n            id: string;\n            name: string;\n            datetime: number;\n            type: string;\n            width: number;\n            height: number;\n            size: number;\n            deletehash: string;\n            link: string;\n        }\n    ];\n}\n\nexport const expenseSchema = new mongoose.Schema({\n    _userID: {\n        type: mongoose.Schema.Types.ObjectId,\n        required: true,\n    },\n    budgetName: {\n        type: String,\n        required: true,\n    },\n    budget: {\n        type: Number,\n        required: true,\n    },\n    expenses: [\n        {\n            date: {\n                type: String,\n                required: true,\n            },\n            amount: {\n                type: Number,\n                required: true,\n            },\n            category: {\n                type: String,\n                required: true,\n            },\n            descr: {\n                type: String,\n                required: true,\n            },\n            remark: {\n                type: String,\n                required: true,\n                default: null,\n            },\n            icon: {\n                type: String,\n                required: true,\n            },\n        },\n    ],\n    images: [\n        {\n            id: {\n                type: String,\n                required: true,\n            },\n            name: {\n                type: String,\n                required: true,\n            },\n            datetime: {\n                type: Number,\n                required: true,\n            },\n            type: {\n                type: String,\n                required: true,\n            },\n            width: {\n                type: Number,\n                required: true,\n            },\n            height: {\n                type: Number,\n                required: true,\n            },\n            size: {\n                type: Number,\n                required: true,\n            },\n            deletehash: {\n                type: String,\n                required: true,\n            },\n            link: {\n                type: String,\n                required: true,\n            },\n        },\n    ],\n}, {timestamps: true});\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPlan.html":{"url":"interfaces/IPlan.html","title":"interface - IPlan","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPlan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/plan.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _userID\n                                \n                                \n                                        card\n                                \n                                \n                                        duration\n                                \n                                \n                                        formatted_date\n                                \n                                \n                                        periodicAmount\n                                \n                                \n                                        planName\n                                \n                                \n                                        targetAmount\n                                \n                                \n                                        withdrawalDate\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _userID\n                                    \n                                \n                                \n                                    \n                                        _userID:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        card\n                                    \n                                \n                                \n                                    \n                                        card:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        duration\n                                    \n                                \n                                \n                                    \n                                        duration:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        formatted_date\n                                    \n                                \n                                \n                                    \n                                        formatted_date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        periodicAmount\n                                    \n                                \n                                \n                                    \n                                        periodicAmount:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        planName\n                                    \n                                \n                                \n                                    \n                                        planName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targetAmount\n                                    \n                                \n                                \n                                    \n                                        targetAmount:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withdrawalDate\n                                    \n                                \n                                \n                                    \n                                        withdrawalDate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as mongoose from 'mongoose';\n\nexport interface IPlan extends mongoose.Document {\n    _userID: any;\n    planName: string;\n    periodicAmount: string;\n    targetAmount: string;\n    withdrawalDate: string;\n    duration: string;\n    formatted_date: string;\n    card: {\n        firstname: string;\n        lastname: string;\n        expiry_date: string;\n        card_no: string;\n        pin: string;\n        amount: string;\n        cvv: string;\n    };\n}\n\nexport const plansSchema = new mongoose.Schema({\n    _userID: {\n        type: mongoose.Schema.Types.ObjectId,\n        required: true,\n    },\n    planName: {\n        type: String,\n        required: true,\n        unique: true,\n    },\n    periodicAmount: {\n        type: Number,\n        required: true,\n    },\n    targetAmount: {\n        type: String,\n        required: true,\n    },\n    withdrawalDate: {\n        type: Date,\n        required: true,\n    },\n    formatted_date: {\n        type: String,\n        required: true,\n    },\n    duration: {\n        type: String,\n        required: true,\n    },\n    card: {\n        firstname: {type: String, required: true},\n        lastname: {type: String, required: true},\n        expiry_date: {type: String, required: true},\n        card_no: {type: String, required: true},\n        pin: {type: String, required: true},\n        amount: {type: String, default: '0'},\n        cvv: {type: String, required: true},\n    },\n}, {timestamps: true});\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUser.html":{"url":"interfaces/IUser.html","title":"interface - IUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/model/user.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        createdAt\n                                \n                                \n                                        email\n                                \n                                \n                                            Optional\n                                        firebaseToken\n                                \n                                \n                                        fullname\n                                \n                                \n                                            Optional\n                                        imgDelHash\n                                \n                                \n                                        password\n                                \n                                \n                                        phone_no\n                                \n                                \n                                            Optional\n                                        profileImage\n                                \n                                \n                                            Optional\n                                        reset_password_expires\n                                \n                                \n                                            Optional\n                                        reset_password_token\n                                \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firebaseToken\n                                    \n                                \n                                \n                                    \n                                        firebaseToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fullname\n                                    \n                                \n                                \n                                    \n                                        fullname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imgDelHash\n                                    \n                                \n                                \n                                    \n                                        imgDelHash:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone_no\n                                    \n                                \n                                \n                                    \n                                        phone_no:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImage\n                                    \n                                \n                                \n                                    \n                                        profileImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reset_password_expires\n                                    \n                                \n                                \n                                    \n                                        reset_password_expires:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reset_password_token\n                                    \n                                \n                                \n                                    \n                                        reset_password_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as mongoose from 'mongoose';\nimport * as validator from 'validator';\nimport * as bcrypt from 'bcryptjs';\n\nexport interface IUser extends mongoose.Document {\n    fullname: string;\n    username: string;\n    phone_no: number;\n    password: string;\n    email: string;\n    createdAt?: any;\n    reset_password_token?: string;\n    reset_password_expires?: string;\n    profileImage?: string;\n    imgDelHash?: string;\n    firebaseToken?: string;\n}\n\nexport const UserSchema = new mongoose.Schema({\n    fullname: {\n        type: String,\n        unique: true,\n        required: true,\n    },\n    username: {\n        type: String,\n        unique: true,\n        required: true,\n    },\n    phone_no: {\n        type: String,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n        trim: true,\n        minlenght: 1,\n        unique: true,\n        validate: {\n            validator: validator.isEmail,\n            message: '{value} is not a valid email',\n        },\n    },\n    password: {\n        type: String,\n        required: true,\n        minlength: 6,\n    },\n    profileImage: {\n        type: String,\n        default: undefined,\n    },\n    imgDelHash: {\n        type: String,\n        default: undefined,\n    },\n    reset_password_token: {\n        type: String,\n        default: undefined,\n    },\n    reset_password_expires: {\n        type: String,\n        default: undefined,\n    },\n    firebaseToken: {\n        type: String,\n        default: 'token',\n    },\n}, { timestamps: true });\n\n// NOTE: Arrow functions are not used here as we do not want to use lexical scope for 'this'\nUserSchema.pre('save', function(next) {\n    const user = this;\n    // Make sure not to rehash the password if it is already hashed\n    if (!user.isModified('password')) { return next(); }\n    // Generate a salt and use it to hash the user's password\n    bcrypt.genSalt(10, (err: any, salt: any) => {\n        bcrypt.hash(user.password, salt, (error: any, hash: any) => {\n            user.password = hash;\n            next();\n        });\n    });\n});\n\nUserSchema.methods.checkPassword = function(attempt, callback) {\n    const user = this;\n    bcrypt.compare(attempt, user.password, (err, isMatch) => {\n        if (err) { return callback(err); }\n        callback(null, isMatch);\n    });\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImageDto.html":{"url":"classes/ImageDto.html","title":"class - ImageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                datetime\n                            \n                            \n                                    Readonly\n                                deletehash\n                            \n                            \n                                    Readonly\n                                height\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                link\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                size\n                            \n                            \n                                    Readonly\n                                type\n                            \n                            \n                                    Readonly\n                                width\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            datetime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: Number, description: 'creation date', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:320\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            deletehash\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'delete hash', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:355\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: Number, description: 'height', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:341\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'image id', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:306\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            link\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'url link', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:362\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'image name', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:313\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            size\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: Number, description: 'size', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:348\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'type', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:327\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: Number, description: 'width', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:334\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:24\n                \n            \n\n\n            \n                \n                    The validate() method deserves some discussion. For the jwt-strategy,\n  Passport first verifies the JWT's signature and decodes the JSON.\n  It then invokes our validate() method passing the decoded JSON as\nits single parameter. Based on the way JWT signing works, we're\nguaranteed that we're receiving a valid token that we have previously signed and issued to a valid user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the verified info {id: payload._id, email: payload.email}\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { configKeys } from './../config/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configKeys.JWT_SECRET,\n    });\n  }\n\n  /**\n   * The validate() method deserves some discussion. For the jwt-strategy,\n   *  Passport first verifies the JWT's signature and decodes the JSON.\n   *  It then invokes our validate() method passing the decoded JSON as\n   * its single parameter. Based on the way JWT signing works, we're\n   * guaranteed that we're receiving a valid token that we have previously signed and issued to a valid user.\n   * @param payload the verified info {id: payload._id, email: payload.email}\n   */\n  async validate(payload: any) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(usernameField: string, passwordField: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usernameField\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    passwordField\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(private readonly authService: AuthService) {\n        super({\n            usernameField: 'username',\n            passwordField: 'password',\n        });\n    }\n\n    async validate(usernameField: string, passwordField: string): Promise {\n        const data = {\n            username: usernameField,\n            password: passwordField,\n        };\n        const user = await this.authService.validateUser(data);\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user password', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:78\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            user_name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'username', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:71\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ModelService.html":{"url":"injectables/ModelService.html","title":"injectable - ModelService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ModelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/model.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                errorHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, planModel: Model, expenseModel: Model, notification: CloudNotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/controller/model.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        planModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        expenseModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notification\n                                                  \n                                                        \n                                                                        CloudNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            errorHandler\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorHandler(err: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/model.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { msg: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { IPlan } from './../model/plan.model';\nimport { IUser } from './../model/user.model';\nimport { IExpense } from './../model/expense.model';\nimport { CloudNotificationService } from './cloud-notification.service';\n\n@Injectable()\nexport abstract class ModelService {\n    constructor(\n        @InjectModel('User') protected readonly userModel: Model,\n        @InjectModel('Plans') protected readonly planModel: Model,\n        @InjectModel('Expense') protected readonly expenseModel: Model,\n        protected notification: CloudNotificationService,\n    ) {}\n\n    protected errorHandler(err: any) {\n        return { msg: err };\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PassResPageDto.html":{"url":"classes/PassResPageDto.html","title":"class - PassResPageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PassResPageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user id', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:110\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user password', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:124\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'token', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:117\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PlanController.html":{"url":"controllers/PlanController.html","title":"controller - PlanController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PlanController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/plans/plans.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                plan\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                allPlans\n                            \n                            \n                                    Async\n                                createPlan\n                            \n                            \n                                    Async\n                                deletePlan\n                            \n                            \n                                    Async\n                                getCard\n                            \n                            \n                                    Async\n                                updatePlan\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            allPlans\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    allPlans(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get()@ApiOkResponse({description: 'The resource has been succesfully returned'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/plans/plans.controller.ts:59\n                \n            \n\n\n            \n                \n                    retrieves all plans\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createPlan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPlan(body: PlanDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post()@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/plans/plans.controller.ts:24\n                \n            \n\n\n            \n                \n                    creates a new plan\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan info\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deletePlan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePlan(id: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete(':id')@ApiCreatedResponse({description: 'The resource has successfully been deleted'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/plans/plans.controller.ts:97\n                \n            \n\n\n            \n                \n                    delete plan\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan id\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCard\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCard(req, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('card/:id')@ApiOkResponse({description: 'The resource has been succesfully returned'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/plans/plans.controller.ts:42\n                \n            \n\n\n            \n                \n                    retrieves card details\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updatePlan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePlan(id: string, body: PlanDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put(':id')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/plans/plans.controller.ts:78\n                \n            \n\n\n            \n                \n                    update plan\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan id\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan info to be updated\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, Post, UseGuards, Body, Response, NotImplementedException, Put, Param, Delete } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { PlanService } from '../plans/plans.service';\nimport { PlanDto } from './../../dto/interface.dto';\nimport { ApiUseTags, ApiOkResponse, ApiForbiddenResponse, ApiNotFoundResponse, ApiCreatedResponse } from '@nestjs/swagger';\n\n@ApiUseTags('plan')\n@Controller('plan')\nexport class PlanController {\n    constructor(\n        private readonly planService: PlanService,\n    ) { }\n\n    /**\n     * creates a new plan\n     * @param body plan info\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post()\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async createPlan(@Body() body: PlanDto, @Request() req) {\n        try {\n            return await this.planService.create(body, req.user);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * retrieves card details\n     * @param req request info\n     * @param id plan id\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Get('card/:id')\n    @ApiOkResponse({description: 'The resource has been succesfully returned'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async getCard(@Request() req, @Param('id') id: string) {\n        try {\n            return await this.planService.getCard(id, req.user);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * retrieves all plans\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Get()\n    @ApiOkResponse({description: 'The resource has been succesfully returned'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async allPlans(@Request() req) {\n        try {\n            return await this.planService.allPlans(req.user);\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * update plan\n     * @param id plan id\n     * @param body plan info to be updated\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Put(':id')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async updatePlan(@Param('id') id: string, @Body() body: PlanDto, @Request() req) {\n        try {\n            await this.planService.update(req.user, body, id);\n            return {msg: 'update successful'};\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n\n    /**\n     * delete plan\n     * @param id plan id\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Delete(':id')\n    @ApiCreatedResponse({description: 'The resource has successfully been deleted'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async deletePlan(@Param('id') id: string, @Request() req) {\n        try {\n            await this.planService.delete(req.user, id);\n            return {msg: 'plan deleted'};\n        } catch (error) {\n            throw new NotImplementedException(error);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlanDto.html":{"url":"classes/PlanDto.html","title":"class - PlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                card\n                            \n                            \n                                    Readonly\n                                duration\n                            \n                            \n                                    Readonly\n                                periodicAmount\n                            \n                            \n                                    Readonly\n                                planName\n                            \n                            \n                                    Readonly\n                                targetAmount\n                            \n                            \n                                    Readonly\n                                withdrawalDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            card\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'card details', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:223\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            duration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'withdrawal interval daily | weekly | monthly', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:216\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            periodicAmount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'periodic amount', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:195\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            planName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'plan name', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:188\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            targetAmount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'target amount', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:202\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            withdrawalDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'expected withdrawal date', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:209\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PlanModule.html":{"url":"modules/PlanModule.html","title":"module - PlanModule","body":"\n                   \n\n\n\n\n    Modules\n    PlanModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PlanModule\n\n\n\ncluster_PlanModule_exports\n\n\n\ncluster_PlanModule_providers\n\n\n\n\nCloudNotificationService \n\nCloudNotificationService \n\n\n\nPlanService \n\nPlanService \n\n\n\nUserService \n\nUserService \n\n\n\nPlanModule\n\nPlanModule\n\nCloudNotificationService  -->\n\nPlanModule->CloudNotificationService \n\n\n\nPlanService  -->\n\nPlanModule->PlanService \n\n\n\nUserService  -->\n\nPlanModule->UserService \n\n\n\n\n\nCloudNotificationService\n\nCloudNotificationService\n\nPlanModule -->\n\nCloudNotificationService->PlanModule\n\n\n\n\n\nPlanService\n\nPlanService\n\nPlanModule -->\n\nPlanService->PlanModule\n\n\n\n\n\nUserService\n\nUserService\n\nPlanModule -->\n\nUserService->PlanModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/controller/plans/plans.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudNotificationService\n                        \n                        \n                            PlanService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PlanController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CloudNotificationService\n                        \n                        \n                            PlanService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthModule } from 'src/auth/auth.module';\nimport { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserSchema } from './../../model/user.model';\nimport { UserService } from './../user/user.service';\nimport { PlanService } from './plans.service';\nimport { plansSchema } from './../../model/plan.model';\nimport { PlanController } from './plans.controller';\nimport { expenseSchema } from 'src/model/expense.model';\nimport { CloudNotificationService } from './../cloud-notification.service';\n\n@Module({\n    imports: [\n        forwardRef(() => AuthModule),\n        MongooseModule.forFeature([\n            {name: 'User', schema: UserSchema},\n            {name: 'Plans', schema: plansSchema},\n            {name: 'Expense', schema: expenseSchema},\n        ]),\n        PassportModule.register({defaultStrategy: 'jwt', session: false}),\n    ],\n    exports: [UserService, PlanService, CloudNotificationService],\n    controllers: [PlanController],\n    providers: [UserService, PlanService, CloudNotificationService],\n})\n\nexport class PlanModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlanService.html":{"url":"injectables/PlanService.html","title":"injectable - PlanService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PlanService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/plans/plans.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ModelService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                allPlans\n                            \n                            \n                                    Private\n                                    Async\n                                calculatePlan\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Private\n                                decryptCard\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Private\n                                encryptCard\n                            \n                            \n                                    Async\n                                getCard\n                            \n                            \n                                    Private\n                                hideDetails\n                            \n                            \n                                    Private\n                                    Async\n                                saveUpdate\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Protected\n                                errorHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            allPlans\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    allPlans(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:133\n                \n            \n\n\n            \n                \n                    searches and returns all plans created by the user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        list of all plans created by the user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            calculatePlan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    calculatePlan(body, user)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:42\n                \n            \n\n\n            \n                \n                    takes data from plan info supplied by user,\ncalculates withdrawal date\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan info\n\n                                    \n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: PlanDto, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:20\n                \n            \n\n\n            \n                \n                    saves a new plan to database\ncard info is encrypted before it is saved to database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan info\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        new plan details\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            decryptCard\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    decryptCard(doc: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:87\n                \n            \n\n\n            \n                \n                    decrupt card details\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    doc\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan info with encrypted card details\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        plan info with decrypted card details\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(user: any, id: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:203\n                \n            \n\n\n            \n                \n                    delete user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        deletion message\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            encryptCard\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    encryptCard(doc: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    doc\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan info with un-encrypted card details\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        plan info with encrypted card details\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCard\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCard(id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:118\n                \n            \n\n\n            \n                \n                    retrieves encrypted card details frrom the database,\ndecrypts it then sends to user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan id\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            hideDetails\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hideDetails(doc: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:99\n                \n            \n\n\n            \n                \n                    hide card details\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    doc\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan info with un-hidden card\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        hidden card details\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            saveUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveUpdate(plan, user, id)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:183\n                \n            \n\n\n            \n                \n                    save the updated plan info to database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    plan\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the updated info\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(user: any, data: any, id: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/plans/plans.service.ts:152\n                \n            \n\n\n            \n                \n                    recalculate plan info before updating the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan info to be updated\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        plan id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            errorHandler\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorHandler(err: any)\n                \n            \n\n\n            \n                \n                    Inherited from         ModelService\n\n                \n            \n            \n                \n                        Defined in         ModelService:18\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { msg: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ModelService } from '../model.service';\nimport { ObjectID } from 'mongodb';\nimport * as moment from 'moment';\nimport * as _ from 'lodash';\nimport * as encrypt from '../../utils/encryption';\nimport { PlanDto } from './../../dto/interface.dto';\n\n@Injectable()\nexport class PlanService extends ModelService {\n\n    /**\n     * saves a new plan to database\n     * card info is encrypted before it is saved to database\n     * @param data plan info\n     * @param user decoded user info from validated token\n     * contains user id\n     * @returns new plan details\n     */\n    public async create(data: PlanDto, user: any): Promise {\n        const body = _.pick(data, [\n            'planName', 'periodicAmount', 'targetAmount', 'duration',\n            'card',\n        ]);\n        try {\n            const planDetails = await this.calculatePlan(body, user);\n            const plan = new this.planModel(this.encryptCard(planDetails));\n            const doc = await plan.save();\n            return this.hideDetails(this.decryptCard(doc));\n        } catch (err) {\n            return this.errorHandler(err);\n        }\n    }\n\n    /**\n     * takes data from plan info supplied by user,\n     * calculates withdrawal date\n     * @param body plan info\n     * @param user decoded user info from validated token\n     * contains user id\n     */\n    private async calculatePlan(body, user): Promise {\n        const periodAmount = parseFloat(body.periodicAmount);\n        const trgAmount = parseFloat(body.targetAmount);\n        if (isNaN(periodAmount) || isNaN(trgAmount)) {\n            return this.errorHandler('wrong input parameters');\n        }\n        if (periodAmount > trgAmount) {\n            return this.errorHandler('amount for each period cannot be greater than the target amount');\n        }\n        const n = Math.ceil(trgAmount / periodAmount);\n        let time: any;\n        if (body.duration === 'daily') {\n            time = moment().add(n, 'days');\n        } else if (body.duration === 'weekly') {\n            time = moment().add(n, 'weeks');\n        } else if (body.duration === 'monthly') {\n            time = moment().add(n, 'months');\n        } else {\n            return this.errorHandler(`${body.duration} is not a valid string`);\n        }\n        const moreDetails = {\n            withdrawalDate: time,\n            formatted_date: moment(time).format('LLLL'),\n            _userID: user.id,\n        };\n        return { ...body, ...moreDetails };\n    }\n\n    /**\n     * \n     * @param doc plan info with un-encrypted card details\n     * @returns plan info with encrypted card details\n     */\n    private encryptCard(doc: any) {\n        doc.card.card_no = encrypt.encryptCardNum(doc.card.card_no);\n        doc.card.cvv = encrypt.encryptCVV(doc.card.cvv);\n        doc.card.pin = encrypt.encryptPin(doc.card.pin);\n        return doc;\n    }\n\n    /**\n     * decrupt card details\n     * @param doc plan info with encrypted card details\n     * @returns plan info with decrypted card details\n     */\n    private decryptCard(doc: any) {\n        doc.card.card_no = encrypt.decryptCardNum(doc.card.card_no);\n        doc.card.cvv = encrypt.decryptCVV(doc.card.cvv);\n        doc.card.pin = encrypt.decryptPin(doc.card.pin);\n        return doc;\n    }\n\n    /**\n     * hide card details\n     * @param doc plan info with un-hidden card\n     * @returns hidden card details\n     */\n    private hideDetails(doc: any) {\n        doc.card.cvv = '***';\n        doc.card.pin = '****';\n        doc.card.lastname = '*****';\n        doc.card.expiry_date = '*****';\n        const num: string = doc.card.card_no;\n        const cardNum: number = num.length;\n        const b = num.slice((cardNum - 4), cardNum);\n        doc.card.card_no = '**********' + b;\n        return doc;\n    }\n\n    /**\n     * retrieves encrypted card details frrom the database,\n     * decrypts it then sends to user\n     * @param id plan id\n     * @param user decoded user info from validated token\n     * contains user id\n     */\n    async getCard(id: string, user: any): Promise {\n        try {\n            const doc = await this.planModel.findOne({ _id: id, _userID: user.id });\n            return this.decryptCard(doc);\n        } catch (error) {\n            return this.errorHandler(error);\n        }\n    }\n\n    /**\n     * searches and returns all plans created by the user\n     * @param user decoded user info from validated token\n     * contains user id\n     * @returns list of all plans created by the user\n     */\n    async allPlans(user: any): Promise {\n        try {\n            const doc = await this.planModel.find({ _userID: user.id });\n            doc.forEach(element => {\n                element = this.hideDetails(this.decryptCard(element));\n            });\n            return doc;\n        } catch (error) {\n            return this.errorHandler(error);\n        }\n    }\n\n    /**\n     * recalculate plan info before updating the database\n     * @param user decoded user info from validated token\n     * contains user id\n     * @param data plan info to be updated\n     * @param id plan id\n     */\n    async update(user: any, data: any, id: any): Promise {\n        data.card.amount = 0;\n        const body = {\n            planName: data.planName,\n            targetAmount: data.targetAmount,\n            periodicAmount: data.periodicAmount,\n            duration: data.duration,\n            card: data.card,\n        };\n        if (!ObjectID.isValid(id)) {\n            return this.errorHandler('invalid id');\n        }\n        try {\n            await this.planModel.findById(id);\n            const res = await this.calculatePlan(body, user);\n            const plan = this.encryptCard(res);\n            const newPlan = await this.saveUpdate(plan, user, id);\n            return newPlan;\n        } catch (error) {\n            return this.errorHandler(error);\n        }\n    }\n\n    /**\n     * save the updated plan info to database\n     * @param plan \n     * @param user decoded user info from validated token\n     * contains user id\n     * @param id plan id\n     * @returns the updated info\n     */\n    private async saveUpdate(plan, user, id): Promise {\n        try {\n            let doc = await this.planModel.findOneAndUpdate({\n                _id: id,\n                _userID: user.id,\n            }, { $set: plan }, { new: true });\n            doc = this.hideDetails(this.decryptCard(doc));\n            return doc;\n        } catch (error) {\n            return this.errorHandler(error);\n        }\n    }\n\n    /**\n     * delete user\n     * @param user decoded user info from validated token\n     * contains user id\n     * @param id user id\n     * @returns deletion message\n     */\n    async delete(user: any, id: any): Promise {\n        if (!ObjectID.isValid(id)) {\n            return this.errorHandler('invalid id');\n        }\n        try {\n            await this.planModel.findOneAndDelete({\n                _id: id,\n                _userID: user.id,\n            });\n            return { message: 'plan deletion successfull' };\n        } catch (error) {\n            return this.errorHandler('plan deletion successfull');\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileUpdateDto.html":{"url":"classes/ProfileUpdateDto.html","title":"class - ProfileUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                input\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            input\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:392\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:389\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ScheduleModule.html":{"url":"modules/ScheduleModule.html","title":"module - ScheduleModule","body":"\n                   \n\n\n\n\n    Modules\n    ScheduleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ScheduleModule\n\n\n\ncluster_ScheduleModule_exports\n\n\n\ncluster_ScheduleModule_providers\n\n\n\n\nScheduleService \n\nScheduleService \n\n\n\nScheduleModule\n\nScheduleModule\n\nScheduleService  -->\n\nScheduleModule->ScheduleService \n\n\n\n\n\nScheduleService\n\nScheduleService\n\nScheduleModule -->\n\nScheduleService->ScheduleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/scheduler/schedule.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ScheduleService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ScheduleService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AgendaModule } from 'nestjs-agenda';\nimport { configKeys } from '../config/config';\nimport { plansSchema } from './../model/plan.model';\nimport { ScheduleService } from './schedule.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: 'Plans', schema: plansSchema },\n    ]),\n    AgendaModule.register({\n      db: {\n        address: configKeys.MONGODB_URI,\n        collection: 'jobs',\n        options: {\n          useNewUrlParser: true,\n          useFindAndModify: false,\n        },\n      },\n      processEvery: '30 seconds',\n    }),\n  ],\n  exports: [ScheduleService],\n  providers: [ScheduleService],\n})\n\nexport class ScheduleModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScheduleService.html":{"url":"injectables/ScheduleService.html","title":"injectable - ScheduleService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ScheduleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/scheduler/schedule.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createJob\n                            \n                            \n                                    Private\n                                    Async\n                                ravePayConnect\n                            \n                            \n                                    Private\n                                    Async\n                                searchPlans\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(planModel: Model, agenda: AgendaService)\n                    \n                \n                        \n                            \n                                Defined in src/scheduler/schedule.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        planModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        agenda\n                                                  \n                                                        \n                                                                    AgendaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            createJob\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createJob()\n                \n            \n\n\n            \n                \n                    Defined in src/scheduler/schedule.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            ravePayConnect\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ravePayConnect()\n                \n            \n\n\n            \n                \n                    Defined in src/scheduler/schedule.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            searchPlans\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    searchPlans(duration: string)\n                \n            \n\n\n            \n                \n                    Defined in src/scheduler/schedule.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    duration\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { ObjectID } from 'mongodb';\nimport * as moment from 'moment';\n// import * as _ from 'lodash';\nimport { AgendaService } from 'nestjs-agenda';\nimport { IPlan } from './../model/plan.model';\n// import { cardCharge } from '../utils/ravePay';\n\n@Injectable()\nexport class ScheduleService {\n\n    constructor(\n        @InjectModel('Plans') protected readonly planModel: Model,\n        private readonly agenda: AgendaService) {\n        // this.createJob();\n    }\n\n    private async createJob(): Promise {\n        // define a job, more details\n        this.agenda.define('DAILY_PLAN', async job => {\n            // tslint:disable-next-line: no-console\n            console.log(`job fired at ${moment().format('LLLL')}`);\n            // flutterwave connect\n        });\n        this.agenda.define('WEEKLY_PLAN', async job => {\n            // flutterwave connect\n        });\n        this.agenda.define('MONTHLY_PLAN', async job => {\n            // flutterwave connect\n        });\n        // schedule a job “At 16:00 on every day-of-week.”\n        // '0 16 * * */1'\n        this.agenda.every('*/1 * * * *', 'DAILY_PLAN', {});\n        // schedule a job “At 16:00 on every 5th day-of-week.”\n        this.agenda.every('0 16 * * */5', 'WEEKLY_PLAN', {});\n        // schedule a job “At 16:00 on day-of-month 28 in every month.”\n        this.agenda.every('0 16 28 */1 *', 'MONTHLY_PLAN', {});\n    }\n\n    private async searchPlans(duration: string) {\n        const docs = await this.planModel.find();\n        return docs.filter(res => res.duration === duration);\n    }\n\n    private async ravePayConnect() {\n        try {\n            const plan = await this.searchPlans('daily');\n            // tslint:disable-next-line: no-console\n            console.log(`all plans ${plan}`);\n        } catch (error) {\n            // tslint:disable-next-line: no-console\n            console.log(error);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenDto.html":{"url":"classes/TokenDto.html","title":"class - TokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/interface.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({type: String, description: 'user request token', required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/interface.dto.ts:89\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger';\n\n/**\n * DTO stands for Data Transfer Object\n */\nexport class CreateDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user first name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly first_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user middle name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly middle_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user last name',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly last_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'unique username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user mobile number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly phone_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user email address',\n        required: true,\n    })\n    readonly email: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LoginDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'username',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly user_name: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TokenDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user request token',\n        required: true,\n    })\n    readonly token: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class EmailResetDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user mail address',\n        required: true,\n    })\n    readonly email: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PassResPageDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'user id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'token',\n        required: true,\n    })\n    readonly token: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'user password',\n        required: true,\n    })\n    readonly password: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class CardDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'first name attached to card',\n        required: true,\n    })\n    readonly firstname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'last name attached to card',\n        required: true,\n    })\n    readonly lastname: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card expiry date',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly expiry_date: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: '15 digit card number',\n        required: true,\n    })\n    // tslint:disable-next-line: variable-name\n    readonly card_no: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card 4 digit pin',\n        required: true,\n    })\n    readonly pin: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'amount',\n        required: true,\n    })\n    readonly amount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'cvv',\n        required: true,\n    })\n    readonly cvv: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class PlanDto {\n    @ApiModelProperty({\n        type: String,\n        description: 'plan name',\n        required: true,\n    })\n    readonly planName: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'periodic amount',\n        required: true,\n    })\n    readonly periodicAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'target amount',\n        required: true,\n    })\n    readonly targetAmount: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expected withdrawal date',\n        required: true,\n    })\n    readonly withdrawalDate: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'withdrawal interval daily | weekly | monthly',\n        required: true,\n    })\n    readonly duration: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'card details',\n        required: true,\n    })\n    readonly card: {\n        readonly firstname: string;\n\n        readonly lastname: string;\n\n        readonly expiry_date: string;\n\n        readonly card_no: string;\n\n        readonly pin: string;\n\n        readonly amount: string;\n\n        readonly cvv: string;\n    };\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ExpenseDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'date of expense',\n        required: true,\n    })\n    readonly date: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'amount spent',\n        required: true,\n    })\n    readonly amount: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense category',\n        required: true,\n    })\n    readonly category: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'expense description',\n        required: true,\n    })\n    readonly descr: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'remarks',\n        required: true,\n    })\n    readonly remark: string;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class BudgetDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget name',\n        required: true,\n    })\n    readonly budgetName: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'budget amount',\n        required: true,\n    })\n    readonly budget: number;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ImageDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image id',\n        required: true,\n    })\n    readonly id: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image name',\n        required: true,\n    })\n    readonly name: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'creation date',\n        required: true,\n    })\n    readonly datetime: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'type',\n        required: true,\n    })\n    readonly type: string;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'width',\n        required: true,\n    })\n    readonly width: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'height',\n        required: true,\n    })\n    readonly height: number;\n\n    @ApiModelProperty({\n        type: Number,\n        description: 'size',\n        required: true,\n    })\n    readonly size: number;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'delete hash',\n        required: true,\n    })\n    readonly deletehash: string;\n\n    @ApiModelProperty({\n        type: String,\n        description: 'url link',\n        required: true,\n    })\n    readonly link: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DeleteDto {\n\n    @ApiModelProperty({\n        type: String,\n        description: 'image list to be deleted',\n        required: true,\n    })\n    readonly images: ImageDto[];\n\n    @ApiModelProperty({\n        type: String,\n        description: 'budget id',\n        required: true,\n    })\n    readonly budgetId: string;\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ProfileUpdateDto {\n\n    @ApiModelProperty()\n    readonly type: string;\n\n    @ApiModelProperty()\n    readonly input: any;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                sendToken\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                updateInfo\n                            \n                            \n                                    Async\n                                updateProfileImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('profile')@ApiOkResponse({description: 'The resource has been succesfully returned'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/user/user.controller.ts:74\n                \n            \n\n\n            \n                \n                    sends user info stored in database to the user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req, res, body: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('login')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/user/user.controller.ts:47\n                \n            \n\n\n            \n                \n                    log in user by checking users credentials, creating a token\nwhich will be attached to all protected requests made to the api\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        response info\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        login details\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendToken(req, body: TokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('token')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/user/user.controller.ts:93\n                \n            \n\n\n            \n                \n                    send token to user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                TokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(data: CreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/user/user.controller.ts:24\n                \n            \n\n\n            \n                \n                    creates a new user and saves the user info\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user signup info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateInfo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInfo(req, body: ProfileUpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('update')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/user/user.controller.ts:112\n                \n            \n\n\n            \n                \n                    update user info\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                ProfileUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user details\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateProfileImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfileImage(req, body: ImageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('image')@ApiCreatedResponse({description: 'The resource has successfully been created'})@ApiForbiddenResponse({description: 'forbidden'})@ApiNotFoundResponse({description: 'not found'})\n                \n            \n\n            \n                \n                    Defined in src/controller/user/user.controller.ts:130\n                \n            \n\n\n            \n                \n                    update user profile image\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request info\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                ImageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        image info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, Post, UseGuards, Body, Response, NotFoundException, HttpException, HttpStatus } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserService } from './user.service';\nimport { AuthService } from './../../auth/auth.service';\nimport { CreateDto, LoginDto, TokenDto, ImageDto, ProfileUpdateDto } from './../../dto/interface.dto';\nimport { ApiUseTags, ApiOkResponse, ApiForbiddenResponse, ApiNotFoundResponse, ApiCreatedResponse } from '@nestjs/swagger';\n\n@ApiUseTags('user')\n@Controller('user')\nexport class UserController {\n    constructor(\n        private readonly userService: UserService,\n        private readonly authService: AuthService,\n    ) { }\n\n    /**\n     * creates a new user and saves the user info\n     * @param data user signup info\n     */\n    @Post('signup')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async signup(@Body() data: CreateDto) {\n        try {\n            return await this.userService.createUser(data);\n        } catch (error) {\n            throw new HttpException({\n                status: HttpStatus.BAD_REQUEST,\n                error,\n              }, HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    /**\n     * log in user by checking users credentials, creating a token\n     * which will be attached to all protected requests made to the api\n     * @param req request info\n     * @param res response info\n     * @param body login details\n     */\n    @UseGuards(AuthGuard('local'))\n    @Post('login')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async login(@Request() req, @Response() res, @Body() body: LoginDto) {\n        const token = this.authService.login(req.user);\n        delete req.user.password;\n        res.setHeader('Authorization', `Bearer ${token}`);\n        const userDetails = {\n            id: req.user._id,\n            username: req.user.username,\n            fullname: req.user.fullname,\n            email: req.user.email,\n            phone_no: req.user.phone_no,\n            profileImage: req.user.profileImage,\n            imageDeleteHash: req.user.imageDeleteHash,\n            firebaseToken: req.user.firebaseToken,\n        };\n        res.send(userDetails);\n        return res;\n    }\n\n    /**\n     * sends user info stored in database to the user\n     * @param req request info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Get('profile')\n    @ApiOkResponse({description: 'The resource has been succesfully returned'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async getProfile(@Request() req) {\n        try {\n            const info = await this.userService.getInfo(req.user);\n            return info;\n        } catch (error) {\n            throw new NotFoundException(error);\n        }\n    }\n\n    /**\n     * send token to user\n     * @param req request info\n     * @param body token\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post('token')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async sendToken(@Request() req, @Body() body: TokenDto) {\n        try {\n            await this.userService.saveToken(req.user, body);\n            return {status: 200, message: 'Success'};\n        } catch (error) {\n            throw new NotFoundException(error);\n        }\n    }\n\n    /**\n     * update user info\n     * @param req request info\n     * @param body user details\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post('update')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async updateInfo(@Request() req, @Body() body: ProfileUpdateDto) {\n        try {\n            return await this.userService.updateProfile(req.user, body);\n        } catch (error) {\n            throw new NotFoundException(error);\n        }\n    }\n\n    /**\n     * update user profile image\n     * @param req request info\n     * @param body image info\n     */\n    @UseGuards(AuthGuard('jwt'))\n    @Post('image')\n    @ApiCreatedResponse({description: 'The resource has successfully been created'})\n    @ApiForbiddenResponse({description: 'forbidden'})\n    @ApiNotFoundResponse({description: 'not found'})\n    async updateProfileImage(@Request() req, @Body() body: ImageDto) {\n        try {\n            return await this.userService.changeProfileImage(req.user, body);\n        } catch (error) {\n            throw new NotFoundException(error);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nCloudNotificationService \n\nCloudNotificationService \n\n\n\nPlanService \n\nPlanService \n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nCloudNotificationService  -->\n\nUserModule->CloudNotificationService \n\n\n\nPlanService  -->\n\nUserModule->PlanService \n\n\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCloudNotificationService\n\nCloudNotificationService\n\nUserModule -->\n\nCloudNotificationService->UserModule\n\n\n\n\n\nPlanService\n\nPlanService\n\nUserModule -->\n\nPlanService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/controller/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudNotificationService\n                        \n                        \n                            PlanService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CloudNotificationService\n                        \n                        \n                            PlanService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserSchema } from './../../model/user.model';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { PlanService } from './../plans/plans.service';\nimport { plansSchema } from './../../model/plan.model';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { expenseSchema } from 'src/model/expense.model';\nimport { CloudNotificationService } from './../cloud-notification.service';\n\n@Module({\n    imports: [\n        forwardRef(() => AuthModule),\n        MongooseModule.forFeature([\n            {name: 'User', schema: UserSchema},\n            {name: 'Plans', schema: plansSchema},\n            {name: 'Expense', schema: expenseSchema},\n        ]),\n        PassportModule.register({defaultStrategy: 'jwt', session: false}),\n    ],\n    exports: [UserService, PlanService, CloudNotificationService],\n    controllers: [UserController],\n    providers: [UserService, PlanService, CloudNotificationService],\n})\n\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/user/user.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ModelService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                changeProfileImage\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                getInfo\n                            \n                            \n                                    Public\n                                    Async\n                                saveToken\n                            \n                            \n                                    Public\n                                    Async\n                                updateProfile\n                            \n                            \n                                    Protected\n                                errorHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            changeProfileImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changeProfileImage(user: any, body: ImageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/user/user.service.ts:47\n                \n            \n\n\n            \n                \n                    save image info to database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                ImageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        image info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        updated image info\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/user/user.service.ts:13\n                \n            \n\n\n            \n                \n                    creates a new mongodb document for the user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        saved data containing user info\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInfo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfo(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/user/user.service.ts:30\n                \n            \n\n\n            \n                \n                    retrieves user details from database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ndecoded user info from validated token\ncontains user id\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        doc - user information\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            saveToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveToken(user: any, body: TokenDto)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/user/user.service.ts:79\n                \n            \n\n\n            \n                \n                    save firebase token which will be used for push notifications\nto database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                TokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        notification token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        user info\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfile(user: any, body: ProfileUpdateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/controller/user/user.service.ts:63\n                \n            \n\n\n            \n                \n                    save user info to be updated to database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        decoded user info from validated token\ncontains user id\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                ProfileUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new user info\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        updated user info\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            errorHandler\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorHandler(err: any)\n                \n            \n\n\n            \n                \n                    Inherited from         ModelService\n\n                \n            \n            \n                \n                        Defined in         ModelService:18\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { msg: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { TokenDto, ImageDto, ProfileUpdateDto } from './../../dto/interface.dto';\nimport { Injectable } from '@nestjs/common';\nimport { ModelService } from '../model.service';\n\n@Injectable()\nexport class UserService extends ModelService {\n\n    /**\n     * creates a new mongodb document for the user\n     * @param data\n     * @returns saved data containing user info\n     */\n    public async createUser(data: any) {\n        const user = new this.userModel({\n            fullname: data.name,\n            username: data.username,\n            phone_no: data.country_phone.phone,\n            email: data.email,\n            password: data.matching_passwords.password,\n        });\n        return await user.save();\n    }\n\n    /**\n     * retrieves user details from database\n     * @param user - decoded user info from validated token\n     * contains user id\n     * @returns doc - user information\n     */\n    public getInfo(user: any) {\n        return new Promise((resolve, reject) => {\n            this.userModel.findById(user._id).then((doc) => {\n                resolve(doc);\n            }).catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n    /**\n     * save image info to database\n     * @param user decoded user info from validated token\n     * contains user id\n     * @param body image info\n     * @returns updated image info\n     */\n    public async changeProfileImage(user: any, body: ImageDto) {\n        return await this.userModel.findOneAndUpdate({\n            _id: user.id,\n        }, {$set: {\n            profileImage: body.link,\n            imgDelHash: body.deletehash,\n        }}, {new: true});\n    }\n\n    /**\n     * save user info to be updated to database\n     * @param user decoded user info from validated token\n     * contains user id\n     * @param body new user info\n     * @returns updated user info\n     */\n    public async updateProfile(user: any, body: ProfileUpdateDto) {\n        return await this.userModel.findOneAndUpdate({\n            _id: user.id,\n        }, {$set: {\n            [body.type]: body.input,\n        }}, {new: true});\n    }\n\n    /**\n     * save firebase token which will be used for push notifications\n     * to database\n     * @param user decoded user info from validated token\n     * contains user id\n     * @param body notification token\n     * @returns user info\n     */\n    public async saveToken(user: any, body: TokenDto) {\n        return await this.userModel.findOneAndUpdate({\n            _id: user.id,\n        }, {$set: {firebaseToken: body.token}}, { new: true });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidateService.html":{"url":"injectables/ValidateService.html","title":"injectable - ValidateService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ValidateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/validate.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                admin_reg_validation\n                            \n                            \n                                    Public\n                                loginValidation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            admin_reg_validation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    admin_reg_validation(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/validation/validate.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loginValidation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loginValidation(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/validation/validate.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as Joi from '@hapi/joi';\n\n@Injectable()\nexport class ValidateService {\n\n    // Register validation\n    public admin_reg_validation(data: any) {\n        const schema = Joi.object({\n            full_name: Joi.string().min(6).required(),\n            user_name: Joi.string().min(4).required(),\n            phone_no: Joi.number().min(11).max(14).required(),\n            email: Joi.string().min(5).required().email(),\n            password: Joi.string().min(8).required(),\n        });\n        return schema.validate(data);\n    }\n\n    // login validation\n    public loginValidation(data: any) {\n        const schema = Joi.object({\n            username: Joi.string().min(4).required(),\n            password: Joi.string().min(6).required(),\n        });\n        return schema.validate(data);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config/config.ts\n            \n            variable\n            configKeys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controller/cloud-notification.service.ts\n            \n            injectable\n            CloudNotificationService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/controller/cloud-notification.service.ts\n            \n            variable\n            firebaseApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controller/cloud-notification.service.ts\n            \n            variable\n            serviceAccount\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controller/email/email.controller.ts\n            \n            controller\n            EmailController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/controller/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/controller/expense/expense.controller.ts\n            \n            controller\n            ExpenseController\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/controller/expense/expense.service.ts\n            \n            injectable\n            ExpenseService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/controller/model.service.ts\n            \n            injectable\n            ModelService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/controller/plans/plans.controller.ts\n            \n            controller\n            PlanController\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/controller/plans/plans.service.ts\n            \n            injectable\n            PlanService\n            \n                75 %\n                (9/12)\n            \n        \n        \n            \n                \n                src/controller/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/controller/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            BudgetDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            CardDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            CreateDto\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            DeleteDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            EmailResetDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            ExpenseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            ImageDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            PassResPageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            PlanDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            ProfileUpdateDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dto/interface.dto.ts\n            \n            class\n            TokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/model/expense.model.ts\n            \n            interface\n            IExpense\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/model/expense.model.ts\n            \n            variable\n            expenseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/model/plan.model.ts\n            \n            interface\n            IPlan\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/model/plan.model.ts\n            \n            variable\n            plansSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/model/user.model.ts\n            \n            interface\n            IUser\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/model/user.model.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/scheduler/schedule.service.ts\n            \n            injectable\n            ScheduleService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/encryption.ts\n            \n            function\n            decryptCardNum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/encryption.ts\n            \n            function\n            decryptCVV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/encryption.ts\n            \n            function\n            decryptPin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/encryption.ts\n            \n            function\n            encryptCardNum\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/encryption.ts\n            \n            function\n            encryptCVV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/encryption.ts\n            \n            function\n            encryptPin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/encryption.ts\n            \n            variable\n            secret\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/ravePay.ts\n            \n            function\n            cardCharge\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/ravePay.ts\n            \n            variable\n            PRODUCTION_FLAG\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/ravePay.ts\n            \n            variable\n            rave\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/ravePay.ts\n            \n            variable\n            RAVE_PUBLICK_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/ravePay.ts\n            \n            variable\n            RAVE_SECRET_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/validation/validate.service.ts\n            \n            injectable\n            ValidateService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^16.1.7\n        \n            @nestjs/common : ^6.7.2\n        \n            @nestjs/core : ^6.7.2\n        \n            @nestjs/jwt : ^6.1.1\n        \n            @nestjs/mongoose : ^6.1.2\n        \n            @nestjs/passport : ^6.1.0\n        \n            @nestjs/platform-express : ^6.7.2\n        \n            @nestjs/swagger : ^3.1.0\n        \n            @sendgrid/mail : ^7.1.1\n        \n            agendash : ^1.0.0\n        \n            bcryptjs : ^2.4.3\n        \n            dotenv : ^8.2.0\n        \n            firebase-admin : ^8.12.1\n        \n            hbs : ^4.1.1\n        \n            lodash : ^4.17.15\n        \n            mailgen : ^2.0.13\n        \n            moment : ^2.24.0\n        \n            mongoose : ^5.7.11\n        \n            nestjs-agenda : ^1.0.2\n        \n            passport : ^0.4.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            ravepay : ^1.3.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^6.5.5\n        \n            swagger-ui-express : ^4.1.2\n        \n            validator : ^12.0.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            cardCharge   (src/.../ravePay.ts)\n                        \n                        \n                            decryptCardNum   (src/.../encryption.ts)\n                        \n                        \n                            decryptCVV   (src/.../encryption.ts)\n                        \n                        \n                            decryptPin   (src/.../encryption.ts)\n                        \n                        \n                            encryptCardNum   (src/.../encryption.ts)\n                        \n                        \n                            encryptCVV   (src/.../encryption.ts)\n                        \n                        \n                            encryptPin   (src/.../encryption.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    starting point for entire application\n\n\n                \n            \n        \n    \n    src/utils/ravePay.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            cardCharge\n                        \n                        \n                    \n                \n            \n            \n                \ncardCharge()\n                \n            \n\n\n\n\n        \n    \n    src/utils/encryption.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            decryptCardNum\n                        \n                        \n                    \n                \n            \n            \n                \ndecryptCardNum(card_no)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    card_no\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decryptCVV\n                        \n                        \n                    \n                \n            \n            \n                \ndecryptCVV(cvv)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cvv\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decryptPin\n                        \n                        \n                    \n                \n            \n            \n                \ndecryptPin(pin)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pin\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            encryptCardNum\n                        \n                        \n                    \n                \n            \n            \n                \nencryptCardNum(card_no)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    card_no\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            encryptCVV\n                        \n                        \n                    \n                \n            \n            \n                \nencryptCVV(cvv)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cvv\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            encryptPin\n                        \n                        \n                    \n                \n            \n            \n                \nencryptPin(pin)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pin\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExpenseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PlanModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ScheduleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_ExpenseModule\n\n\n\ncluster_ExpenseModule_exports\n\n\n\ncluster_ExpenseModule_providers\n\n\n\ncluster_PlanModule\n\n\n\ncluster_PlanModule_exports\n\n\n\ncluster_PlanModule_providers\n\n\n\ncluster_ScheduleModule\n\n\n\ncluster_ScheduleModule_exports\n\n\n\ncluster_ScheduleModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nCloudNotificationService \n\nCloudNotificationService \n\nCloudNotificationService  -->\n\nEmailModule->CloudNotificationService \n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nExpenseModule\n\nExpenseModule\n\nAppModule -->\n\nExpenseModule->AppModule\n\n\n\nCloudNotificationService  -->\n\nExpenseModule->CloudNotificationService \n\n\n\n\n\nExpenseService \n\nExpenseService \n\nExpenseService  -->\n\nExpenseModule->ExpenseService \n\n\n\n\n\nPlanModule\n\nPlanModule\n\nEmailModule -->\n\nPlanModule->EmailModule\n\n\n\nAppModule -->\n\nPlanModule->AppModule\n\n\n\nCloudNotificationService  -->\n\nPlanModule->CloudNotificationService \n\n\n\n\n\nPlanService \n\nPlanService \n\nPlanService  -->\n\nPlanModule->PlanService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nPlanModule->UserService \n\n\n\n\n\nScheduleModule\n\nScheduleModule\n\nAppModule -->\n\nScheduleModule->AppModule\n\n\n\n\n\nScheduleService \n\nScheduleService \n\nScheduleService  -->\n\nScheduleModule->ScheduleService \n\n\n\n\n\nUserModule\n\nUserModule\n\nEmailModule -->\n\nUserModule->EmailModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\nCloudNotificationService  -->\n\nUserModule->CloudNotificationService \n\n\n\nPlanService  -->\n\nUserModule->PlanService \n\n\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nValidateService\n\nValidateService\n\nAuthModule -->\n\nValidateService->AuthModule\n\n\n\n\n\nCloudNotificationService\n\nCloudNotificationService\n\nEmailModule -->\n\nCloudNotificationService->EmailModule\n\n\n\nExpenseModule -->\n\nCloudNotificationService->ExpenseModule\n\n\n\nPlanModule -->\n\nCloudNotificationService->PlanModule\n\n\n\nUserModule -->\n\nCloudNotificationService->UserModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nExpenseService\n\nExpenseService\n\nExpenseModule -->\n\nExpenseService->ExpenseModule\n\n\n\n\n\nPlanService\n\nPlanService\n\nPlanModule -->\n\nPlanService->PlanModule\n\n\n\nUserModule -->\n\nPlanService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nPlanModule -->\n\nUserService->PlanModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nScheduleService\n\nScheduleService\n\nScheduleModule -->\n\nScheduleService->ScheduleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            configKeys   (src/.../config.ts)\n                        \n                        \n                            expenseSchema   (src/.../expense.model.ts)\n                        \n                        \n                            firebaseApp   (src/.../cloud-notification.service.ts)\n                        \n                        \n                            plansSchema   (src/.../plan.model.ts)\n                        \n                        \n                            PRODUCTION_FLAG   (src/.../ravePay.ts)\n                        \n                        \n                            rave   (src/.../ravePay.ts)\n                        \n                        \n                            RAVE_PUBLICK_KEY   (src/.../ravePay.ts)\n                        \n                        \n                            RAVE_SECRET_KEY   (src/.../ravePay.ts)\n                        \n                        \n                            secret   (src/.../encryption.ts)\n                        \n                        \n                            serviceAccount   (src/.../cloud-notification.service.ts)\n                        \n                        \n                            UserSchema   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            configKeys\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    JWT_SECRET: 'YN2X2tW8dn3KyeGrRQHLMr952cFnUY2e',\n    SECRET: 'BhBwJueLqk7HzAFJcHeG22La85aRQXj4',\n    MONGODB_URI: 'mongodb://localhost:27017/savelite',\n    RAVE_PUBLICK_KEY: '',\n    RAVE_SECRET_KEY: '',\n    RAVE_PRODUCTION_FLAG: false,\n    SENDGRID_KEY: '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',\n    IMGUR_ENDPOINT: 'https://api.imgur.com/3/image',\n    IMGUR_CLIENT_ID: '924ff8331aaf4c1',\n    EMAIL_URL: 'https://savelite-api.herokuapp.com/email/reset/',\n}\n                        \n                    \n\n\n            \n        \n\n    src/model/expense.model.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            expenseSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n    _userID: {\n        type: mongoose.Schema.Types.ObjectId,\n        required: true,\n    },\n    budgetName: {\n        type: String,\n        required: true,\n    },\n    budget: {\n        type: Number,\n        required: true,\n    },\n    expenses: [\n        {\n            date: {\n                type: String,\n                required: true,\n            },\n            amount: {\n                type: Number,\n                required: true,\n            },\n            category: {\n                type: String,\n                required: true,\n            },\n            descr: {\n                type: String,\n                required: true,\n            },\n            remark: {\n                type: String,\n                required: true,\n                default: null,\n            },\n            icon: {\n                type: String,\n                required: true,\n            },\n        },\n    ],\n    images: [\n        {\n            id: {\n                type: String,\n                required: true,\n            },\n            name: {\n                type: String,\n                required: true,\n            },\n            datetime: {\n                type: Number,\n                required: true,\n            },\n            type: {\n                type: String,\n                required: true,\n            },\n            width: {\n                type: Number,\n                required: true,\n            },\n            height: {\n                type: Number,\n                required: true,\n            },\n            size: {\n                type: Number,\n                required: true,\n            },\n            deletehash: {\n                type: String,\n                required: true,\n            },\n            link: {\n                type: String,\n                required: true,\n            },\n        },\n    ],\n}, {timestamps: true})\n                        \n                    \n\n\n            \n        \n\n    src/controller/cloud-notification.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            firebaseApp\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : admin.initializeApp({\n    credential: admin.credential.cert(serviceAccount),\n    databaseURL: 'https://savelite-c8f57.firebaseio.com',\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            serviceAccount\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('../../savelite-c8f57-firebase-adminsdk.json')\n                        \n                    \n\n\n            \n        \n\n    src/model/plan.model.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            plansSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n    _userID: {\n        type: mongoose.Schema.Types.ObjectId,\n        required: true,\n    },\n    planName: {\n        type: String,\n        required: true,\n        unique: true,\n    },\n    periodicAmount: {\n        type: Number,\n        required: true,\n    },\n    targetAmount: {\n        type: String,\n        required: true,\n    },\n    withdrawalDate: {\n        type: Date,\n        required: true,\n    },\n    formatted_date: {\n        type: String,\n        required: true,\n    },\n    duration: {\n        type: String,\n        required: true,\n    },\n    card: {\n        firstname: {type: String, required: true},\n        lastname: {type: String, required: true},\n        expiry_date: {type: String, required: true},\n        card_no: {type: String, required: true},\n        pin: {type: String, required: true},\n        amount: {type: String, default: '0'},\n        cvv: {type: String, required: true},\n    },\n}, {timestamps: true})\n                        \n                    \n\n\n            \n        \n\n    src/utils/ravePay.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PRODUCTION_FLAG\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : configKeys.RAVE_PRODUCTION_FLAG\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rave\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Ravepay(RAVE_PUBLICK_KEY, RAVE_SECRET_KEY, PRODUCTION_FLAG)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RAVE_PUBLICK_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : configKeys.RAVE_PUBLICK_KEY\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RAVE_SECRET_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : configKeys.RAVE_SECRET_KEY\n                        \n                    \n\n\n            \n        \n\n    src/utils/encryption.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            secret\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : configKeys.SECRET\n                        \n                    \n\n\n            \n        \n\n    src/model/user.model.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n    fullname: {\n        type: String,\n        unique: true,\n        required: true,\n    },\n    username: {\n        type: String,\n        unique: true,\n        required: true,\n    },\n    phone_no: {\n        type: String,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n        trim: true,\n        minlenght: 1,\n        unique: true,\n        validate: {\n            validator: validator.isEmail,\n            message: '{value} is not a valid email',\n        },\n    },\n    password: {\n        type: String,\n        required: true,\n        minlength: 6,\n    },\n    profileImage: {\n        type: String,\n        default: undefined,\n    },\n    imgDelHash: {\n        type: String,\n        default: undefined,\n    },\n    reset_password_token: {\n        type: String,\n        default: undefined,\n    },\n    reset_password_expires: {\n        type: String,\n        default: undefined,\n    },\n    firebaseToken: {\n        type: String,\n        default: 'token',\n    },\n}, { timestamps: true })\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
